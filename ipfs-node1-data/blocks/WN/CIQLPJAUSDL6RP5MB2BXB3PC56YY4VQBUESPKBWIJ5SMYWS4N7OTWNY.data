hToZeroPeers)&&void 0!==i?i:this.opts.allowPublishToZeroPeers;if(0===p.size&&!m&&!y)throw Error("PublishError.InsufficientPeers");this.seenCache.put(h),this.mcache.put({msgId:u,msgIdStr:h},c,!0),this.publishedMessageIds.put(h);for(const b of p){this.sendRpc(b,{messages:[c]})||p.delete(b)}const v=Date.now()-s;return null===(o=this.metrics)||void 0===o||o.onPublishMsg(e,g,p.size,null!=c.data?c.data.length:0,v),y&&(p.add(this.components.peerId.toString()),super.dispatchEvent(new t6("gossipsub:message",{detail:{propagationSource:this.components.peerId,msgId:h,msg:l}})),super.dispatchEvent(new t6("message",{detail:l}))),{recipients:Array.from(p.values()).map((e=>i7(e)))}}reportMessageValidationResult(e,t,n){var r;let i;if(n===i6.Accept){if(i=this.mcache.validate(e),null!=i){const{message:n,originatingPeers:r}=i;this.score.deliverMessage(t,e,n.topic),this.forwardMessage(e,i.message,t,r)}}else if(i=this.mcache.remove(e),null!=i){const r=W7(n),{message:o,originatingPeers:s}=i;this.score.rejectMessage(t,e,o.topic,r);for(const t of s)this.score.rejectMessage(t,e,o.topic,r)}const o=this.score.messageFirstSeenTimestampMs(e);null===(r=this.metrics)||void 0===r||r.onReportValidation(i,n,o)}sendGraft(e,t){const n=[{topicID:t}];this.sendRpc(e,{control:{graft:n}})}async sendPrune(e,t){const n=[await this.makePrune(e,t,this.opts.doPX,!0)];this.sendRpc(e,{control:{prune:n}})}sendRpc(e,t){var n;const r=this.streamsOutbound.get(e);if(null==r)return this.log("Cannot send RPC to ".concat(e," as there is no open stream to it available")),!1;const i=this.control.get(e);null!=i&&(this.piggybackControl(e,t,i),this.control.delete(e));const o=this.gossip.get(e);null!=o&&(this.piggybackGossip(e,t,o),this.gossip.delete(e));const s=B7.encode(t).finish();try{r.push(s)}catch(a){return this.log.error("Cannot send rpc to ".concat(e),a),null!=i&&this.control.set(e,i),null!=o&&this.gossip.set(e,o),!1}return null===(n=this.metrics)||void 0===n||n.onRpcSent(t,s.length),!0}piggybackControl(e,t,n){if(null!=n.graft){null==t.control&&(t.control={}),null==t.control.graft&&(t.control.graft=[]);for(const o of n.graft){var r,i;null!=o.topicID&&null!==(r=null===(i=this.mesh.get(o.topicID))||void 0===i?void 0:i.has(e))&&void 0!==r&&r&&t.control.graft.push(o)}}if(null!=n.prune){null==t.control&&(t.control={}),null==t.control.prune&&(t.control.prune=[]);for(const r of n.prune){var o,s;null==r.topicID||null!==(o=null===(s=this.mesh.get(r.topicID))||void 0===s?void 0:s.has(e))&&void 0!==o&&o||t.control.prune.push(r)}}}piggybackGossip(e,t,n){null==t.control&&(t.control={}),t.control.ihave=n}async sendGraftPrune(e,t,n){const r=this.opts.doPX;for(const[i,o]of e){const e=o.map((e=>({topicID:e})));let s=[];const a=t.get(i);null!=a&&(s=await Promise.all(a.map((async e=>{var t;return this.makePrune(i,e,r&&!(null!==(t=n.get(i))&&void 0!==t&&t),false)}))),t.delete(i)),this.sendRpc(i,{control:{graft:e,prune:s}})}for(const[i,o]of t){const e=await Promise.all(o.map((async e=>{var t;return this.makePrune(i,e,r&&!(null!==(t=n.get(i))&&void 0!==t&&t),false)})));this.sendRpc(i,{control:{prune:e}})}}emitGossip(e){const t=this.mcache.getGossipIDs(new Set(e.keys()));for(const[r,i]of e){var n;this.doEmitGossip(r,i,null!==(n=t.get(r))&&void 0!==n?n:[])}}doEmitGossip(e,t,n){if(0===n.length)return;if(gee(n),n.length>E7&&this.log("too many messages for gossip; will truncate IHAVE list (%d messages)",n.length),0===t.size)return;let r=this.opts.Dlazy;const i=.25*t.size;let o=t;i>r&&(r=i),r>o.size?r=o.size:o=gee(Array.from(o)).slice(0,r),o.forEach((t=>{let r=n;n.length>E7&&(r=gee(r.slice()).slice(0,E7)),this.pushGossip(t,{topicID:e,messageIDs:r})}))}flush(){for(const[e,t]of this.gossip.entries())this.gossip.delete(e),this.sendRpc(e,{control:{ihave:t}});for(const[e,t]of this.control.entries())this.control.delete(e),this.sendRpc(e,{control:{graft:t.graft,prune:t.prune}})}pushGossip(e,t){var n;this.log("Add gossip to %s",e);const r=null!==(n=this.gossip.get(e))&&void 0!==n?n:[];this.gossip.set(e,r.concat(t))}async makePrune(e,t,n,r){var i;if(this.score.prune(e,t),(null===(i=this.streamsOutbound.get(e))||void 0===i?void 0:i.protocol)===b7)return{topicID:t,peers:[]};const o=r?this.opts.unsubcribeBackoff:this.opts.pruneBackoff,s=o/1e3;if(this.doAddBackoff(e,t,o),!n)return{topicID:t,peers:[],backoff:s};const a=this.getRandomGossipPeers(t,this.opts.prunePeers,(t=>t!==e&&this.score.score(t)>=0)),c=await Promise.all(Array.from(a).map((async e=>{var t;const n=i7(e);let r;try{r=await this.components.peerStore.get(n)}catch(i){if("ERR_NOT_FOUND"!==i.code)throw i}return{peerID:n.toBytes(),signedPeerRecord:null===(t=r)||void 0===t?void 0:t.peerRecordEnvelope}})));return{topicID:t,peers:c,backoff:s}}async heartbeat(){var e,t;const{D:n,Dlo:r,Dhi:i,Dscore:o,Dout:s,fanoutTTL:a}=this.opts;this.heartbeatTicks++;const c=new Map,l=e=>{let t=c.get(e);return void 0===t&&(t=this.score.score(e),c.set(e,t)),t},u=new Map,h=new Map,d=new Map;this.clearBackoff(),this.peerhave.clear(),null===(e=this.metrics)||void 0===e||e.cacheSize.set({cache:"iasked"},this.iasked.size),this.iasked.clear(),this.applyIwantPenalties(),this.heartbeatTicks%this.opts.directConnectTicks===0&&await this.directConnect(),null===(t=this.fastMsgIdCache)||void 0===t||t.prune(),this.seenCache.prune(),this.gossipTracer.prune(),this.publishedMessageIds.prune();const f=new Map;this.mesh.forEach(((e,t)=>{const a=this.topics.get(t),c=new Set,p=new Set;if(f.set(t,p),null!=a){const n=gee(Array.from(a)),r=this.backoff.get(t);for(const t of n){const n=this.streamsOutbound.get(t);if(null!=n&&this.multicodecs.includes(n.protocol)&&!e.has(t)&&!this.direct.has(t)){const e=l(t);(null==r||!r.has(t))&&e>=0&&c.add(t),e>=this.opts.scoreThresholds.gossipThreshold&&p.add(t)}}}const g=(n,r)=>{var i;this.log("HEARTBEAT: Remove mesh link to %s in %s",n,t),this.addBackoff(n,t),e.delete(n),l(n)>=this.opts.scoreThresholds.gossipThreshold&&p.add(n),null===(i=this.metrics)||void 0===i||i.onRemoveFromMesh(t,r,1);const o=h.get(n);null==o?h.set(n,[t]):o.push(t)},y=(n,r)=>{var i;this.log("HEARTBEAT: Add mesh link to %s in %s",n,t),this.score.graft(n,t),e.add(n),p.delete(n),null===(i=this.metrics)||void 0===i||i.onAddToMesh(t,r,1);const o=u.get(n);null==o?u.set(n,[t]):o.push(t)};if(e.forEach((e=>{const n=l(e);n<0&&(this.log("HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s",e,n,t),g(e,V7.BadScore),d.set(e,!0))})),e.size<r){const t=function(e,t){return n9(e,t,(()=>!0))}(c,n-e.size);t.forEach((e=>{y(e,z7.NotEnough)}))}if(e.size>i){let t=Array.from(e);t.sort(((e,t)=>l(t)-l(e))),t=t.slice(0,o).concat(gee(t.slice(o)));let r=0;if(t.slice(0,n).forEach((e=>{var t;null!==(t=this.outbound.get(e))&&void 0!==t&&t&&r++})),r<s){const e=e=>{const n=t[e];for(let r=e;r>0;r--)t[r]=t[r-1];t[0]=n};if(r>0){let i=r;for(let r=1;r<n&&i>0;r++){var m;null!==(m=this.outbound.get(t[r]))&&void 0!==m&&m&&(e(r),i--)}}let i=n-r;for(let r=n;r<t.length&&i>0;r++){var v;null!==(v=this.outbound.get(t[r]))&&void 0!==v&&v&&(e(r),i--)}}t.slice(n).forEach((e=>{g(e,V7.Excess)}))}if(e.size>=r){let t=0;if(e.forEach((e=>{var n;null!==(n=this.outbound.get(e))&&void 0!==n&&n&&t++})),t<s){n9(c,s-t,(e=>!0===this.outbound.get(e))).forEach((e=>{y(e,z7.Outbound)}))}}if(this.heartbeatTicks%this.opts.opportunisticGraftTicks===0&&e.size>1){const n=Array.from(e).sort(((e,t)=>l(e)-l(t))),r=Math.floor(e.size/2),i=l(n[r]);if(i<this.opts.scoreThresholds.opportunisticGraftThreshold){const e=n9(c,this.opts.opportunisticGraftPeers,(e=>l(e)>i));for(const n of e)this.log("HEARTBEAT: Opportunistically graft peer %s on topic %s",n,t),y(n,z7.Opportunistic)}}}));const p=Date.now();this.fanoutLastpub.forEach(((e,t)=>{e+a<p&&(this.fanout.delete(t),this.fanoutLastpub.delete(t))})),this.fanout.forEach(((e,t)=>{const r=this.topics.get(t);e.forEach((t=>{var n;(null===(n=null===r||void 0===r?void 0:r.has(t))||void 0===n||!n||l(t)<this.opts.scoreThresholds.publishThreshold)&&e.delete(t)}));const i=this.topics.get(t),o=[],s=new Set;if(f.set(t,s),null!=i){const t=gee(Array.from(i));for(const n of t){const t=this.streamsOutbound.get(n);if(null!=t&&this.multicodecs.includes(t.protocol)&&!e.has(n)&&!this.direct.has(n)){const e=l(n);e>=this.opts.scoreThresholds.publishThreshold&&o.push(n),e>=this.opts.scoreThresholds.gossipThreshold&&s.add(n)}}}if(e.size<n){const t=n-e.size;o.slice(0,t).forEach((t=>{e.add(t),null===s||void 0===s||s.delete(t)}))}})),this.emitGossip(f),await this.sendGraftPrune(u,h,d),this.flush(),this.mcache.shift(),this.dispatchEvent(new t6("gossipsub:heartbeat"))}getRandomGossipPeers(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:()=>!0;const r=this.topics.get(e);if(null==r)return new Set;let i=[];return r.forEach((e=>{const t=this.streamsOutbound.get(e);null!=t&&this.multicodecs.includes(t.protocol)&&n(e)&&i.push(e)})),i=gee(i),t>0&&i.length>t&&(i=i.slice(0,t)),new Set(i)}onScrapeMetrics(e){var t,n;e.mcacheSize.set(this.mcache.size),e.mcacheNotValidatedCount.set(this.mcache.notValidatedCount),e.cacheSize.set({cache:"direct"},this.direct.size),e.cacheSize.set({cache:"seenCache"},this.seenCache.size),e.cacheSize.set({cache:"fastMsgIdCache"},null!==(t=null===(n=this.fastMsgIdCache)||void 0===n?void 0:n.size)&&void 0!==t?t:0),e.cacheSize.set({cache:"publishedMessageIds"},this.publishedMessageIds.size),e.cacheSize.set({cache:"mcache"},this.mcache.size),e.cacheSize.set({cache:"score"},this.score.size),e.cacheSize.set({cache:"gossipTracer.promises"},this.gossipTracer.size),e.cacheSize.set({cache:"gossipTracer.requests"},this.gossipTracer.requestMsByMsgSize),e.cacheSize.set({cache:"topics"},this.topics.size),e.cacheSize.set({cache:"subscriptions"},this.subscriptions.size),e.cacheSize.set({cache:"mesh"},this.mesh.size),e.cacheSize.set({cache:"fanout"},this.fanout.size),e.cacheSize.set({cache:"peers"},this.peers.size),e.cacheSize.set({cache:"streamsOutbound"},this.streamsOutbound.size),e.cacheSize.set({cache:"streamsInbound"},this.streamsInbound.size),e.cacheSize.set({cache:"acceptFromWhitelist"},this.acceptFromWhitelist.size),e.cacheSize.set({cache:"gossip"},this.gossip.size),e.cacheSize.set({cache:"control"},this.control.size),e.cacheSize.set({cache:"peerhave"},this.peerhave.size),e.cacheSize.set({cache:"outbound"},this.outbound.size);let r=0;const i=Date.now();e.connectedPeersBackoffSec.reset();for(const u of this.backoff.values()){r+=u.size;for(const[t,n]of u.entries())this.peers.has(t)&&e.connectedPeersBackoffSec.observe(Math.max(0,n-i)/1e3)}e.cacheSize.set({cache:"backoff"},r);for(const[u,h]of this.topics)e.topicPeersCount.set({topicStr:u},h.size);for(const[u,h]of this.mesh)e.meshPeerCounts.set({topicStr:u},h.size);const o=[],s=new Map;e.behaviourPenalty.reset();for(const u of this.peers.keys()){var a,c;const t=this.score.score(u);o.push(t),s.set(u,t),e.behaviourPenalty.observe(null!==(a=null===(c=this.score.peerStats.get(u))||void 0===c?void 0:c.behaviourPenalty)&&void 0!==a?a:0)}e.registerScores(o,this.opts.scoreThresholds),e.registerScorePerMesh(this.mesh,s);const l=function(e,t,n,r,i){const o={byTopic:new Map,p5w:[],p6w:[],p7w:[],score:[]};for(const s of e){const e=t.get(s);if(null!=e){const t=h9(s,e,n,r,i);for(const[e,n]of t.byTopic){let t=o.byTopic.get(e);null==t&&(t={p1w:[],p2w:[],p3w:[],p3bw:[],p4w:[]},o.byTopic.set(e,t)),t.p1w.push(n.p1w),t.p2w.push(n.p2w),t.p3w.push(n.p3w),t.p3bw.push(n.p3bw),t.p4w.push(n.p4w)}o.p5w.push(t.p5w),o.p6w.push(t.p6w),o.p7w.push(t.p7w),o.score.push(t.score)}else o.p5w.push(0),o.p6w.push(0),o.p7w.push(0),o.score.push(0)}return o}(this.peers.keys(),this.score.peerStats,this.score.params,this.score.peerIPs,e.topicStrToLabel);e.registerScoreWeights(l)}}function Mne(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t=>new Lne(t,e)}function Une(){const e=Ws();let t=!1;return{sink:async n=>{if(t)throw new Error("already piped");t=!0,e.resolve(n)},source:async function*(){const t=await e.promise;yield*t}()}}(0,Yo.Z)(Lne,"multicodec",w7);const Fne=65535,Kne=Boolean(null===(Nne=globalThis.process)||void 0===Nne||null===(Bne=Nne.env)||void 0===Bne?void 0:Bne.DUMP_SESSION_KEYS),jne={hashSHA256:e=>cu(e),getHKDF(e,t){const n=$l(cu,t,e),r=nu(cu,n,void 0,96);return[r.subarray(0,32),r.subarray(32,64),r.subarray(64,96)]},generateX25519KeyPair(){const e=Ql.utils.randomPrivateKey();return{publicKey:Ql.getPublicKey(e),privateKey:e}},generateX25519KeyPairFromSeed:e=>({publicKey:Ql.getPublicKey(e),privateKey:e}),generateX25519SharedKey:(e,t)=>Ql.getSharedSecret(e,t),chaCha20Poly1305Encrypt:(e,t,n,r)=>uc(r,t,n).encrypt(e),chaCha20Poly1305Decrypt:(e,t,n,r,i)=>uc(r,t,n).decrypt(e,i)},Zne=e=>{const t=(0,Us.E)(2);return new DataView(t.buffer,t.byteOffset,t.byteLength).setUint16(0,e,!1),t};Zne.bytes=2;const zne=e=>{if(e.length<2)throw RangeError("Could not decode int16BE");return e instanceof Uint8Array?new DataView(e.buffer,e.byteOffset,e.byteLength).getUint16(0,!1):e.getUint16(0)};zne.bytes=2;var Vne,Hne;async function qne(e,t,n){const r=await async function(e,t){if(null==e.privateKey)throw new Error("PrivateKey was missing from PeerId");return(await OJ(e.privateKey)).sign(t)}(e,Qne(t));if(null==e.publicKey)throw new Error("PublicKey was missing from local PeerId");return function(e,t,n){return Hne.encode({identityKey:e,identitySig:t,extensions:null!==n&&void 0!==n?n:{webtransportCerthashes:[]}}).subarray()}(e.publicKey,r,n)}async function Gne(e){return P1(e.identityKey)}function Wne(e){return Hne.decode(e)}function Qne(e){const t=(0,mu.m)("noise-libp2p-static-key:");return(0,Ls.z)([t,e],t.length+e.length)}async function Yne(e,t,n){const r=await P1(t.identityKey);if(!r.equals(n))throw new Error("Payload identity key ".concat(r.toString()," does not match expected remote peer ").concat(n.toString()));const i=Qne(e);if(null==r.publicKey)throw new Error("PublicKey was missing from PeerId");if(null==t.identitySig)throw new Error("Signature was missing from message");const o=DJ(r.publicKey);if(!await o.verify(i,t.identitySig))throw new Error("Static key doesn't match to peer that signed payload!");return r}function Jne(e){return e instanceof Uint8Array&&32===e.length}!function(e){let t;e.codec=()=>(null==t&&(t=ws((function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!1!==n.lengthDelimited&&t.fork(),null!=e.webtransportCerthashes)for(const r of e.webtransportCerthashes)t.uint32(10),t.bytes(r);!1!==n.lengthDelimited&&t.ldelim()}),((e,t)=>{const n={webtransportCerthashes:[]},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();if(t>>>3===1)n.webtransportCerthashes.push(e.bytes());else e.skipType(7&t)}return n}))),t),e.encode=t=>fs(t,e.codec()),e.decode=t=>ds(t,e.codec())}(Vne||(Vne={})),function(e){let t;e.codec=()=>(null==t&&(t=ws((function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!1!==n.lengthDelimited&&t.fork(),null!=e.identityKey&&e.identityKey.byteLength>0&&(t.uint32(10),t.bytes(e.identityKey)),null!=e.identitySig&&e.identitySig.byteLength>0&&(t.uint32(18),t.bytes(e.identitySig)),null!=e.extensions&&(t.uint32(34),Vne.codec().encode(e.extensions,t)),!1!==n.lengthDelimited&&t.ldelim()}),((e,t)=>{const n={identityKey:(0,Us.u)(0),identitySig:(0,Us.u)(0)},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:n.identityKey=e.bytes();break;case 2:n.identitySig=e.bytes();break;case 4:n.extensions=Vne.codec().decode(e,e.uint32());break;default:e.skipType(7&t)}}return n}))),t),e.encode=t=>fs(t,e.codec()),e.decode=t=>ds(t,e.codec())}(Hne||(Hne={}));const Xne=xH("libp2p:noise");let $ne;function ere(e){e?($ne("LOCAL_PUBLIC_EPHEMERAL_KEY ".concat((0,Su.B)(e.publicKey,"hex"))),$ne("LOCAL_PRIVATE_EPHEMERAL_KEY ".concat((0,Su.B)(e.privateKey,"hex")))):$ne("Missing local ephemeral keys.")}function tre(e){$ne("REMOTE_EPHEMERAL_PUBLIC_KEY ".concat((0,Su.B)(e,"hex")))}$ne=Kne?Xne:Object.assign((()=>{}),{enabled:!1,trace:()=>{},error:()=>{}});class nre{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;(0,Yo.Z)(this,"n",void 0),(0,Yo.Z)(this,"bytes",void 0),(0,Yo.Z)(this,"view",void 0),this.n=e,this.bytes=(0,Us.u)(12),this.view=new DataView(this.bytes.buffer,this.bytes.byteOffset,this.bytes.byteLength),this.view.setUint32(4,e,!0)}increment(){this.n++,this.view.setUint32(4,this.n,!0)}getBytes(){return this.bytes}getUint64(){return this.n}assertValue(){if(this.n>4294967295)throw new Error("Cipherstate has reached maximum n, a new handshake must be performed")}}class rre{constructor(e){(0,Yo.Z)(this,"crypto",void 0),this.crypto=e}encryptWithAd(e,t,n){const r=this.encrypt(e.k,e.n,t,n);return e.n.increment(),r}decryptWithAd(e,t,n,r){const{plaintext:i,valid:o}=this.decrypt(e.k,e.n,t,n,r);return o&&e.n.increment(),{plaintext:i,valid:o}}hasKey(e){return!this.isEmptyKey(e.k)}createEmptyKey(){return(0,Us.u)(32)}isEmptyKey(e){const t=this.createEmptyKey();return(0,Ms.f)(t,e)}encrypt(e,t,n,r){return t.assertValue(),this.crypto.chaCha20Poly1305Encrypt(r,t.getBytes(),n,e)}encryptAndHash(e,t){let n;return n=this.hasKey(e.cs)?this.encryptWithAd(e.cs,e.h,t):t,this.mixHash(e,n),n}decrypt(e,t,n,r,i){t.assertValue();const o=this.crypto.chaCha20Poly1305Decrypt(r,t.getBytes(),n,e,i);return o?{plaintext:o,valid:!0}:{plaintext:(0,Us.u)(0),valid:!1}}decryptAndHash(e,t){let n,r=!0;return this.hasKey(e.cs)?({plaintext:n,valid:r}=this.decryptWithAd(e.cs,e.h,t)):n=t,this.mixHash(e,t),{plaintext:n,valid:r}}dh(e,t){try{const n=this.crypto.generateX25519SharedKey(e,t);return 32===n.length?n:n.subarray(0,32)}catch(n){const e=n;return Xne.error(e),(0,Us.u)(32)}}mixHash(e,t){e.h=this.getHash(e.h,t)}getHash(e,t){return this.crypto.hashSHA256((0,Ls.z)([e,t],e.length+t.length))}mixKey(e,t){const[n,r]=this.crypto.getHKDF(e.ck,t);e.cs=this.initializeKey(r),e.ck=n}initializeKey(e){return{k:e,n:new nre}}initializeSymmetric(e){const t=(0,ed.mL)(e,"utf-8"),n=this.hashProtocolName(t),r=n,i=this.createEmptyKey();return{cs:this.initializeKey(i),ck:r,h:n}}hashProtocolName(e){if(e.length<=32){const t=(0,Us.u)(32);return t.set(e),t}return this.getHash(e,(0,Us.u)(0))}split(e){const[t,n]=this.crypto.getHKDF(e.ck,(0,Us.u)(0));return{cs1:this.initializeKey(t),cs2:this.initializeKey(n)}}writeMessageRegular(e,t){const n=this.encryptWithAd(e,(0,Us.u)(0),t);return{ne:this.createEmptyKey(),ns:(0,Us.u)(0),ciphertext:n}}readMessageRegular(e,t){return this.decryptWithAd(e,(0,Us.u)(0),t.ciphertext)}}class ire extends rre{initializeInitiator(e,t,n,r){const i=this.initializeSymmetric("Noise_XX_25519_ChaChaPoly_SHA256");this.mixHash(i,e);return{ss:i,s:t,rs:n,psk:r,re:(0,Us.u)(32)}}initializeResponder(e,t,n,r){const i=this.initializeSymmetric("Noise_XX_25519_ChaChaPoly_SHA256");this.mixHash(i,e);return{ss:i,s:t,rs:n,psk:r,re:(0,Us.u)(32)}}writeMessageA(e,t,n){const r=(0,Us.u)(0);e.e=void 0!==n?n:this.crypto.generateX25519KeyPair();const i=e.e.publicKey;this.mixHash(e.ss,i);return{ne:i,ns:r,ciphertext:this.encryptAndHash(e.ss,t)}}writeMessageB(e,t){e.e=this.crypto.generateX25519KeyPair();const n=e.e.publicKey;this.mixHash(e.ss,n),this.mixKey(e.ss,this.dh(e.e.privateKey,e.re));const r=e.s.publicKey,i=this.encryptAndHash(e.ss,r);this.mixKey(e.ss,this.dh(e.s.privateKey,e.re));return{ne:n,ns:i,ciphertext:this.encryptAndHash(e.ss,t)}}writeMessageC(e,t){const n=e.s.publicKey,r=this.encryptAndHash(e.ss,n);this.mixKey(e.ss,this.dh(e.s.privateKey,e.re));const i=this.encryptAndHash(e.ss,t),o={ne:this.createEmptyKey(),ns:r,ciphertext:i},{cs1:s,cs2:a}=this.split(e.ss);return{h:e.ss.h,messageBuffer:o,cs1:s,cs2:a}}readMessageA(e,t){return Jne(t.ne)&&(e.re=t.ne),this.mixHash(e.ss,e.re),this.decryptAndHash(e.ss,t.ciphertext)}readMessageB(e,t){if(Jne(t.ne)&&(e.re=t.ne),this.mixHash(e.ss,e.re),!e.e)throw new Error("Handshake state `e` param is missing.");this.mixKey(e.ss,this.dh(e.e.privateKey,e.re));const{plaintext:n,valid:r}=this.decryptAndHash(e.ss,t.ns);r&&Jne(n)&&(e.rs=n),this.mixKey(e.ss,this.dh(e.e.privateKey,e.rs));const{plaintext:i,valid:o}=this.decryptAndHash(e.ss,t.ciphertext);return{plaintext:i,valid:r&&o}}readMessageC(e,t){const{plaintext:n,valid:r}=this.decryptAndHash(e.ss,t.ns);if(r&&Jne(n)&&(e.rs=n),!e.e)throw new Error("Handshake state `e` param is missing.");this.mixKey(e.ss,this.dh(e.e.privateKey,e.rs));const{plaintext:i,valid:o}=this.decryptAndHash(e.ss,t.ciphertext),{cs1:s,cs2:a}=this.split(e.ss);return{h:e.ss.h,plaintext:i,valid:r&&o,cs1:s,cs2:a}}initSession(e,t,n){const r=this.createEmptyKey(),i=(0,Us.u)(32);let o;return o=e?this.initializeInitiator(t,n,i,r):this.initializeResponder(t,n,i,r),{hs:o,i:e,mc:0}}sendMessage(e,t,n){let r;if(0===e.mc)r=this.writeMessageA(e.hs,t,n);else if(1===e.mc)r=this.writeMessageB(e.hs,t);else if(2===e.mc){const{h:n,messageBuffer:i,cs1:o,cs2:s}=this.writeMessageC(e.hs,t);r=i,e.h=n,e.cs1=o,e.cs2=s}else{if(!(e.mc>2))throw new Error("Session invalid.");if(e.i){if(!e.cs1)throw new Error("CS1 (cipher state) is not defined");r=this.writeMessageRegular(e.cs1,t)}else{if(!e.cs2)throw new Error("CS2 (cipher state) is not defined");r=this.writeMessageRegular(e.cs2,t)}}return e.mc++,r}recvMessage(e,t){let n=(0,Us.u)(0),r=!1;if(0===e.mc)({plaintext:n,valid:r}=this.readMessageA(e.hs,t));else if(1===e.mc)({plaintext:n,valid:r}=this.readMessageB(e.hs,t));else if(2===e.mc){const{h:i,plaintext:o,valid:s,cs1:a,cs2:c}=this.readMessageC(e.hs,t);n=o,r=s,e.h=i,e.cs1=a,e.cs2=c}return e.mc++,{plaintext:n,valid:r}}}class ore{constructor(e,t,n,r,i,o,s,a){(0,Yo.Z)(this,"isInitiator",void 0),(0,Yo.Z)(this,"session",void 0),(0,Yo.Z)(this,"remotePeer",void 0),(0,Yo.Z)(this,"remoteExtensions",{webtransportCerthashes:[]}),(0,Yo.Z)(this,"payload",void 0),(0,Yo.Z)(this,"connection",void 0),(0,Yo.Z)(this,"xx",void 0),(0,Yo.Z)(this,"staticKeypair",void 0),(0,Yo.Z)(this,"prologue",void 0),this.isInitiator=e,this.payload=t,this.prologue=n,this.staticKeypair=i,this.connection=o,s&&(this.remotePeer=s),this.xx=null!==a&&void 0!==a?a:new ire(r),this.session=this.xx.initSession(this.isInitiator,this.prologue,this.staticKeypair)}async propose(){var e;if(e=this.session.hs.s,$ne("LOCAL_STATIC_PUBLIC_KEY ".concat((0,Su.B)(e.publicKey,"hex"))),$ne("LOCAL_STATIC_PRIVATE_KEY ".concat((0,Su.B)(e.privateKey,"hex"))),this.isInitiator){Xne.trace("Stage 0 - Initiator starting to send first message.");const e=this.xx.sendMessage(this.session,(0,Us.u)(0));await this.connection.write(function(e){return(0,Ls.z)([e.ne,e.ciphertext],e.ne.length+e.ciphertext.length)}(e)),Xne.trace("Stage 0 - Initiator finished sending first message."),ere(this.session.hs.e)}else{Xne.trace("Stage 0 - Responder waiting to receive first message...");const e=function(e){if(e.length<32)throw new Error("Cannot decode stage 0 MessageBuffer: length less than 32 bytes.");return{ne:e.subarray(0,32),ciphertext:e.subarray(32,e.length),ns:(0,Us.u)(0)}}((await this.connection.read()).subarray()),{valid:t}=this.xx.recvMessage(this.session,e);if(!t)throw new Oq("xx handshake stage 0 validation fail");Xne.trace("Stage 0 - Responder received first message."),tre(this.session.hs.re)}}async exchange(){if(this.isInitiator){Xne.trace("Stage 1 - Initiator waiting to receive first message from responder...");const n=function(e){if(e.length<80)throw new Error("Cannot decode stage 1 MessageBuffer: length less than 80 bytes.");return{ne:e.subarray(0,32),ns:e.subarray(32,80),ciphertext:e.subarray(80,e.length)}}((await this.connection.read()).subarray()),{plaintext:r,valid:i}=this.xx.recvMessage(this.session,n);if(!i)throw new Oq("xx handshake stage 1 validation fail");Xne.trace("Stage 1 - Initiator received the message."),tre(this.session.hs.re),e=this.session.hs.rs,$ne("REMOTE_STATIC_PUBLIC_KEY ".concat((0,Su.B)(e,"hex"))),Xne.trace("Initiator going to check remote's signature...");try{const e=Wne(r);this.remotePeer=this.remotePeer||await Gne(e),await Yne(this.session.hs.rs,e,this.remotePeer),this.setRemoteNoiseExtension(e.extensions)}catch(t){throw new Dq("Error occurred while verifying signed payload: ".concat(t.message))}Xne.trace("All good with the signature!")}else{Xne.trace("Stage 1 - Responder sending out first message with signed payload and static key.");const e=this.xx.sendMessage(this.session,this.payload);await this.connection.write(function(e){return(0,Ls.z)([e.ne,e.ns,e.ciphertext],e.ne.length+e.ns.length+e.ciphertext.length)}(e)),Xne.trace("Stage 1 - Responder sent the second handshake message with signed payload."),ere(this.session.hs.e)}var e}async finish(){if(this.isInitiator){Xne.trace("Stage 2 - Initiator sending third handshake message.");const e=this.xx.sendMessage(this.session,this.payload);await this.connection.write(function(e){return(0,Ls.z)([e.ns,e.ciphertext],e.ns.length+e.ciphertext.length)}(e)),Xne.trace("Stage 2 - Initiator sent message with signed payload.")}else{Xne.trace("Stage 2 - Responder waiting for third handshake message...");const e=function(e){if(e.length<48)throw new Error("Cannot decode stage 2 MessageBuffer: length less than 48 bytes.");return{ne:(0,Us.u)(0),ns:e.subarray(0,48),ciphertext:e.subarray(48,e.length)}}((await this.connection.read()).subarray()),{plaintext:n,valid:r}=this.xx.recvMessage(this.session,e);if(!r)throw new Oq("xx handshake stage 2 validation fail");Xne.trace("Stage 2 - Responder received the message, finished handshake.");try{const e=Wne(n);this.remotePeer=this.remotePeer||await Gne(e),await Yne(this.session.hs.rs,e,this.remotePeer),this.setRemoteNoiseExtension(e.extensions)}catch(t){throw new Dq("Error occurred while verifying signed payload: ".concat(t.message))}}var e;(e=this.session).cs1&&e.cs2?($ne("CIPHER_STATE_1 ".concat(e.cs1.n.getUint64()," ").concat((0,Su.B)(e.cs1.k,"hex"))),$ne("CIPHER_STATE_2 ".concat(e.cs2.n.getUint64()," ").concat((0,Su.B)(e.cs2.k,"hex")))):$ne("Missing cipher state.")}encrypt(e,t){const n=this.getCS(t);return this.xx.encryptWithAd(n,(0,Us.u)(0),e)}decrypt(e,t,n){const r=this.getCS(t,!1);return this.xx.decryptWithAd(r,(0,Us.u)(0),e,n)}getRemoteStaticKey(){return this.session.hs.rs}getCS(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(!e.cs1||!e.cs2)throw new Oq("Handshake not completed properly, cipher state does not exist.");return this.isInitiator?t?e.cs1:e.cs2:t?e.cs2:e.cs1}setRemoteNoiseExtension(e){e&&(this.remoteExtensions=e)}}class sre{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,Yo.Z)(this,"protocol","/noise"),(0,Yo.Z)(this,"crypto",void 0),(0,Yo.Z)(this,"prologue",void 0),(0,Yo.Z)(this,"staticKeys",void 0),(0,Yo.Z)(this,"extensions",void 0),(0,Yo.Z)(this,"metrics",void 0);const{staticNoiseKey:t,extensions:n,crypto:r,prologueBytes:i,metrics:o}=e;this.crypto=null!==r&&void 0!==r?r:jne,this.extensions=n,this.metrics=o?function(e){return{xxHandshakeSuccesses:e.registerCounter("libp2p_noise_xxhandshake_successes_total",{help:"Total count of noise xxHandshakes successes_"}),xxHandshakeErrors:e.registerCounter("libp2p_noise_xxhandshake_error_total",{help:"Total count of noise xxHandshakes errors"}),encryptedPackets:e.registerCounter("libp2p_noise_encrypted_packets_total",{help:"Total count of noise encrypted packets successfully"}),decryptedPackets:e.registerCounter("libp2p_noise_decrypted_packets_total",{help:"Total count of noise decrypted packets"}),decryptErrors:e.registerCounter("libp2p_noise_decrypt_errors_total",{help:"Total count of noise decrypt errors"})}}(o):void 0,this.staticKeys=t?this.crypto.generateX25519KeyPairFromSeed(t):this.crypto.generateX25519KeyPair(),this.prologue=null!==i&&void 0!==i?i:(0,Us.u)(0)}async secureOutbound(e,t,n){const r=ua(t,{lengthEncoder:Zne,lengthDecoder:zne,maxDataLength:Fne}),i=await this.performHandshake({connection:r,isInitiator:!0,localPeer:e,remotePeer:n});return{conn:await this.createSecureConnection(r,i),remoteExtensions:i.remoteExtensions,remotePeer:i.remotePeer}}async secureInbound(e,t,n){const r=ua(t,{lengthEncoder:Zne,lengthDecoder:zne,maxDataLength:Fne}),i=await this.performHandshake({connection:r,isInitiator:!1,localPeer:e,remotePeer:n});return{conn:await this.createSecureConnection(r,i),remotePeer:i.remotePeer,remoteExtensions:i.remoteExtensions}}async performHandshake(e){const t=await qne(e.localPeer,this.staticKeys.publicKey,this.extensions);return this.performXXHandshake(e,t)}async performXXHandshake(e,t){const{isInitiator:n,remotePeer:r,connection:i}=e,o=new ore(n,t,this.prologue,this.crypto,this.staticKeys,i,r);try{var s;await o.propose(),await o.exchange(),await o.finish(),null===(s=this.metrics)||void 0===s||s.xxHandshakeSuccesses.increment()}catch(c){var a;if(null===(a=this.metrics)||void 0===a||a.xxHandshakeErrors.increment(),c instanceof Error)throw c.message="Error occurred during XX handshake: ".concat(c.message),c}return o}async createSecureConnection(e,t){const[n,r]=function(){const e=Une(),t=Une();return[{source:e.source,sink:t.sink},{source:t.source,sink:e.sink}]}(),i=e.unwrap();return await _G(n,function(e,t){return async function*(n){for await(const r of n)for(let n=0;n<r.length;n+=65519){let i=n+65519;i>r.length&&(i=r.length);const o=e.encrypt(r.subarray(n,i),e.session);null===t||void 0===t||t.encryptedPackets.increment(),yield(0,ed.zo)([Zne(o.byteLength),o],2+o.byteLength)}}}(t,this.metrics),i,(e=>yG(e,{lengthDecoder:zne})),function(e,t){return async function*(n){for await(const r of n)for(let n=0;n<r.length;n+=Fne){let i=n+Fne;if(i>r.length&&(i=r.length),i-16<n)throw new Error("Invalid chunk");const o=r.subarray(n,i),s=r.subarray(n,i-16),{plaintext:a,valid:c}=e.decrypt(o,e.session,s);if(!c)throw null===t||void 0===t||t.decryptErrors.increment(),new Error("Failed to validate decrypted chunk");null===t||void 0===t||t.decryptedPackets.increment(),yield a}}}(t,this.metrics),n),r}}function are(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return()=>new sre(e)}const cre="ERR_INVALID_FRAME",lre="ERR_UNREQUESTED_PING",ure="ERR_NOT_MATCHING_PING",hre="ERR_STREAM_ALREADY_EXISTS",dre="ERR_DECODE_INVALID_VERSION",fre="ERR_BOTH_CLIENTS",pre="ERR_RECV_WINDOW_EXCEEDED",gre=new Set([cre,lre,ure,hre,dre,fre,pre]),yre="ERR_INVALID_CONFIG",mre="ERR_MUXER_LOCAL_CLOSED",vre="ERR_MUXER_REMOTE_CLOSED",bre=262144,wre={log:xH("libp2p:yamux"),enableKeepAlive:!0,keepAliveInterval:3e4,maxInboundStreams:1e3,maxOutboundStreams:1e3,initialStreamWindowSize:bre,maxStreamWindowSize:16777216,maxMessageSize:65536};var Ere,Are;!function(e){e[e.Data=0]="Data",e[e.WindowUpdate=1]="WindowUpdate",e[e.Ping=2]="Ping",e[e.GoAway=3]="GoAway"}(Ere||(Ere={})),function(e){e[e.SYN=1]="SYN",e[e.ACK=2]="ACK",e[e.FIN=4]="FIN",e[e.RST=8]="RST"}(Are||(Are={}));Object.values(Are).filter((e=>"string"!==typeof e));var Sre;!function(e){e[e.NormalTermination=0]="NormalTermination",e[e.ProtocolError=1]="ProtocolError",e[e.InternalError=2]="InternalError"}(Sre||(Sre={}));const _re=2**24;class Ire{constructor(e){(0,Yo.Z)(this,"source",void 0),(0,Yo.Z)(this,"buffer",void 0),(0,Yo.Z)(this,"frameInProgress",void 0),this.source=function(e){if(void 0!==e[Symbol.iterator]){const t=e[Symbol.iterator]();return t.return=void 0,{[Symbol.iterator]:()=>t}}if(void 0!==e[Symbol.asyncIterator]){const t=e[Symbol.asyncIterator]();return t.return=void 0,{[Symbol.asyncIterator]:()=>t}}throw new Error("a source must be either an iterable or an async iterable")}(e),this.buffer=new Zs,this.frameInProgress=!1}async*emitFrames(){for await(const e of this.source)for(this.buffer.append(e);;){const e=this.readHeader();if(void 0===e)break;const{type:t,length:n}=e;t===Ere.Data?(this.frameInProgress=!0,yield{header:e,readData:this.readBytes.bind(this,n)}):yield{header:e}}}readHeader(){if(this.frameInProgress)throw new Pq("decoding frame already in progress","ERR_DECODE_IN_PROGRESS");if(this.buffer.length<12)return;const e=function(e){if(0!==e[0])throw new Pq("Invalid frame version",dre);return{type:e[1],flag:(e[2]<<8)+e[3],streamID:e[4]*_re+(e[5]<<16)+(e[6]<<8)+e[7],length:e[8]*_re+(e[9]<<16)+(e[10]<<8)+e[11]}}(this.buffer.subarray(0,12));return this.buffer.consume(12),e}async readBytes(e){if(this.buffer.length<e)for await(const n of this.source)if(this.buffer.append(n),this.buffer.length>=e)break;const t=this.buffer.sublist(0,e);return this.buffer.consume(e),this.frameInProgress=!1,t}}function Cre(e){const t=new Uint8Array(12);return t[1]=e.type,t[2]=e.flag>>>8,t[3]=e.flag,t[4]=e.streamID>>>24,t[5]=e.streamID>>>16,t[6]=e.streamID>>>8,t[7]=e.streamID,t[8]=e.length>>>24,t[9]=e.length>>>16,t[10]=e.length>>>8,t[11]=e.length,t}function Tre(e){return null!=e&&"function"===typeof e.then}class kre{constructor(e){var t,n;(0,Yo.Z)(this,"id",void 0),(0,Yo.Z)(this,"direction",void 0),(0,Yo.Z)(this,"timeline",void 0),(0,Yo.Z)(this,"protocol",void 0),(0,Yo.Z)(this,"metadata",void 0),(0,Yo.Z)(this,"source",void 0),(0,Yo.Z)(this,"status",void 0),(0,Yo.Z)(this,"readStatus",void 0),(0,Yo.Z)(this,"writeStatus",void 0),(0,Yo.Z)(this,"sinkController",void 0),(0,Yo.Z)(this,"sinkEnd",void 0),(0,Yo.Z)(this,"endErr",void 0),(0,Yo.Z)(this,"streamSource",void 0),(0,Yo.Z)(this,"onEnd",void 0),(0,Yo.Z)(this,"onCloseRead",void 0),(0,Yo.Z)(this,"onCloseWrite",void 0),(0,Yo.Z)(this,"onReset",void 0),(0,Yo.Z)(this,"onAbort",void 0),(0,Yo.Z)(this,"sendCloseWriteTimeout",void 0),(0,Yo.Z)(this,"log",void 0),this.sinkController=new AbortController,this.sinkEnd=Ws(),this.log=e.log,this.status="open",this.readStatus="ready",this.writeStatus="ready",this.id=e.id,this.metadata=null!==(t=e.metadata)&&void 0!==t?t:{},this.direction=e.direction,this.timeline={open:Date.now()},this.sendCloseWriteTimeout=null!==(n=e.sendCloseWriteTimeout)&&void 0!==n?n:5e3,this.onEnd=e.onEnd,this.onCloseRead=null===e||void 0===e?void 0:e.onCloseRead,this.onCloseWrite=null===e||void 0===e?void 0:e.onCloseWrite,this.onReset=null===e||void 0===e?void 0:e.onReset,this.onAbort=null===e||void 0===e?void 0:e.onAbort,this.source=this.streamSource=EG({onEnd:e=>{null!=e?this.log.trace("source ended with error",e):this.log.trace("source ended"),this.onSourceEnd(e)}}),this.sink=this.sink.bind(this)}async sink(e){if("ready"!==this.writeStatus)throw new Pq('writable end state is "'.concat(this.writeStatus,'" not "ready"'),"ERR_SINK_INVALID_STATE");try{this.writeStatus="writing";const t={signal:this.sinkController.signal};if("outbound"===this.direction){const e=this.sendNewStream(t);Tre(e)&&await e}e=PF(e,this.sinkController.signal,{returnOnAbort:!0}),this.log.trace("sink reading from source");for await(let n of e){n=n instanceof Uint8Array?new Zs(n):n;const e=this.sendData(n,t);Tre(e)&&await e}this.log.trace('sink finished reading from source, write status is "%s"',this.writeStatus),"writing"===this.writeStatus&&(this.writeStatus="closing",this.log.trace("send close write to remote"),await this.sendCloseWrite({signal:AbortSignal.timeout(this.sendCloseWriteTimeout)}),this.writeStatus="closed"),this.onSinkEnd()}catch(t){throw this.log.trace("sink ended with error, calling abort with error",t),this.abort(t),t}finally{this.log.trace("resolve sink end"),this.sinkEnd.resolve()}}onSourceEnd(e){var t;null==this.timeline.closeRead&&(this.timeline.closeRead=Date.now(),this.readStatus="closed",null!=e&&null==this.endErr&&(this.endErr=e),null===(t=this.onCloseRead)||void 0===t||t.call(this),null!=this.timeline.closeWrite?(this.log.trace("source and sink ended"),this.timeline.close=Date.now(),"aborted"!==this.status&&"reset"!==this.status&&(this.status="closed"),null!=this.onEnd&&this.onEnd(this.endErr)):this.log.trace("source ended, waiting for sink to end"))}onSinkEnd(e){var t;null==this.timeline.closeWrite&&(this.timeline.closeWrite=Date.now(),this.writeStatus="closed",null!=e&&null==this.endErr&&(this.endErr=e),null===(t=this.onCloseWrite)||void 0===t||t.call(this),null!=this.timeline.closeRead?(this.log.trace("sink and source ended"),this.timeline.close=Date.now(),"aborted"!==this.status&&"reset"!==this.status&&(this.status="closed"),null!=this.onEnd&&this.onEnd(this.endErr)):this.log.trace("sink ended, waiting for source to end"))}async close(e){this.log.trace("closing gracefully"),this.status="closing",await Promise.all([this.closeRead(e),this.closeWrite(e)]),this.status="closed",this.log.trace("closed gracefully")}async closeRead(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if("closing"===this.readStatus||"closed"===this.readStatus)return;this.log.trace('closing readable end of stream with starting read status "%s"',this.readStatus);const t=this.readStatus;this.readStatus="closing","reset"!==this.status&&"aborted"!==this.status&&null==this.timeline.closeRead&&(this.log.trace("send close read to remote"),await this.sendCloseRead(e)),"ready"===t&&(this.log.trace("ending internal source queue"),this.streamSource.end()),this.log.trace("closed readable end of stream")}async closeWrite(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};"closing"!==this.writeStatus&&"closed"!==this.writeStatus&&(this.log.trace('closing writable end of stream with starting write status "%s"',this.writeStatus),"ready"===this.writeStatus&&(this.log.trace("sink was never sunk, sink an empty array"),await Ys(this.sink([]),e.signal)),"writing"===this.writeStatus&&await new Promise(((t,n)=>{queueMicrotask((()=>{this.log.trace("aborting source passed to .sink"),this.sinkController.abort(),Ys(this.sinkEnd.promise,e.signal).then(t,n)}))})),this.writeStatus="closed",this.log.trace("closed writable end of stream"))}abort(e){var t;if("closed"===this.status||"aborted"===this.status||"reset"===this.status)return;this.log("abort with error",e),this.log("try to send reset to remote");const n=this.sendReset();Tre(n)&&n.catch((e=>{this.log.error("error sending reset message",e)})),this.status="aborted",this.timeline.abort=Date.now(),this._closeSinkAndSource(e),null===(t=this.onAbort)||void 0===t||t.call(this,e)}reset(){var e;if("closed"===this.status||"aborted"===this.status||"reset"===this.status)return;const t=new Pq("stream reset","ERR_STREAM_RESET");this.status="reset",this.timeline.reset=Date.now(),this._closeSinkAndSource(t),null===(e=this.onReset)||void 0===e||e.call(this)}_closeSinkAndSource(e){this._closeSink(e),this._closeSource(e)}_closeSink(e){"writing"===this.writeStatus&&(this.log.trace("end sink source"),this.sinkController.abort()),this.onSinkEnd(e)}_closeSource(e){"closing"!==this.readStatus&&"closed"!==this.readStatus&&(this.log.trace("ending source with %d bytes to be read by consumer",this.streamSource.readableLength),this.readStatus="closing",this.streamSource.end(e))}remoteCloseWrite(){"closing"!==this.readStatus&&"closed"!==this.readStatus?(this.log.trace("remote close write"),this._closeSource()):this.log("received remote close write but local source is already closed")}remoteCloseRead(){"closing"!==this.writeStatus&&"closed"!==this.writeStatus?(this.log.trace("remote close read"),this._closeSink()):this.log("received remote close read but local sink is already closed")}destroy(){"closed"!==this.status&&"aborted"!==this.status&&"reset"!==this.status?(this.log.trace("stream destroyed"),this._closeSinkAndSource()):this.log("received destroy but we are already closed")}sourcePush(e){this.streamSource.push(e)}sourceReadableLength(){return this.streamSource.readableLength}}var Rre;!function(e){e[e.Init=0]="Init",e[e.SYNSent=1]="SYNSent",e[e.SYNReceived=2]="SYNReceived",e[e.Established=3]="Established",e[e.Finished=4]="Finished"}(Rre||(Rre={}));class xre extends kre{constructor(e){super({...e,onEnd:t=>{var n;this.state=Rre.Finished,null===(n=e.onEnd)||void 0===n||n.call(e,t)}}),(0,Yo.Z)(this,"name",void 0),(0,Yo.Z)(this,"state",void 0),(0,Yo.Z)(this,"config",void 0),(0,Yo.Z)(this,"_id",void 0),(0,Yo.Z)(this,"sendWindowCapacity",void 0),(0,Yo.Z)(this,"sendWindowCapacityUpdate",void 0),(0,Yo.Z)(this,"recvWindow",void 0),(0,Yo.Z)(this,"recvWindowCapacity",void 0),(0,Yo.Z)(this,"epochStart",void 0),(0,Yo.Z)(this,"getRTT",void 0),(0,Yo.Z)(this,"sendFrame",void 0),this.config=e.config,this._id=parseInt(e.id,10),this.name=e.name,this.state=e.state,this.sendWindowCapacity=bre,this.recvWindow=this.config.initialStreamWindowSize,this.recvWindowCapacity=this.recvWindow,this.epochStart=Date.now(),this.getRTT=e.getRTT,this.sendFrame=e.sendFrame,this.source=zd(this.source,(()=>{this.sendWindowUpdate()}))}async sendNewStream(){}async sendData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(e=e.sublist();0!==e.byteLength;){if(0===this.sendWindowCapacity&&await this.waitForSendWindowCapacity(t),"open"!==this.status)return;const n=Math.min(this.sendWindowCapacity,this.config.maxMessageSize-12,e.length),r=this.getSendFlags();this.sendFrame({type:Ere.Data,flag:r,streamID:this._id,length:n},e.subarray(0,n)),this.sendWindowCapacity-=n,e.consume(n)}}async sendReset(){this.sendFrame({type:Ere.WindowUpdate,flag:Are.RST,streamID:this._id,length:0})}async sendCloseWrite(){const e=this.getSendFlags()|Are.FIN;this.sendFrame({type:Ere.WindowUpdate,flag:e,streamID:this._id,length:0})}async sendCloseRead(){}async waitForSendWindowCapacity(){var e;let t,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.sendWindowCapacity>0)return;const i=()=>{"open"===this.status?n(new Pq("stream aborted","ERR_STREAM_ABORT")):t()};null===(e=r.signal)||void 0===e||e.addEventListener("abort",i);try{await new Promise(((e,r)=>{this.sendWindowCapacityUpdate=()=>{e()},n=r,t=e}))}finally{var o;null===(o=r.signal)||void 0===o||o.removeEventListener("abort",i)}}handleWindowUpdate(e){var t;null===(t=this.log)||void 0===t||t.trace("stream received window update id=%s",this._id),this.processFlags(e.flag);const n=this.sendWindowCapacity;var r;(this.sendWindowCapacity+=e.length,0===n&&e.length>0)&&(null===(r=this.sendWindowCapacityUpdate)||void 0===r||r.call(this))}async handleData(e,t){var n;if(null===(n=this.log)||void 0===n||n.trace("stream received data id=%s",this._id),this.processFlags(e.flag),this.recvWindowCapacity<e.length)throw new Pq("receive window exceeded",pre,{available:this.recvWindowCapacity,recv:e.length});const r=await t();this.recvWindowCapacity-=e.length,this.sourcePush(r)}processFlags(e){(e&Are.ACK)===Are.ACK&&this.state===Rre.SYNSent&&(this.state=Rre.Established),(e&Are.FIN)===Are.FIN&&this.remoteCloseWrite(),(e&Are.RST)===Are.RST&&this.reset()}getSendFlags(){switch(this.state){case Rre.Init:return this.state=Rre.SYNSent,Are.SYN;case Rre.SYNReceived:return this.state=Rre.Established,Are.ACK;default:return 0}}sendWindowUpdate(){const e=this.getSendFlags(),t=Date.now(),n=this.getRTT();if(0===e&&n>-1&&t-this.epochStart<4*n&&(this.recvWindow=Math.min(2*this.recvWindow,this.config.maxStreamWindowSize)),this.recvWindowCapacity>=this.recvWindow&&0===e)return;const r=this.recvWindow-this.recvWindowCapacity;this.recvWindowCapacity=this.recvWindow,this.epochStart=t,this.sendFrame({type:Ere.WindowUpdate,flag:e,streamID:this._id,length:r})}}const Pre="/yamux/1.0.0";class Dre{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,Yo.Z)(this,"protocol",Pre),(0,Yo.Z)(this,"_init",void 0),this._init=e}createStreamMuxer(e){return new Ore({...this._init,...e})}}class Ore{constructor(e){var t;(0,Yo.Z)(this,"protocol",Pre),(0,Yo.Z)(this,"source",void 0),(0,Yo.Z)(this,"sink",void 0),(0,Yo.Z)(this,"config",void 0),(0,Yo.Z)(this,"log",void 0),(0,Yo.Z)(this,"closeController",void 0),(0,Yo.Z)(this,"nextStreamID",void 0),(0,Yo.Z)(this,"_streams",void 0),(0,Yo.Z)(this,"nextPingID",void 0),(0,Yo.Z)(this,"activePing",void 0),(0,Yo.Z)(this,"rtt",void 0),(0,Yo.Z)(this,"client",void 0),(0,Yo.Z)(this,"localGoAway",void 0),(0,Yo.Z)(this,"remoteGoAway",void 0),(0,Yo.Z)(this,"numInboundStreams",void 0),(0,Yo.Z)(this,"numOutboundStreams",void 0),(0,Yo.Z)(this,"onIncomingStream",void 0),(0,Yo.Z)(this,"onStreamEnd",void 0),this.client="outbound"===e.direction,this.config={...wre,...e},this.log=this.config.log,function(e){if(e.keepAliveInterval<=0)throw new Pq("keep-alive interval must be positive",yre);if(e.maxInboundStreams<0)throw new Pq("max inbound streams must be larger or equal 0",yre);if(e.maxOutboundStreams<0)throw new Pq("max outbound streams must be larger or equal 0",yre);if(e.initialStreamWindowSize<bre)throw new Pq("InitialStreamWindowSize must be larger or equal 256 kB",yre);if(e.maxStreamWindowSize<e.initialStreamWindowSize)throw new Pq("MaxStreamWindowSize must be larger than the InitialStreamWindowSize",yre);if(e.maxStreamWindowSize>2**32-1)throw new Pq("MaxStreamWindowSize must be less than equal MAX_UINT32",yre);if(e.maxMessageSize<1024)throw new Pq("MaxMessageSize must be greater than a kilobyte",yre)}(this.config),this.closeController=new AbortController,KJ(1/0,this.closeController.signal),this.onIncomingStream=e.onIncomingStream,this.onStreamEnd=e.onStreamEnd,this._streams=new Map,this.source=EG({onEnd:()=>{var e;null===(e=this.log)||void 0===e||e.trace("muxer source ended"),this._streams.forEach((e=>{e.destroy()}))}}),this.sink=async e=>{var t;const n=()=>{const t=ld(e);if(null!=t.return){const e=t.return();null!=(n=e)&&"function"===typeof n.then&&e.catch((e=>{var t;null===(t=this.log)||void 0===t||t.call(this,"could not cause sink source to return",e)}))}var n};let r,i;try{const t=new Ire(e);try{this.closeController.signal.addEventListener("abort",n);for await(const e of t.emitFrames())await this.handleFrame(e.header,e.readData)}finally{this.closeController.signal.removeEventListener("abort",n)}r=Sre.NormalTermination}catch(a){const e=a.code;var o,s;if(gre.has(e))null===(o=this.log)||void 0===o||o.error("protocol error in sink",a),r=Sre.ProtocolError;else null===(s=this.log)||void 0===s||s.error("internal error in sink",a),r=Sre.InternalError;i=a}null===(t=this.log)||void 0===t||t.trace("muxer sink ended"),null!=i?this.abort(i,r):await this.close({reason:r})},this.numInboundStreams=0,this.numOutboundStreams=0,this.nextStreamID=this.client?1:2,this.nextPingID=0,this.rtt=-1,null===(t=this.log)||void 0===t||t.trace("muxer created"),this.config.enableKeepAlive&&this.keepAliveLoop().catch((e=>{var t;return null===(t=this.log)||void 0===t?void 0:t.error("keepalive error: %s",e)})),this.ping().catch((e=>{var t;return null===(t=this.log)||void 0===t?void 0:t.error("ping error: %s",e)}))}get streams(){return Array.from(this._streams.values())}newStream(e){var t;if(void 0!==this.remoteGoAway)throw new Pq("muxer closed remotely",vre);if(void 0!==this.localGoAway)throw new Pq("muxer closed locally",mre);const n=this.nextStreamID;if(this.nextStreamID+=2,this.numOutboundStreams>=this.config.maxOutboundStreams)throw new Pq("max outbound streams exceeded","ERROR_MAX_OUTBOUND_STREAMS_EXCEEDED");null===(t=this.log)||void 0===t||t.trace("new outgoing stream id=%s",n);const r=this._newStream(n,e,Rre.Init,"outbound");return this._streams.set(n,r),this.numOutboundStreams++,r.sendWindowUpdate(),r}async ping(){if(void 0!==this.remoteGoAway)throw new Pq("muxer closed remotely",vre);if(void 0!==this.localGoAway)throw new Pq("muxer closed locally",mre);if(void 0===this.activePing){let e=()=>{};this.activePing={id:this.nextPingID++,promise:new Promise(((t,n)=>{const r=()=>{n(new Pq("muxer closed locally",mre))};this.closeController.signal.addEventListener("abort",r,{once:!0}),e=()=>{this.closeController.signal.removeEventListener("abort",r),t()}})),resolve:e};const t=Date.now();this.sendPing(this.activePing.id);try{await this.activePing.promise}finally{delete this.activePing}const n=Date.now();this.rtt=n-t}else await this.activePing.promise;return this.rtt}getRTT(){return this.rtt}async close(){var e,t,n;let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.closeController.signal.aborted)return;const i=null!==(e=null===(t=r)||void 0===t?void 0:t.reason)&&void 0!==e?e:Sre.NormalTermination;if(null===(n=this.log)||void 0===n||n.trace("muxer close reason=%s",i),null==r.signal){const e=AbortSignal.timeout(500);KJ(1/0,e),r={...r,signal:e}}try{await Promise.all([...this._streams.values()].map((async e=>e.close(r)))),this.sendGoAway(i),this._closeMuxer()}catch(o){this.abort(o)}}abort(e,t){var n,r;if(!this.closeController.signal.aborted){t=null!==(n=t)&&void 0!==n?n:Sre.InternalError,null===(r=this.log)||void 0===r||r.error("muxer abort reason=%s error=%s",t,e);for(const t of this._streams.values())t.abort(e);this.sendGoAway(t),this._closeMuxer()}}isClosed(){return this.closeController.signal.aborted}_closeMuxer(){this.closeController.abort(),this.source.end()}_newStream(e,t,n,r){if(null!=this._streams.get(e))throw new Pq("Stream already exists",hre,{id:e});const i=new xre({id:e.toString(),name:t,state:n,direction:r,sendFrame:this.sendFrame.bind(this),onEnd:()=>{var t;this.closeStream(e),null===(t=this.onStreamEnd)||void 0===t||t.call(this,i)},log:xH("libp2p:yamux:".concat(r,":").concat(e)),config:this.config,getRTT:this.getRTT.bind(this)});return i}closeStream(e){this.client===(e%2===0)?this.numInboundStreams--:this.numOutboundStreams--,this._streams.delete(e)}async keepAliveLoop(){var e;const t=new Promise(((e,t)=>{this.closeController.signal.addEventListener("abort",t,{once:!0})}));for(null===(e=this.log)||void 0===e||e.trace("muxer keepalive enabled interval=%s",this.config.keepAliveInterval);;){let e;try{await Promise.race([t,new Promise((t=>{e=setTimeout(t,this.config.keepAliveInterval)}))]),this.ping().catch((e=>{var t;return null===(t=this.log)||void 0===t?void 0:t.error("ping error: %s",e)}))}catch(n){return void clearInterval(e)}}}async handleFrame(e,t){var n;const{streamID:r,type:i,length:o}=e;if(null===(n=this.log)||void 0===n||n.trace("received frame %o",e),0===r)switch(i){case Ere.Ping:return void this.handlePing(e);case Ere.GoAway:return void this.handleGoAway(o);default:throw new Pq("Invalid frame type",cre,{header:e})}else switch(e.type){case Ere.Data:case Ere.WindowUpdate:return void await this.handleStreamMessage(e,t);default:throw new Pq("Invalid frame type",cre,{header:e})}}handlePing(e){if(e.flag===Are.SYN){var t;null===(t=this.log)||void 0===t||t.trace("received ping request pingId=%s",e.length),this.sendPing(e.length,Are.ACK)}else{if(e.flag!==Are.ACK)throw new Pq("Invalid frame flag",cre,{header:e});var n;null===(n=this.log)||void 0===n||n.trace("received ping response pingId=%s",e.length),this.handlePingResponse(e.length)}}handlePingResponse(e){if(void 0===this.activePing)throw new Pq("ping not requested",lre);if(this.activePing.id!==e)throw new Pq("ping doesn't match our id",ure);this.activePing.resolve()}handleGoAway(e){var t,n;null===(t=this.log)||void 0===t||t.trace("received GoAway reason=%s",null!==(n=Sre[e])&&void 0!==n?n:"unknown"),this.remoteGoAway=e;for(const r of this._streams.values())r.reset();this._closeMuxer()}async handleStreamMessage(e,t){const{streamID:n,flag:r,type:i}=e;(r&Are.SYN)===Are.SYN&&this.incomingStream(n);const o=this._streams.get(n);if(void 0!==o)switch(i){case Ere.WindowUpdate:return void o.handleWindowUpdate(e);case Ere.Data:if(void 0===t)throw new Error("unreachable");return void await o.handleData(e,t);default:throw new Error("unreachable")}else if(i===Ere.Data){var s;if(null===(s=this.log)||void 0===s||s.call(this,"discarding data for stream id=%s",n),void 0===t)throw new Error("unreachable");await t()}else{var a;null===(a=this.log)||void 0===a||a.call(this,"frame for missing stream id=%s",n)}}incomingStream(e){var t,n,r;if(this.client!==(e%2===0))throw new Pq("both endpoints are clients",fre);if(this._streams.has(e))return;if(null===(t=this.log)||void 0===t||t.trace("new incoming stream id=%s",e),void 0!==this.localGoAway)return void this.sendFrame({type:Ere.WindowUpdate,flag:Are.RST,streamID:e,length:0});if(this.numInboundStreams>=this.config.maxInboundStreams)return null===(r=this.log)||void 0===r||r.call(this,"maxIncomingStreams exceeded, forcing stream reset"),void this.sendFrame({type:Ere.WindowUpdate,flag:Are.RST,streamID:e,length:0});const i=this._newStream(e,void 0,Rre.SYNReceived,"inbound");this.numInboundStreams++,this._streams.set(e,i),null===(n=this.onIncomingStream)||void 0===n||n.call(this,i)}sendFrame(e,t){var n;if(null===(n=this.log)||void 0===n||n.trace("sending frame %o",e),e.type===Ere.Data){if(void 0===t)throw new Pq("invalid frame",cre);this.source.push(Cre(e)),this.source.push(t)}else this.source.push(Cre(e))}sendPing(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Are.SYN;var n,r;t===Are.SYN?null===(n=this.log)||void 0===n||n.trace("sending ping request pingId=%s",e):null===(r=this.log)||void 0===r||r.trace("sending ping response pingId=%s",e);this.sendFrame({type:Ere.Ping,flag:t,streamID:0,length:e})}sendGoAway(){var e;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Sre.NormalTermination;null===(e=this.log)||void 0===e||e.call(this,"sending GoAway reason=%s",Sre[t]),this.localGoAway=t,this.sendFrame({type:Ere.GoAway,flag:0,streamID:0,length:t})}}function Nre(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return()=>new Dre(e)}var Bre,Lre=new WeakMap;class Mre extends EventTarget{constructor(){super(...arguments),(0,_x.Z)(this,Lre,{writable:!0,value:new Map})}listenerCount(e){const t=(0,Ix.Z)(this,Lre).get(e);return null==t?0:t.length}addEventListener(e,t,n){var r;super.addEventListener(e,t,n);let i=(0,Ix.Z)(this,Lre).get(e);null==i&&(i=[],(0,Ix.Z)(this,Lre).set(e,i)),i.push({callback:t,once:null!==(r=!0!==n&&!1!==n&&(null===n||void 0===n?void 0:n.once))&&void 0!==r&&r})}removeEventListener(e,t,n){super.removeEventListener(e.toString(),null!==t&&void 0!==t?t:null,n);let r=(0,Ix.Z)(this,Lre).get(e);null!=r&&(r=r.filter((e=>{let{callback:n}=e;return n!==t})),(0,Ix.Z)(this,Lre).set(e,r))}dispatchEvent(e){const t=super.dispatchEvent(e);let n=(0,Ix.Z)(this,Lre).get(e.type);return null==n||(n=n.filter((e=>{let{once:t}=e;return!t})),(0,Ix.Z)(this,Lre).set(e.type,n)),t}safeDispatchEvent(e,t){return this.dispatchEvent(new Fre(e,t))}}class Ure extends Event{constructor(e,t){super(e,t),(0,Yo.Z)(this,"detail",void 0),this.detail=null===t||void 0===t?void 0:t.detail}}const Fre=null!==(Bre=globalThis.CustomEvent)&&void 0!==Bre?Bre:Ure,Kre=Symbol.for("@libp2p/peer-discovery");var jre=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var n=new Uint8Array(256),r=0;r<n.length;r++)n[r]=255;for(var i=0;i<e.length;i++){var o=e.charAt(i),s=o.charCodeAt(0);if(255!==n[s])throw new TypeError(o+" is ambiguous");n[s]=i}var a=e.length,c=e.charAt(0),l=Math.log(a)/Math.log(256),u=Math.log(256)/Math.log(a);function h(e){if("string"!==typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var r=0,i=0;e[t]===c;)r++,t++;for(var o=(e.length-t)*l+1>>>0,s=new Uint8Array(o);e[t];){var u=n[e.charCodeAt(t)];if(255===u)return;for(var h=0,d=o-1;(0!==u||h<i)&&-1!==d;d--,h++)u+=a*s[d]>>>0,s[d]=u%256>>>0,u=u/256>>>0;if(0!==u)throw new Error("Non-zero carry");i=h,t++}if(" "!==e[t]){for(var f=o-i;f!==o&&0===s[f];)f++;for(var p=new Uint8Array(r+(o-f)),g=r;f!==o;)p[g++]=s[f++];return p}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var n=0,r=0,i=0,o=t.length;i!==o&&0===t[i];)i++,n++;for(var s=(o-i)*u+1>>>0,l=new Uint8Array(s);i!==o;){for(var h=t[i],d=0,f=s-1;(0!==h||d<r)&&-1!==f;f--,d++)h+=256*l[f]>>>0,l[f]=h%a>>>0,h=h/a>>>0;if(0!==h)throw new Error("Non-zero carry");r=d,i++}for(var p=s-r;p!==s&&0===l[p];)p++;for(var g=c.repeat(n);p<s;++p)g+=e.charAt(l[p]);return g},decodeUnsafe:h,decode:function(e){var n=h(e);if(n)return n;throw new Error("Non-".concat(t," character"))}}};const Zre=jre,zre=(new Uint8Array(0),e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")});class Vre{constructor(e,t,n){this.name=e,this.prefix=t,this.baseEncode=n}encode(e){if(e instanceof Uint8Array)return"".concat(this.prefix).concat(this.baseEncode(e));throw Error("Unknown type, must be binary type")}}class Hre{constructor(e,t,n){if(this.name=e,this.prefix=t,void 0===t.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=n}decode(e){if("string"===typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error("Unable to decode multibase string ".concat(JSON.stringify(e),", ").concat(this.name," decoder only supports inputs prefixed with ").concat(this.prefix));return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return Gre(this,e)}}class qre{constructor(e){this.decoders=e}or(e){return Gre(this,e)}decode(e){const t=e[0],n=this.decoders[t];if(n)return n.decode(e);throw RangeError("Unable to decode multibase string ".concat(JSON.stringify(e),", only inputs prefixed with ").concat(Object.keys(this.decoders)," are supported"))}}const Gre=(e,t)=>new qre({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class Wre{constructor(e,t,n,r){this.name=e,this.prefix=t,this.baseEncode=n,this.baseDecode=r,this.encoder=new Vre(e,t,n),this.decoder=new Hre(e,t,r)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const Qre=e=>{let{name:t,prefix:n,encode:r,decode:i}=e;return new Wre(t,n,r,i)},Yre=e=>{let{prefix:t,name:n,alphabet:r}=e;const{encode:i,decode:o}=Zre(r,n);return Qre({prefix:t,name:n,encode:i,decode:e=>zre(o(e))})},Jre=e=>{let{name:t,prefix:n,bitsPerChar:r,alphabet:i}=e;return Qre({prefix:n,name:t,encode:e=>((e,t,n)=>{const r="="===t[t.length-1],i=(1<<n)-1;let o="",s=0,a=0;for(let c=0;c<e.length;++c)for(a=a<<8|e[c],s+=8;s>n;)s-=n,o+=t[i&a>>s];if(s&&(o+=t[i&a<<n-s]),r)for(;o.length*n&7;)o+="=";return o})(e,i,r),decode:e=>((e,t,n,r)=>{const i={};for(let u=0;u<t.length;++u)i[t[u]]=u;let o=e.length;for(;"="===e[o-1];)--o;const s=new Uint8Array(o*n/8|0);let a=0,c=0,l=0;for(let u=0;u<o;++u){const t=i[e[u]];if(void 0===t)throw new SyntaxError("Non-".concat(r," character"));c=c<<n|t,a+=n,a>=8&&(a-=8,s[l++]=255&c>>a)}if(a>=n||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return s})(e,i,r,t)})},Xre=Jre({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),$re=Jre({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),eie=Jre({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),tie=Jre({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),nie=Jre({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),rie=Jre({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),iie=Jre({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),oie=Jre({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),sie=Jre({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5}),aie=Yre({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),cie=Yre({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"}),lie=Jre({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),uie=Jre({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),hie=Jre({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),die=Jre({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});function fie(e){let t=function(e){const t=()=>{};return t.enabled=!1,t.color="",t.diff=0,t.log=()=>{},t.namespace=e,t.destroy=()=>!0,t.extend=()=>t,t}("".concat(e,":trace"));return cf().enabled("".concat(e,":trace"))&&null!=cf().names.map((e=>e.toString())).find((e=>e.includes(":trace")))&&(t=cf()("".concat(e,":trace"))),Object.assign(cf()(e),{error:cf()("".concat(e,":error")),trace:t})}cf().formatters.b=e=>null==e?"undefined":aie.baseEncode(e),cf().formatters.t=e=>null==e?"undefined":Xre.baseEncode(e),cf().formatters.m=e=>null==e?"undefined":lie.baseEncode(e),cf().formatters.p=e=>null==e?"undefined":e.toString(),cf().formatters.c=e=>null==e?"undefined":e.toString(),cf().formatters.k=e=>null==e?"undefined":e.toString(),cf().formatters.a=e=>null==e?"undefined":e.toString();class pie extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"The operation was aborted"),(0,Yo.Z)(this,"code",void 0),(0,Yo.Z)(this,"type",void 0),this.code=pie.code,this.type=pie.type}}(0,Yo.Z)(pie,"code","ABORT_ERR"),(0,Yo.Z)(pie,"type","aborted");class gie extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Unexpected Peer"),(0,Yo.Z)(this,"code",void 0),this.code=gie.code}}(0,Yo.Z)(gie,"code","ERR_UNEXPECTED_PEER");class yie extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Invalid crypto exchange"),(0,Yo.Z)(this,"code",void 0),this.code=yie.code}}(0,Yo.Z)(yie,"code","ERR_INVALID_CRYPTO_EXCHANGE");class mie extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Invalid crypto transmission"),(0,Yo.Z)(this,"code",void 0),this.code=mie.code}}(0,Yo.Z)(mie,"code","ERR_INVALID_CRYPTO_TRANSMISSION");const vie=Symbol.for("@libp2p/peer-id");const bie=Yre({prefix:"9",name:"base10",alphabet:"0123456789"}),wie=Jre({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),Eie=Jre({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4}),Aie=Jre({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1}),Sie=Array.from("\ud83d\ude80\ud83e\ude90\u2604\ud83d\udef0\ud83c\udf0c\ud83c\udf11\ud83c\udf12\ud83c\udf13\ud83c\udf14\ud83c\udf15\ud83c\udf16\ud83c\udf17\ud83c\udf18\ud83c\udf0d\ud83c\udf0f\ud83c\udf0e\ud83d\udc09\u2600\ud83d\udcbb\ud83d\udda5\ud83d\udcbe\ud83d\udcbf\ud83d\ude02\u2764\ud83d\ude0d\ud83e\udd23\ud83d\ude0a\ud83d\ude4f\ud83d\udc95\ud83d\ude2d\ud83d\ude18\ud83d\udc4d\ud83d\ude05\ud83d\udc4f\ud83d\ude01\ud83d\udd25\ud83e\udd70\ud83d\udc94\ud83d\udc96\ud83d\udc99\ud83d\ude22\ud83e\udd14\ud83d\ude06\ud83d\ude44\ud83d\udcaa\ud83d\ude09\u263a\ud83d\udc4c\ud83e\udd17\ud83d\udc9c\ud83d\ude14\ud83d\ude0e\ud83d\ude07\ud83c\udf39\ud83e\udd26\ud83c\udf89\ud83d\udc9e\u270c\u2728\ud83e\udd37\ud83d\ude31\ud83d\ude0c\ud83c\udf38\ud83d\ude4c\ud83d\ude0b\ud83d\udc97\ud83d\udc9a\ud83d\ude0f\ud83d\udc9b\ud83d\ude42\ud83d\udc93\ud83e\udd29\ud83d\ude04\ud83d\ude00\ud83d\udda4\ud83d\ude03\ud83d\udcaf\ud83d\ude48\ud83d\udc47\ud83c\udfb6\ud83d\ude12\ud83e\udd2d\u2763\ud83d\ude1c\ud83d\udc8b\ud83d\udc40\ud83d\ude2a\ud83d\ude11\ud83d\udca5\ud83d\ude4b\ud83d\ude1e\ud83d\ude29\ud83d\ude21\ud83e\udd2a\ud83d\udc4a\ud83e\udd73\ud83d\ude25\ud83e\udd24\ud83d\udc49\ud83d\udc83\ud83d\ude33\u270b\ud83d\ude1a\ud83d\ude1d\ud83d\ude34\ud83c\udf1f\ud83d\ude2c\ud83d\ude43\ud83c\udf40\ud83c\udf37\ud83d\ude3b\ud83d\ude13\u2b50\u2705\ud83e\udd7a\ud83c\udf08\ud83d\ude08\ud83e\udd18\ud83d\udca6\u2714\ud83d\ude23\ud83c\udfc3\ud83d\udc90\u2639\ud83c\udf8a\ud83d\udc98\ud83d\ude20\u261d\ud83d\ude15\ud83c\udf3a\ud83c\udf82\ud83c\udf3b\ud83d\ude10\ud83d\udd95\ud83d\udc9d\ud83d\ude4a\ud83d\ude39\ud83d\udde3\ud83d\udcab\ud83d\udc80\ud83d\udc51\ud83c\udfb5\ud83e\udd1e\ud83d\ude1b\ud83d\udd34\ud83d\ude24\ud83c\udf3c\ud83d\ude2b\u26bd\ud83e\udd19\u2615\ud83c\udfc6\ud83e\udd2b\ud83d\udc48\ud83d\ude2e\ud83d\ude46\ud83c\udf7b\ud83c\udf43\ud83d\udc36\ud83d\udc81\ud83d\ude32\ud83c\udf3f\ud83e\udde1\ud83c\udf81\u26a1\ud83c\udf1e\ud83c\udf88\u274c\u270a\ud83d\udc4b\ud83d\ude30\ud83e\udd28\ud83d\ude36\ud83e\udd1d\ud83d\udeb6\ud83d\udcb0\ud83c\udf53\ud83d\udca2\ud83e\udd1f\ud83d\ude41\ud83d\udea8\ud83d\udca8\ud83e\udd2c\u2708\ud83c\udf80\ud83c\udf7a\ud83e\udd13\ud83d\ude19\ud83d\udc9f\ud83c\udf31\ud83d\ude16\ud83d\udc76\ud83e\udd74\u25b6\u27a1\u2753\ud83d\udc8e\ud83d\udcb8\u2b07\ud83d\ude28\ud83c\udf1a\ud83e\udd8b\ud83d\ude37\ud83d\udd7a\u26a0\ud83d\ude45\ud83d\ude1f\ud83d\ude35\ud83d\udc4e\ud83e\udd32\ud83e\udd20\ud83e\udd27\ud83d\udccc\ud83d\udd35\ud83d\udc85\ud83e\uddd0\ud83d\udc3e\ud83c\udf52\ud83d\ude17\ud83e\udd11\ud83c\udf0a\ud83e\udd2f\ud83d\udc37\u260e\ud83d\udca7\ud83d\ude2f\ud83d\udc86\ud83d\udc46\ud83c\udfa4\ud83d\ude47\ud83c\udf51\u2744\ud83c\udf34\ud83d\udca3\ud83d\udc38\ud83d\udc8c\ud83d\udccd\ud83e\udd40\ud83e\udd22\ud83d\udc45\ud83d\udca1\ud83d\udca9\ud83d\udc50\ud83d\udcf8\ud83d\udc7b\ud83e\udd10\ud83e\udd2e\ud83c\udfbc\ud83e\udd75\ud83d\udea9\ud83c\udf4e\ud83c\udf4a\ud83d\udc7c\ud83d\udc8d\ud83d\udce3\ud83e\udd42"),_ie=Sie.reduce(((e,t,n)=>(e[n]=t,e)),[]),Iie=Sie.reduce(((e,t,n)=>(e[t.codePointAt(0)]=n,e)),[]);const Cie=Qre({prefix:"\ud83d\ude80",name:"base256emoji",encode:function(e){return e.reduce(((e,t)=>e+=_ie[t]),"")},decode:function(e){const t=[];for(const n of e){const e=Iie[n.codePointAt(0)];if(void 0===e)throw new Error("Non-base256emoji character: ".concat(n));t.push(e)}return new Uint8Array(t)}}),Tie=Yre({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),kie=Yre({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"}),Rie=Jre({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3}),xie=Qre({prefix:"\0",name:"identity",encode:e=>{return t=e,(new TextDecoder).decode(t);var t},decode:e=>(e=>(new TextEncoder).encode(e))(e)}),Pie=new TextEncoder,Die=new TextDecoder,Oie="json",Nie=512,Bie=e=>Pie.encode(JSON.stringify(e)),Lie=e=>JSON.parse(Die.decode(e)),Mie="raw",Uie=85,Fie=e=>zre(e),Kie=e=>zre(e);var jie=function e(t,n,r){n=n||[];var i=r=r||0;for(;t>=Vie;)n[r++]=255&t|Zie,t/=128;for(;t&zie;)n[r++]=255&t|Zie,t>>>=7;return n[r]=0|t,e.bytes=r-i+1,n},Zie=128,zie=-128,Vie=Math.pow(2,31);var Hie=function e(t,n){var r,i=0,o=0,s=n=n||0,a=t.length;do{if(s>=a)throw e.bytes=0,new RangeError("Could not decode varint");r=t[s++],i+=o<28?(r&Gie)<<o:(r&Gie)*Math.pow(2,o),o+=7}while(r>=qie);return e.bytes=s-n,i},qie=128,Gie=127;var Wie=Math.pow(2,7),Qie=Math.pow(2,14),Yie=Math.pow(2,21),Jie=Math.pow(2,28),Xie=Math.pow(2,35),$ie=Math.pow(2,42),eoe=Math.pow(2,49),toe=Math.pow(2,56),noe=Math.pow(2,63);const roe={encode:jie,decode:Hie,encodingLength:function(e){return e<Wie?1:e<Qie?2:e<Yie?3:e<Jie?4:e<Xie?5:e<$ie?6:e<eoe?7:e<toe?8:e<noe?9:10}},ioe=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return[roe.decode(e,t),roe.decode.bytes]},ooe=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return roe.encode(e,t,n),t},soe=e=>roe.encodingLength(e),aoe=(e,t)=>{const n=t.byteLength,r=soe(e),i=r+soe(n),o=new Uint8Array(i+n);return ooe(e,o,0),ooe(n,o,r),o.set(t,i),new loe(e,n,t,o)},coe=e=>{const t=zre(e),[n,r]=ioe(t),[i,o]=ioe(t.subarray(r)),s=t.subarray(r+o);if(s.byteLength!==i)throw new Error("Incorrect length");return new loe(n,i,s,t)};class loe{constructor(e,t,n,r){this.code=e,this.size=t,this.digest=n,this.bytes=r}}const uoe=zre,hoe={code:0,name:"identity",encode:uoe,digest:e=>aoe(0,uoe(e))},doe=e=>{let{name:t,code:n,encode:r}=e;return new foe(t,n,r)};class foe{constructor(e,t,n){this.name=e,this.code=t,this.encode=n}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?aoe(this.code,t):t.then((e=>aoe(this.code,e)))}throw Error("Unknown type, must be binary type")}}const poe=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),goe=doe({name:"sha2-256",code:18,encode:poe("SHA-256")}),yoe=doe({name:"sha2-512",code:19,encode:poe("SHA-512")}),moe=(e,t)=>{const{bytes:n,version:r}=e;return 0===r?Aoe(n,boe(e),t||aie.encoder):Soe(n,boe(e),t||Xre.encoder)},voe=new WeakMap,boe=e=>{const t=voe.get(e);if(null==t){const t=new Map;return voe.set(e,t),t}return t};class woe{constructor(e,t,n,r){this.code=t,this.version=e,this.multihash=n,this.bytes=r,this["/"]=r}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{const{code:e,multihash:t}=this;if(e!==_oe)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==Ioe)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return woe.createV0(t)}default:throw Error("Can not convert CID version ".concat(this.version," to version 0. This is a bug please report"))}}toV1(){switch(this.version){case 0:{const{code:e,digest:t}=this.multihash,n=aoe(e,t);return woe.createV1(this.code,n)}case 1:return this;default:throw Error("Can not convert CID version ".concat(this.version," to version 1. This is a bug please report"))}}equals(e){return woe.equals(this,e)}static equals(e,t){const n=t;return n&&e.code===n.code&&e.version===n.version&&((e,t)=>{if(e===t)return!0;{const n=t;return e.code===n.code&&e.size===n.size&&n.bytes instanceof Uint8Array&&((e,t)=>{if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;for(let n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0})(e.bytes,n.bytes)}})(e.multihash,n.multihash)}toString(e){return moe(this,e)}toJSON(){return{"/":moe(this)}}link(){return this}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID(".concat(this.toString(),")")}static asCID(e){if(null==e)return null;const t=e;if(t instanceof woe)return t;if(null!=t["/"]&&t["/"]===t.bytes||t.asCID===t){const{version:e,code:n,multihash:r,bytes:i}=t;return new woe(e,n,r,i||Coe(e,n,r.bytes))}if(!0===t[Toe]){const{version:e,multihash:n,code:r}=t,i=coe(n);return woe.create(e,r,i)}return null}static create(e,t,n){if("number"!==typeof t)throw new Error("String codecs are no longer supported");if(!(n.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(e){case 0:if(t!==_oe)throw new Error("Version 0 CID must use dag-pb (code: ".concat(_oe,") block encoding"));return new woe(e,t,n,n.bytes);case 1:{const r=Coe(e,t,n.bytes);return new woe(e,t,n,r)}default:throw new Error("Invalid version")}}static createV0(e){return woe.create(0,_oe,e)}static createV1(e,t){return woe.create(1,e,t)}static decode(e){const[t,n]=woe.decodeFirst(e);if(n.length)throw new Error("Incorrect length");return t}static decodeFirst(e){const t=woe.inspectBytes(e),n=t.size-t.multihashSize,r=zre(e.subarray(n,n+t.multihashSize));if(r.byteLength!==t.multihashSize)throw new Error("Incorrect length");const i=r.subarray(t.multihashSize-t.digestSize),o=new loe(t.multihashCode,t.digestSize,i,r);return[0===t.version?woe.createV0(o):woe.createV1(t.codec,o),e.subarray(t.size)]}static inspectBytes(e){let t=0;const n=()=>{const[n,r]=ioe(e.subarray(t));return t+=r,n};let r=n(),i=_oe;if(18===r?(r=0,t=0):i=n(),0!==r&&1!==r)throw new RangeError("Invalid CID version ".concat(r));const o=t,s=n(),a=n(),c=t+a;return{version:r,codec:i,multihashCode:s,digestSize:a,multihashSize:c-o,size:c}}static parse(e,t){const[n,r]=Eoe(e,t),i=woe.decode(r);if(0===i.version&&"Q"!==e[0])throw Error("Version 0 CID string must not include multibase prefix");return boe(i).set(n,e),i}}const Eoe=(e,t)=>{switch(e[0]){case"Q":{const n=t||aie;return[aie.prefix,n.decode("".concat(aie.prefix).concat(e))]}case aie.prefix:{const n=t||aie;return[aie.prefix,n.decode(e)]}case Xre.prefix:{const n=t||Xre;return[Xre.prefix,n.decode(e)]}default:if(null==t)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[e[0],t.decode(e)]}},Aoe=(e,t,n)=>{const{prefix:r}=n;if(r!==aie.prefix)throw Error("Cannot string encode V0 in ".concat(n.name," encoding"));const i=t.get(r);if(null==i){const i=n.encode(e).slice(1);return t.set(r,i),i}return i},Soe=(e,t,n)=>{const{prefix:r}=n,i=t.get(r);if(null==i){const i=n.encode(e);return t.set(r,i),i}return i},_oe=112,Ioe=18,Coe=(e,t,n)=>{const r=soe(e),i=r+soe(t),o=new Uint8Array(i+n.byteLength);return ooe(e,o,0),ooe(t,o,r),o.set(n,i),o},Toe=Symbol.for("@ipld/js-cid/CID"),koe={...Ir,...Er,..._r,...br,...wr,...yr,...Sr,...mr,...vr,...Ar};let Roe;const xoe=Symbol.for("nodejs.util.inspect.custom"),Poe=Object.values(koe).map((e=>e.decoder)).reduce(((e,t)=>e.or(t)),koe.identity.decoder),Doe=114,Ooe=36,Noe=37;Roe=Symbol.toStringTag;class Boe{constructor(e){(0,Yo.Z)(this,"type",void 0),(0,Yo.Z)(this,"multihash",void 0),(0,Yo.Z)(this,"privateKey",void 0),(0,Yo.Z)(this,"publicKey",void 0),(0,Yo.Z)(this,"string",void 0),(0,Yo.Z)(this,vie,!0),this.type=e.type,this.multihash=e.multihash,this.privateKey=e.privateKey,Object.defineProperty(this,"string",{enumerable:!1,writable:!0})}get[Roe](){return"PeerId(".concat(this.toString(),")")}toString(){return null==this.string&&(this.string=aie.encode(this.multihash.bytes).slice(1)),this.string}toCID(){return woe.createV1(Doe,this.multihash)}toBytes(){return this.multihash.bytes}toJSON(){return this.toString()}equals(e){var t;if(e instanceof Uint8Array)return(0,Ms.f)(this.multihash.bytes,e);if("string"===typeof e)return Foe(e).equals(this);if(null!=(null===e||void 0===e||null===(t=e.multihash)||void 0===t?void 0:t.bytes))return(0,Ms.f)(this.multihash.bytes,e.multihash.bytes);throw new Error("not valid Id")}[xoe](){return"PeerId(".concat(this.toString(),")")}}class Loe extends Boe{constructor(e){super({...e,type:"RSA"}),(0,Yo.Z)(this,"type","RSA"),(0,Yo.Z)(this,"publicKey",void 0),this.publicKey=e.publicKey}}class Moe extends Boe{constructor(e){super({...e,type:"Ed25519"}),(0,Yo.Z)(this,"type","Ed25519"),(0,Yo.Z)(this,"publicKey",void 0),this.publicKey=e.multihash.digest}}class Uoe extends Boe{constructor(e){super({...e,type:"secp256k1"}),(0,Yo.Z)(this,"type","secp256k1"),(0,Yo.Z)(this,"publicKey",void 0),this.publicKey=e.multihash.digest}}function Foe(e,t){var n;if(t=null!==(n=t)&&void 0!==n?n:Poe,"1"===e.charAt(0)||"Q"===e.charAt(0)){const t=coe(aie.decode("z".concat(e)));return e.startsWith("12D")?new Moe({multihash:t}):e.startsWith("16U")?new Uoe({multihash:t}):new Loe({multihash:t})}return function(e){try{const t=coe(e);if(t.code===hoe.code){if(t.digest.length===Ooe)return new Moe({multihash:t});if(t.digest.length===Noe)return new Uoe({multihash:t})}if(t.code===goe.code)return new Loe({multihash:t})}catch{return function(e){if(null==e||null==e.multihash||null==e.version||1===e.version&&e.code!==Doe)throw new Error("Supplied PeerID CID is invalid");const t=e.multihash;if(t.code===goe.code)return new Loe({multihash:e.multihash});if(t.code===hoe.code){if(t.digest.length===Ooe)return new Moe({multihash:e.multihash});if(t.digest.length===Noe)return new Uoe({multihash:e.multihash})}throw new Error("Supplied PeerID CID is invalid")}(woe.decode(e))}throw new Error("Supplied PeerID CID is invalid")}(Poe.decode(e))}let Koe;const joe=fie("libp2p:bootstrap");Koe=Symbol.toStringTag;class Zoe extends Mre{constructor(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{list:[]};if(null==n.list||0===n.list.length)throw new Error("Bootstrap requires a list of peer addresses");super(),(0,Yo.Z)(this,"timer",void 0),(0,Yo.Z)(this,"list",void 0),(0,Yo.Z)(this,"timeout",void 0),(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"_init",void 0),(0,Yo.Z)(this,Kre,this),(0,Yo.Z)(this,Koe,"@libp2p/bootstrap"),this.components=e,this.timeout=null!==(t=n.timeout)&&void 0!==t?t:1e3,this.list=[];for(const r of n.list){if(!cP.matches(r)){joe.error("Invalid multiaddr");continue}const e=(0,og.HM)(r),t=e.getPeerId();if(null==t){joe.error("Invalid bootstrap multiaddr without peer id");continue}const n={id:Foe(t),multiaddrs:[e],protocols:[]};this.list.push(n)}this._init=n}isStarted(){return Boolean(this.timer)}start(){this.isStarted()||(joe("Starting bootstrap node discovery, discovering peers after %s ms",this.timeout),this.timer=setTimeout((()=>{this._discoverBootstrapPeers().catch((e=>{joe.error(e)}))}),this.timeout))}async _discoverBootstrapPeers(){if(null!=this.timer)for(const r of this.list){var e,t,n;if(await this.components.peerStore.merge(r.id,{tags:{[null!==(e=this._init.tagName)&&void 0!==e?e:"bootstrap"]:{value:null!==(t=this._init.tagValue)&&void 0!==t?t:50,ttl:null!==(n=this._init.tagTTL)&&void 0!==n?n:12e4}}}),null==this.timer)return;this.safeDispatchEvent("peer",{detail:r})}}stop(){null!=this.timer&&clearTimeout(this.timer),this.timer=void 0}}function zoe(e){return t=>new Zoe(t,e)}(0,Yo.Z)(Zoe,"tag","bootstrap");const Voe=Symbol.for("@libp2p/content-routing");class Hoe extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"The operation was aborted"),(0,Yo.Z)(this,"code",void 0),(0,Yo.Z)(this,"type",void 0),this.code=Hoe.code,this.type=Hoe.type}}(0,Yo.Z)(Hoe,"code","ABORT_ERR"),(0,Yo.Z)(Hoe,"type","aborted");class qoe extends Error{constructor(e,t,n){var r;super(e),(0,Yo.Z)(this,"code",void 0),(0,Yo.Z)(this,"props",void 0),this.code=t,this.name=null!==(r=null===n||void 0===n?void 0:n.name)&&void 0!==r?r:"CodeError",this.props=null!==n&&void 0!==n?n:{}}}class Goe extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Unexpected Peer"),(0,Yo.Z)(this,"code",void 0),this.code=Goe.code}}(0,Yo.Z)(Goe,"code","ERR_UNEXPECTED_PEER");class Woe extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Invalid crypto exchange"),(0,Yo.Z)(this,"code",void 0),this.code=Woe.code}}(0,Yo.Z)(Woe,"code","ERR_INVALID_CRYPTO_EXCHANGE");class Qoe extends Error{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Invalid crypto transmission"),(0,Yo.Z)(this,"code",void 0),this.code=Qoe.code}}var Yoe;(0,Yo.Z)(Qoe,"code","ERR_INVALID_CRYPTO_TRANSMISSION");var Joe=new WeakMap;class Xoe extends EventTarget{constructor(){super(...arguments),(0,_x.Z)(this,Joe,{writable:!0,value:new Map})}listenerCount(e){const t=(0,Ix.Z)(this,Joe).get(e);return null==t?0:t.length}addEventListener(e,t,n){var r;super.addEventListener(e,t,n);let i=(0,Ix.Z)(this,Joe).get(e);null==i&&(i=[],(0,Ix.Z)(this,Joe).set(e,i)),i.push({callback:t,once:null!==(r=!0!==n&&!1!==n&&(null===n||void 0===n?void 0:n.once))&&void 0!==r&&r})}removeEventListener(e,t,n){super.removeEventListener(e.toString(),null!==t&&void 0!==t?t:null,n);let r=(0,Ix.Z)(this,Joe).get(e);null!=r&&(r=r.filter((e=>{let{callback:n}=e;return n!==t})),(0,Ix.Z)(this,Joe).set(e,r))}dispatchEvent(e){const t=super.dispatchEvent(e);let n=(0,Ix.Z)(this,Joe).get(e.type);return null==n||(n=n.filter((e=>{let{once:t}=e;return!t})),(0,Ix.Z)(this,Joe).set(e.type,n)),t}safeDispatchEvent(e,t){return this.dispatchEvent(new ese(e,t))}}class $oe extends Event{constructor(e,t){super(e,t),(0,Yo.Z)(this,"detail",void 0),this.detail=null===t||void 0===t?void 0:t.detail}}const ese=null!==(Yoe=globalThis.CustomEvent)&&void 0!==Yoe?Yoe:$oe,tse=function(e){try{for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r]}catch{}},nse=Symbol.for("@libp2p/peer-discovery"),rse=Symbol.for("@libp2p/peer-routing");var ise=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var n=new Uint8Array(256),r=0;r<n.length;r++)n[r]=255;for(var i=0;i<e.length;i++){var o=e.charAt(i),s=o.charCodeAt(0);if(255!==n[s])throw new TypeError(o+" is ambiguous");n[s]=i}var a=e.length,c=e.charAt(0),l=Math.log(a)/Math.log(256),u=Math.log(256)/Math.log(a);function h(e){if("string"!==typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var r=0,i=0;e[t]===c;)r++,t++;for(var o=(e.length-t)*l+1>>>0,s=new Uint8Array(o);e[t];){var u=n[e.charCodeAt(t)];if(255===u)return;for(var h=0,d=o-1;(0!==u||h<i)&&-1!==d;d--,h++)u+=a*s[d]>>>0,s[d]=u%256>>>0,u=u/256>>>0;if(0!==u)throw new Error("Non-zero carry");i=h,t++}if(" "!==e[t]){for(var f=o-i;f!==o&&0===s[f];)f++;for(var p=new Uint8Array(r+(o-f)),g=r;f!==o;)p[g++]=s[f++];return p}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var n=0,r=0,i=0,o=t.length;i!==o&&0===t[i];)i++,n++;for(var s=(o-i)*u+1>>>0,l=new Uint8Array(s);i!==o;){for(var h=t[i],d=0,f=s-1;(0!==h||d<r)&&-1!==f;f--,d++)h+=256*l[f]>>>0,l[f]=h%a>>>0,h=h/a>>>0;if(0!==h)throw new Error("Non-zero carry");r=d,i++}for(var p=s-r;p!==s&&0===l[p];)p++;for(var g=c.repeat(n);p<s;++p)g+=e.charAt(l[p]);return g},decodeUnsafe:h,decode:function(e){var n=h(e);if(n)return n;throw new Error("Non-".concat(t," character"))}}};const ose=ise,sse=(new Uint8Array(0),e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")});class ase{constructor(e,t,n){this.name=e,this.prefix=t,this.baseEncode=n}encode(e){if(e instanceof Uint8Array)return"".concat(this.prefix).concat(this.baseEncode(e));throw Error("Unknown type, must be binary type")}}class cse{constructor(e,t,n){if(this.name=e,this.prefix=t,void 0===t.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=n}decode(e){if("string"===typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error("Unable to decode multibase string ".concat(JSON.stringify(e),", ").concat(this.name," decoder only supports inputs prefixed with ").concat(this.prefix));return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return use(this,e)}}class lse{constructor(e){this.decoders=e}or(e){return use(this,e)}decode(e){const t=e[0],n=this.decoders[t];if(n)return n.decode(e);throw RangeError("Unable to decode multibase string ".concat(JSON.stringify(e),", only inputs prefixed with ").concat(Object.keys(this.decoders)," are supported"))}}const use=(e,t)=>new lse({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class hse{constructor(e,t,n,r){this.name=e,this.prefix=t,this.baseEncode=n,this.baseDecode=r,this.encoder=new ase(e,t,n),this.decoder=new cse(e,t,r)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const dse=e=>{let{name:t,prefix:n,encode:r,decode:i}=e;return new hse(t,n,r,i)},fse=e=>{let{prefix:t,name:n,alphabet:r}=e;const{encode:i,decode:o}=ose(r,n);return dse({prefix:t,name:n,encode:i,decode:e=>sse(o(e))})},pse=e=>{let{name:t,prefix:n,bitsPerChar:r,alphabet:i}=e;return dse({prefix:n,name:t,encode:e=>((e,t,n)=>{const r="="===t[t.length-1],i=(1<<n)-1;let o="",s=0,a=0;for(let c=0;c<e.length;++c)for(a=a<<8|e[c],s+=8;s>n;)s-=n,o+=t[i&a>>s];if(s&&(o+=t[i&a<<n-s]),r)for(;o.length*n&7;)o+="=";return o})(e,i,r),decode:e=>((e,t,n,r)=>{const i={};for(let u=0;u<t.length;++u)i[t[u]]=u;let o=e.length;for(;"="===e[o-1];)--o;const s=new Uint8Array(o*n/8|0);let a=0,c=0,l=0;for(let u=0;u<o;++u){const t=i[e[u]];if(void 0===t)throw new SyntaxError("Non-".concat(r," character"));c=c<<n|t,a+=n,a>=8&&(a-=8,s[l++]=255&c>>a)}if(a>=n||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return s})(e,i,r,t)})},gse=pse({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),yse=pse({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),mse=pse({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),vse=pse({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),bse=pse({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),wse=pse({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),Ese=pse({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),Ase=pse({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),Sse=pse({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5}),_se=fse({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),Ise=fse({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"}),Cse=pse({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),Tse=pse({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),kse=pse({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),Rse=pse({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});function xse(e){let t=function(e){const t=()=>{};return t.enabled=!1,t.color="",t.diff=0,t.log=()=>{},t.namespace=e,t.destroy=()=>!0,t.extend=()=>t,t}("".concat(e,":trace"));return cf().enabled("".concat(e,":trace"))&&null!=cf().names.map((e=>e.toString())).find((e=>e.includes(":trace")))&&(t=cf()("".concat(e,":trace"))),Object.assign(cf()(e),{error:cf()("".concat(e,":error")),trace:t})}cf().formatters.b=e=>null==e?"undefined":_se.baseEncode(e),cf().formatters.t=e=>null==e?"undefined":gse.baseEncode(e),cf().formatters.m=e=>null==e?"undefined":Cse.baseEncode(e),cf().formatters.p=e=>null==e?"undefined":e.toString(),cf().formatters.c=e=>null==e?"undefined":e.toString(),cf().formatters.k=e=>null==e?"undefined":e.toString(),cf().formatters.a=e=>null==e?"undefined":e.toString();const Pse=function(e){if(null!=e[Symbol.asyncIterator])return(async()=>{for await(const t of e);})();for(const t of e);};class Dse{constructor(e){if((0,Yo.Z)(this,"buffer",void 0),(0,Yo.Z)(this,"mask",void 0),(0,Yo.Z)(this,"top",void 0),(0,Yo.Z)(this,"btm",void 0),(0,Yo.Z)(this,"next",void 0),!(e>0)||0!==(e-1&e))throw new Error("Max size for a FixedFIFO should be a power of two");this.buffer=new Array(e),this.mask=e-1,this.top=0,this.btm=0,this.next=null}push(e){return void 0===this.buffer[this.top]&&(this.buffer[this.top]=e,this.top=this.top+1&this.mask,!0)}shift(){const e=this.buffer[this.btm];if(void 0!==e)return this.buffer[this.btm]=void 0,this.btm=this.btm+1&this.mask,e}isEmpty(){return void 0===this.buffer[this.btm]}}class Ose{constructor(){var e;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,Yo.Z)(this,"size",void 0),(0,Yo.Z)(this,"hwm",void 0),(0,Yo.Z)(this,"head",void 0),(0,Yo.Z)(this,"tail",void 0),this.hwm=null!==(e=t.splitLimit)&&void 0!==e?e:16,this.head=new Dse(this.hwm),this.tail=this.head,this.size=0}calculateSize(e){return null!=(null===e||void 0===e?void 0:e.byteLength)?e.byteLength:1}push(e){if(null!=(null===e||void 0===e?void 0:e.value)&&(this.size+=this.calculateSize(e.value)),!this.head.push(e)){const t=this.head;this.head=t.next=new Dse(2*this.head.buffer.length),this.head.push(e)}}shift(){var e;let t=this.tail.shift();if(void 0===t&&null!=this.tail.next){const e=this.tail.next;this.tail.next=null,this.tail=e,t=this.tail.shift()}return null!=(null===(e=t)||void 0===e?void 0:e.value)&&(this.size-=this.calculateSize(t.value)),t}isEmpty(){return this.head.isEmpty()}}class Nse extends Error{constructor(e,t){super(null!==e&&void 0!==e?e:"The operation was aborted"),(0,Yo.Z)(this,"type",void 0),(0,Yo.Z)(this,"code",void 0),this.type="aborted",this.code=null!==t&&void 0!==t?t:"ABORT_ERR"}}function Bse(){return Lse((e=>{const t=e.shift();if(null==t)return{done:!0};if(null!=t.error)throw t.error;return{done:!0===t.done,value:t.value}}),arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})}function Lse(e,t){var n;let r,i,o,s=(t=null!==(n=t)&&void 0!==n?n:{}).onEnd,a=new Ose,c=Ws();const l=e=>null!=i?i(e):(a.push(e),r),u=e=>{var n;if(o)return r;if(!0!==(null===(n=t)||void 0===n?void 0:n.objectMode)&&null==(null===e||void 0===e?void 0:e.byteLength))throw new Error("objectMode was not true but tried to push non-Uint8Array value");return l({done:!1,value:e})},h=e=>o?r:(o=!0,null!=e?(e=>(a=new Ose,null!=i?i({error:e}):(a.push({error:e}),r)))(e):l({done:!0}));if(r={[Symbol.asyncIterator](){return this},next:async()=>{try{return a.isEmpty()?o?{done:!0}:await new Promise(((t,n)=>{i=o=>{i=null,a.push(o);try{t(e(a))}catch(s){n(s)}return r}})):e(a)}finally{a.isEmpty()&&queueMicrotask((()=>{c.resolve(),c=Ws()}))}},return:()=>(a=new Ose,h(),{done:!0}),throw:e=>(h(e),{done:!0}),push:u,end:h,get readableLength(){return a.size},onEmpty:async e=>{const t=null===e||void 0===e?void 0:e.signal;if(null===t||void 0===t||t.throwIfAborted(),a.isEmpty())return;let n,r;null!=t&&(n=new Promise(((e,n)=>{r=()=>{n(new Nse)},t.addEventListener("abort",r)})));try{await Promise.race([c.promise,n])}finally{null!=r&&null!=t&&(null===t||void 0===t||t.removeEventListener("abort",r))}}},null==s)return r;const d=r;return r={[Symbol.asyncIterator](){return this},next:()=>d.next(),throw:e=>(d.throw(e),null!=s&&(s(e),s=void 0),{done:!0}),return:()=>(d.return(),null!=s&&(s(),s=void 0),{done:!0}),push:u,end:e=>(d.end(e),null!=s&&(s(e),s=void 0),r),get readableLength(){return d.readableLength},onEmpty:e=>d.onEmpty(e)},r}const Mse=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];const r=[];for(const i of t)null==i[Symbol.asyncIterator]&&r.push(i);return r.length===t.length?function*(){for(const e of r)yield*e}():async function*(){const e=Bse({objectMode:!0});Promise.resolve().then((async()=>{try{await Promise.all(t.map((async t=>{for await(const n of t)e.push(n)}))),e.end()}catch(n){e.end(n)}})),yield*e}()},Use=1e3,Fse="/dht/provider",Kse=20,jse=3,Zse=Number(3e5),zse=Number(Number(Use)),Vse=Number(5e3),Hse=Number(3e5),qse=Number(3e4),Gse=Number(3e4);const Wse=function(e){const[t,n]=null!=e[Symbol.asyncIterator]?[e[Symbol.asyncIterator](),Symbol.asyncIterator]:[e[Symbol.iterator](),Symbol.iterator],r=[];return{peek:()=>t.next(),push:e=>{r.push(e)},next:()=>r.length>0?{done:!1,value:r.shift()}:t.next(),[n](){return this}}};const Qse=function(e,t){if(null!=e[Symbol.asyncIterator])return async function*(){for await(const n of e)yield t(n)}();const n=Wse(e),{value:r,done:i}=n.next();if(!0===i)return function*(){}();const o=t(r);if("function"===typeof o.then)return async function*(){yield await o;for await(const e of n)yield t(e)}();const s=t;return function*(){yield o;for(const e of n)yield s(e)}()};function Yse(e){if(null==e)throw new Error("Empty pipeline");if(eae(e)){const t=e;e=()=>t.source}else if($se(e)||Xse(e)){const t=e;e=()=>t}for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];const i=[e,...n];if(i.length>1&&eae(i[i.length-1])&&(i[i.length-1]=i[i.length-1].sink),i.length>2)for(let o=1;o<i.length-1;o++)eae(i[o])&&(i[o]=tae(i[o]));return Jse(...i)}const Jse=function(){let e;for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];for(;n.length>0;)e=n.shift()(e);return e},Xse=e=>null!=(null===e||void 0===e?void 0:e[Symbol.asyncIterator]),$se=e=>null!=(null===e||void 0===e?void 0:e[Symbol.iterator]),eae=e=>null!=e&&(null!=e.sink&&null!=e.source),tae=e=>t=>{const n=e.sink(t);if(null!=(null===n||void 0===n?void 0:n.then)){const t=Bse({objectMode:!0});let r;n.then((()=>{t.end()}),(e=>{t.end(e)}));const i=e.source;if(Xse(i))r=async function*(){yield*i,t.end()};else{if(!$se(i))throw new Error("Unknown duplex source type - must be Iterable or AsyncIterable");r=function*(){yield*i,t.end()}}return Mse(t,r())}return e.source},nae=Symbol.for("@libp2p/peer-id");const rae=fse({prefix:"9",name:"base10",alphabet:"0123456789"}),iae=pse({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),oae=pse({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4}),sae=pse({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1}),aae=Array.from("\ud83d\ude80\ud83e\ude90\u2604\ud83d\udef0\ud83c\udf0c\ud83c\udf11\ud83c\udf12\ud83c\udf13\ud83c\udf14\ud83c\udf15\ud83c\udf16\ud83c\udf17\ud83c\udf18\ud83c\udf0d\ud83c\udf0f\ud83c\udf0e\ud83d\udc09\u2600\ud83d\udcbb\ud83d\udda5\ud83d\udcbe\ud83d\udcbf\ud83d\ude02\u2764\ud83d\ude0d\ud83e\udd23\ud83d\ude0a\ud83d\ude4f\ud83d\udc95\ud83d\ude2d\ud83d\ude18\ud83d\udc4d\ud83d\ude05\ud83d\udc4f\ud83d\ude01\ud83d\udd25\ud83e\udd70\ud83d\udc94\ud83d\udc96\ud83d\udc99\ud83d\ude22\ud83e\udd14\ud83d\ude06\ud83d\ude44\ud83d\udcaa\ud83d\ude09\u263a\ud83d\udc4c\ud83e\udd17\ud83d\udc9c\ud83d\ude14\ud83d\ude0e\ud83d\ude07\ud83c\udf39\ud83e\udd26\ud83c\udf89\ud83d\udc9e\u270c\u2728\ud83e\udd37\ud83d\ude31\ud83d\ude0c\ud83c\udf38\ud83d\ude4c\ud83d\ude0b\ud83d\udc97\ud83d\udc9a\ud83d\ude0f\ud83d\udc9b\ud83d\ude42\ud83d\udc93\ud83e\udd29\ud83d\ude04\ud83d\ude00\ud83d\udda4\ud83d\ude03\ud83d\udcaf\ud83d\ude48\ud83d\udc47\ud83c\udfb6\ud83d\ude12\ud83e\udd2d\u2763\ud83d\ude1c\ud83d\udc8b\ud83d\udc40\ud83d\ude2a\ud83d\ude11\ud83d\udca5\ud83d\ude4b\ud83d\ude1e\ud83d\ude29\ud83d\ude21\ud83e\udd2a\ud83d\udc4a\ud83e\udd73\ud83d\ude25\ud83e\udd24\ud83d\udc49\ud83d\udc83\ud83d\ude33\u270b\ud83d\ude1a\ud83d\ude1d\ud83d\ude34\ud83c\udf1f\ud83d\ude2c\ud83d\ude43\ud83c\udf40\ud83c\udf37\ud83d\ude3b\ud83d\ude13\u2b50\u2705\ud83e\udd7a\ud83c\udf08\ud83d\ude08\ud83e\udd18\ud83d\udca6\u2714\ud83d\ude23\ud83c\udfc3\ud83d\udc90\u2639\ud83c\udf8a\ud83d\udc98\ud83d\ude20\u261d\ud83d\ude15\ud83c\udf3a\ud83c\udf82\ud83c\udf3b\ud83d\ude10\ud83d\udd95\ud83d\udc9d\ud83d\ude4a\ud83d\ude39\ud83d\udde3\ud83d\udcab\ud83d\udc80\ud83d\udc51\ud83c\udfb5\ud83e\udd1e\ud83d\ude1b\ud83d\udd34\ud83d\ude24\ud83c\udf3c\ud83d\ude2b\u26bd\ud83e\udd19\u2615\ud83c\udfc6\ud83e\udd2b\ud83d\udc48\ud83d\ude2e\ud83d\ude46\ud83c\udf7b\ud83c\udf43\ud83d\udc36\ud83d\udc81\ud83d\ude32\ud83c\udf3f\ud83e\udde1\ud83c\udf81\u26a1\ud83c\udf1e\ud83c\udf88\u274c\u270a\ud83d\udc4b\ud83d\ude30\ud83e\udd28\ud83d\ude36\ud83e\udd1d\ud83d\udeb6\ud83d\udcb0\ud83c\udf53\ud83d\udca2\ud83e\udd1f\ud83d\ude41\ud83d\udea8\ud83d\udca8\ud83e\udd2c\u2708\ud83c\udf80\ud83c\udf7a\ud83e\udd13\ud83d\ude19\ud83d\udc9f\ud83c\udf31\ud83d\ude16\ud83d\udc76\ud83e\udd74\u25b6\u27a1\u2753\ud83d\udc8e\ud83d\udcb8\u2b07\ud83d\ude28\ud83c\udf1a\ud83e\udd8b\ud83d\ude37\ud83d\udd7a\u26a0\ud83d\ude45\ud83d\ude1f\ud83d\ude35\ud83d\udc4e\ud83e\udd32\ud83e\udd20\ud83e\udd27\ud83d\udccc\ud83d\udd35\ud83d\udc85\ud83e\uddd0\ud83d\udc3e\ud83c\udf52\ud83d\ude17\ud83e\udd11\ud83c\udf0a\ud83e\udd2f\ud83d\udc37\u260e\ud83d\udca7\ud83d\ude2f\ud83d\udc86\ud83d\udc46\ud83c\udfa4\ud83d\ude47\ud83c\udf51\u2744\ud83c\udf34\ud83d\udca3\ud83d\udc38\ud83d\udc8c\ud83d\udccd\ud83e\udd40\ud83e\udd22\ud83d\udc45\ud83d\udca1\ud83d\udca9\ud83d\udc50\ud83d\udcf8\ud83d\udc7b\ud83e\udd10\ud83e\udd2e\ud83c\udfbc\ud83e\udd75\ud83d\udea9\ud83c\udf4e\ud83c\udf4a\ud83d\udc7c\ud83d\udc8d\ud83d\udce3\ud83e\udd42"),cae=aae.reduce(((e,t,n)=>(e[n]=t,e)),[]),lae=aae.reduce(((e,t,n)=>(e[t.codePointAt(0)]=n,e)),[]);const uae=dse({prefix:"\ud83d\ude80",name:"base256emoji",encode:function(e){return e.reduce(((e,t)=>e+=cae[t]),"")},decode:function(e){const t=[];for(const n of e){const e=lae[n.codePointAt(0)];if(void 0===e)throw new Error("Non-base256emoji character: ".concat(n));t.push(e)}return new Uint8Array(t)}}),hae=fse({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),dae=fse({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"}),fae=pse({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3}),pae=dse({prefix:"\0",name:"identity",encode:e=>{return t=e,(new TextDecoder).decode(t);var t},decode:e=>(e=>(new TextEncoder).encode(e))(e)}),gae=new TextEncoder,yae=new TextDecoder,mae="json",vae=512,bae=e=>gae.encode(JSON.stringify(e)),wae=e=>JSON.parse(yae.decode(e)),Eae="raw",Aae=85,Sae=e=>sse(e),_ae=e=>sse(e);var Iae=function e(t,n,r){n=n||[];var i=r=r||0;for(;t>=kae;)n[r++]=255&t|Cae,t/=128;for(;t&Tae;)n[r++]=255&t|Cae,t>>>=7;return n[r]=0|t,e.bytes=r-i+1,n},Cae=128,Tae=-128,kae=Math.pow(2,31);var Rae=function e(t,n){var r,i=0,o=0,s=n=n||0,a=t.length;do{if(s>=a)throw e.bytes=0,new RangeError("Could not decode varint");r=t[s++],i+=o<28?(r&Pae)<<o:(r&Pae)*Math.pow(2,o),o+=7}while(r>=xae);return e.bytes=s-n,i},xae=128,Pae=127;var Dae=Math.pow(2,7),Oae=Math.pow(2,14),Nae=Math.pow(2,21),Bae=Math.pow(2,28),Lae=Math.pow(2,35),Mae=Math.pow(2,42),Uae=Math.pow(2,49),Fae=Math.pow(2,56),Kae=Math.pow(2,63);const jae={encode:Iae,decode:Rae,encodingLength:function(e){return e<Dae?1:e<Oae?2:e<Nae?3:e<Bae?4:e<Lae?5:e<Mae?6:e<Uae?7:e<Fae?8:e<Kae?9:10}},Zae=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return[jae.decode(e,t),jae.decode.bytes]},zae=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return jae.encode(e,t,n),t},Vae=e=>jae.encodingLength(e),Hae=(e,t)=>{const n=t.byteLength,r=Vae(e),i=r+Vae(n),o=new Uint8Array(i+n);return zae(e,o,0),zae(n,o,r),o.set(t,i),new Gae(e,n,t,o)},qae=e=>{const t=sse(e),[n,r]=Zae(t),[i,o]=Zae(t.subarray(r)),s=t.subarray(r+o);if(s.byteLength!==i)throw new Error("Incorrect length");return new Gae(n,i,s,t)};class Gae{constructor(e,t,n,r){this.code=e,this.size=t,this.digest=n,this.bytes=r}}const Wae=sse,Qae={code:0,name:"identity",encode:Wae,digest:e=>Hae(0,Wae(e))},Yae=e=>{let{name:t,code:n,encode:r}=e;return new Jae(t,n,r)};class Jae{constructor(e,t,n){this.name=e,this.code=t,this.encode=n}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?Hae(this.code,t):t.then((e=>Hae(this.code,e)))}throw Error("Unknown type, must be binary type")}}const Xae=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),$ae=Yae({name:"sha2-256",code:18,encode:Xae("SHA-256")}),ece=Yae({name:"sha2-512",code:19,encode:Xae("SHA-512")}),tce=(e,t)=>{const{bytes:n,version:r}=e;return 0===r?sce(n,rce(e),t||_se.encoder):ace(n,rce(e),t||gse.encoder)},nce=new WeakMap,rce=e=>{const t=nce.get(e);if(null==t){const t=new Map;return nce.set(e,t),t}return t};class ice{constructor(e,t,n,r){this.code=t,this.version=e,this.multihash=n,this.bytes=r,this["/"]=r}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{const{code:e,multihash:t}=this;if(e!==cce)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==lce)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return ice.createV0(t)}default:throw Error("Can not convert CID version ".concat(this.version," to version 0. This is a bug please report"))}}toV1(){switch(this.version){case 0:{const{code:e,digest:t}=this.multihash,n=Hae(e,t);return ice.createV1(this.code,n)}case 1:return this;default:throw Error("Can not convert CID version ".concat(this.version," to version 1. This is a bug please report"))}}equals(e){return ice.equals(this,e)}static equals(e,t){const n=t;return n&&e.code===n.code&&e.version===n.version&&((e,t)=>{if(e===t)return!0;{const n=t;return e.code===n.code&&e.size===n.size&&n.bytes instanceof Uint8Array&&((e,t)=>{if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;for(let n=0;n<e.byteLength;n++)if(e[n]!==t[n])return!1;return!0})(e.bytes,n.bytes)}})(e.multihash,n.multihash)}toString(e){return tce(this,e)}toJSON(){return{"/":tce(this)}}link(){return this}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID(".concat(this.toString(),")")}static asCID(e){if(null==e)return null;const t=e;if(t instanceof ice)return t;if(null!=t["/"]&&t["/"]===t.bytes||t.asCID===t){const{version:e,code:n,multihash:r,bytes:i}=t;return new ice(e,n,r,i||uce(e,n,r.bytes))}if(!0===t[hce]){const{version:e,multihash:n,code:r}=t,i=qae(n);return ice.create(e,r,i)}return null}static create(e,t,n){if("number"!==typeof t)throw new Error("String codecs are no longer supported");if(!(n.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(e){case 0:if(t!==cce)throw new Error("Version 0 CID must use dag-pb (code: ".concat(cce,") block encoding"));return new ice(e,t,n,n.bytes);case 1:{const r=uce(e,t,n.bytes);return new ice(e,t,n,r)}default:throw new Error("Invalid version")}}static createV0(e){return ice.create(0,cce,e)}static createV1(e,t){return ice.create(1,e,t)}static decode(e){const[t,n]=ice.decodeFirst(e);if(n.length)throw new Error("Incorrect length");return t}static decodeFirst(e){const t=ice.inspectBytes(e),n=t.size-t.multihashSize,r=sse(e.subarray(n,n+t.multihashSize));if(r.byteLength!==t.multihashSize)throw new Error("Incorrect length");const i=r.subarray(t.multihashSize-t.digestSize),o=new Gae(t.multihashCode,t.digestSize,i,r);return[0===t.version?ice.createV0(o):ice.createV1(t.codec,o),e.subarray(t.size)]}static inspectBytes(e){let t=0;const n=()=>{const[n,r]=Zae(e.subarray(t));return t+=r,n};let r=n(),i=cce;if(18===r?(r=0,t=0):i=n(),0!==r&&1!==r)throw new RangeError("Invalid CID version ".concat(r));const o=t,s=n(),a=n(),c=t+a;return{version:r,codec:i,multihashCode:s,digestSize:a,multihashSize:c-o,size:c}}static parse(e,t){const[n,r]=oce(e,t),i=ice.decode(r);if(0===i.version&&"Q"!==e[0])throw Error("Version 0 CID string must not include multibase prefix");return rce(i).set(n,e),i}}const oce=(e,t)=>{switch(e[0]){case"Q":{const n=t||_se;return[_se.prefix,n.decode("".concat(_se.prefix).concat(e))]}case _se.prefix:{const n=t||_se;return[_se.prefix,n.decode(e)]}case gse.prefix:{const n=t||gse;return[gse.prefix,n.decode(e)]}default:if(null==t)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[e[0],t.decode(e)]}},sce=(e,t,n)=>{const{prefix:r}=n;if(r!==_se.prefix)throw Error("Cannot string encode V0 in ".concat(n.name," encoding"));const i=t.get(r);if(null==i){const i=n.encode(e).slice(1);return t.set(r,i),i}return i},ace=(e,t,n)=>{const{prefix:r}=n,i=t.get(r);if(null==i){const i=n.encode(e);return t.set(r,i),i}return i},cce=112,lce=18,uce=(e,t,n)=>{const r=Vae(e),i=r+Vae(t),o=new Uint8Array(i+n.byteLength);return zae(e,o,0),zae(t,o,r),o.set(n,i),o},hce=Symbol.for("@ipld/js-cid/CID"),dce={...Fr,...Br,...Ur,...Or,...Nr,...xr,...Mr,...Pr,...Dr,...Lr};let fce;const pce=Symbol.for("nodejs.util.inspect.custom"),gce=Object.values(dce).map((e=>e.decoder)).reduce(((e,t)=>e.or(t)),dce.identity.decoder),yce=114,mce=36,vce=37;fce=Symbol.toStringTag;class bce{constructor(e){(0,Yo.Z)(this,"type",void 0),(0,Yo.Z)(this,"multihash",void 0),(0,Yo.Z)(this,"privateKey",void 0),(0,Yo.Z)(this,"publicKey",void 0),(0,Yo.Z)(this,"string",void 0),(0,Yo.Z)(this,nae,!0),this.type=e.type,this.multihash=e.multihash,this.privateKey=e.privateKey,Object.defineProperty(this,"string",{enumerable:!1,writable:!0})}get[fce](){return"PeerId(".concat(this.toString(),")")}toString(){return null==this.string&&(this.string=_se.encode(this.multihash.bytes).slice(1)),this.string}toCID(){return ice.createV1(yce,this.multihash)}toBytes(){return this.multihash.bytes}toJSON(){return this.toString()}equals(e){var t;if(e instanceof Uint8Array)return(0,Ms.f)(this.multihash.bytes,e);if("string"===typeof e)return Sce(e).equals(this);if(null!=(null===e||void 0===e||null===(t=e.multihash)||void 0===t?void 0:t.bytes))return(0,Ms.f)(this.multihash.bytes,e.multihash.bytes);throw new Error("not valid Id")}[pce](){return"PeerId(".concat(this.toString(),")")}}class wce extends bce{constructor(e){super({...e,type:"RSA"}),(0,Yo.Z)(this,"type","RSA"),(0,Yo.Z)(this,"publicKey",void 0),this.publicKey=e.publicKey}}class Ece extends bce{constructor(e){super({...e,type:"Ed25519"}),(0,Yo.Z)(this,"type","Ed25519"),(0,Yo.Z)(this,"publicKey",void 0),this.publicKey=e.multihash.digest}}class Ace extends bce{constructor(e){super({...e,type:"secp256k1"}),(0,Yo.Z)(this,"type","secp256k1"),(0,Yo.Z)(this,"publicKey",void 0),this.publicKey=e.multihash.digest}}function Sce(e,t){var n;if(t=null!==(n=t)&&void 0!==n?n:gce,"1"===e.charAt(0)||"Q"===e.charAt(0)){const t=qae(_se.decode("z".concat(e)));return e.startsWith("12D")?new Ece({multihash:t}):e.startsWith("16U")?new Ace({multihash:t}):new wce({multihash:t})}return _ce(gce.decode(e))}function _ce(e){try{const t=qae(e);if(t.code===Qae.code){if(t.digest.length===mce)return new Ece({multihash:t});if(t.digest.length===vce)return new Ace({multihash:t})}if(t.code===$ae.code)return new wce({multihash:t})}catch{return function(e){if(null==e||null==e.multihash||null==e.version||1===e.version&&e.code!==yce)throw new Error("Supplied PeerID CID is invalid");const t=e.multihash;if(t.code===$ae.code)return new wce({multihash:e.multihash});if(t.code===Qae.code){if(t.digest.length===mce)return new Ece({multihash:e.multihash});if(t.digest.length===vce)return new Ace({multihash:e.multihash})}throw new Error("Supplied PeerID CID is invalid")}(ice.decode(e))}throw new Error("Supplied PeerID CID is invalid")}async function Ice(e,t){return e.length===mce?new Ece({multihash:Hae(Qae.code,e),privateKey:t}):e.length===vce?new Ace({multihash:Hae(Qae.code,e),privateKey:t}):new wce({multihash:await $ae.digest(e),publicKey:e,privateKey:t})}var Cce,Tce,kce;function Rce(e){const t=e.getUTCFullYear(),n=String(e.getUTCMonth()+1).padStart(2,"0"),r=String(e.getUTCDate()).padStart(2,"0"),i=String(e.getUTCHours()).padStart(2,"0"),o=String(e.getUTCMinutes()).padStart(2,"0"),s=String(e.getUTCSeconds()).padStart(2,"0"),a=e.getUTCMilliseconds(),c=String(1e3*a*1e3).padStart(9,"0");return"".concat(t,"-").concat(n,"-").concat(r,"T").concat(i,":").concat(o,":").concat(s,".").concat(c,"Z")}!function(e){let t;e.codec=()=>(null==t&&(t=ws((function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!1!==n.lengthDelimited&&t.fork(),null!=e.key&&e.key.byteLength>0&&(t.uint32(10),t.bytes(e.key)),null!=e.value&&e.value.byteLength>0&&(t.uint32(18),t.bytes(e.value)),null!=e.timeReceived&&""!==e.timeReceived&&(t.uint32(42),t.string(e.timeReceived)),!1!==n.lengthDelimited&&t.ldelim()}),((e,t)=>{const n={key:new Uint8Array(0),value:new Uint8Array(0),timeReceived:""},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:n.key=e.bytes();break;case 2:n.value=e.bytes();break;case 5:n.timeReceived=e.string();break;default:e.skipType(7&t)}}return n}))),t),e.encode=t=>fs(t,e.codec()),e.decode=t=>ds(t,e.codec())}(Cce||(Cce={}));class xce{constructor(e,t,n){if((0,Yo.Z)(this,"key",void 0),(0,Yo.Z)(this,"value",void 0),(0,Yo.Z)(this,"timeReceived",void 0),!(e instanceof Uint8Array))throw new Error("key must be a Uint8Array");if(!(t instanceof Uint8Array))throw new Error("value must be a Uint8Array");this.key=e,this.value=t,this.timeReceived=n}serialize(){return Cce.encode(this.prepareSerialize())}prepareSerialize(){return{key:this.key,value:this.value,timeReceived:Rce(this.timeReceived)}}static deserialize(e){const t=Cce.decode(e);return new xce(t.key,t.value,new Date(t.timeReceived))}static fromDeserialized(e){const t=function(e){const t=new RegExp("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d+)Z"),n=String(e).trim().match(t);if(null==n)throw new Error("Invalid format");const r=parseInt(n[1],10),i=parseInt(n[2],10)-1,o=parseInt(n[3],10),s=parseInt(n[4],10),a=parseInt(n[5],10),c=parseInt(n[6],10),l=parseInt(n[7].slice(0,-6),10);return new Date(Date.UTC(r,i,o,s,a,c,l))}(e.timeReceived);if(null==e.key)throw new Error("key missing from deserialized object");if(null==e.value)throw new Error("value missing from deserialized object");return new xce(e.key,e.value,t)}}!function(e){let t;e.codec=()=>(null==t&&(t=ws((function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!1!==n.lengthDelimited&&t.fork(),null!=e.key&&(t.uint32(10),t.bytes(e.key)),null!=e.value&&(t.uint32(18),t.bytes(e.value)),null!=e.author&&(t.uint32(26),t.bytes(e.author)),null!=e.signature&&(t.uint32(34),t.bytes(e.signature)),null!=e.timeReceived&&(t.uint32(42),t.string(e.timeReceived)),!1!==n.lengthDelimited&&t.ldelim()}),((e,t)=>{const n={},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:n.key=e.bytes();break;case 2:n.value=e.bytes();break;case 3:n.author=e.bytes();break;case 4:n.signature=e.bytes();break;case 5:n.timeReceived=e.string();break;default:e.skipType(7&t)}}return n}))),t),e.encode=t=>fs(t,e.codec()),e.decode=t=>ds(t,e.codec())}(Tce||(Tce={})),function(e){let t,n,r,i,o,s;!function(e){e.PUT_VALUE="PUT_VALUE",e.GET_VALUE="GET_VALUE",e.ADD_PROVIDER="ADD_PROVIDER",e.GET_PROVIDERS="GET_PROVIDERS",e.FIND_NODE="FIND_NODE",e.PING="PING"}(t=e.MessageType||(e.MessageType={})),function(e){e[e.PUT_VALUE=0]="PUT_VALUE",e[e.GET_VALUE=1]="GET_VALUE",e[e.ADD_PROVIDER=2]="ADD_PROVIDER",e[e.GET_PROVIDERS=3]="GET_PROVIDERS",e[e.FIND_NODE=4]="FIND_NODE",e[e.PING=5]="PING"}(n||(n={})),function(e){e.codec=()=>bs(n)}(t=e.MessageType||(e.MessageType={})),function(e){e.NOT_CONNECTED="NOT_CONNECTED",e.CONNECTED="CONNECTED",e.CAN_CONNECT="CAN_CONNECT",e.CANNOT_CONNECT="CANNOT_CONNECT"}(r=e.ConnectionType||(e.ConnectionType={})),function(e){e[e.NOT_CONNECTED=0]="NOT_CONNECTED",e[e.CONNECTED=1]="CONNECTED",e[e.CAN_CONNECT=2]="CAN_CONNECT",e[e.CANNOT_CONNECT=3]="CANNOT_CONNECT"}(i||(i={})),function(e){e.codec=()=>bs(i)}(r=e.ConnectionType||(e.ConnectionType={})),function(t){let n;t.codec=()=>(null==n&&(n=ws((function(t,n){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!1!==r.lengthDelimited&&n.fork(),null!=t.id&&(n.uint32(10),n.bytes(t.id)),null!=t.addrs)for(const e of t.addrs)n.uint32(18),n.bytes(e);null!=t.connection&&(n.uint32(24),e.ConnectionType.codec().encode(t.connection,n)),!1!==r.lengthDelimited&&n.ldelim()}),((t,n)=>{const r={addrs:[]},i=null==n?t.len:t.pos+n;for(;t.pos<i;){const n=t.uint32();switch(n>>>3){case 1:r.id=t.bytes();break;case 2:r.addrs.push(t.bytes());break;case 3:r.connection=e.ConnectionType.codec().decode(t);break;default:t.skipType(7&n)}}return r}))),n),t.encode=e=>fs(e,t.codec()),t.decode=e=>ds(e,t.codec())}(o=e.Peer||(e.Peer={})),e.codec=()=>(null==s&&(s=ws((function(t,n){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!1!==r.lengthDelimited&&n.fork(),null!=t.type&&(n.uint32(8),e.MessageType.codec().encode(t.type,n)),null!=t.clusterLevelRaw&&(n.uint32(80),n.int32(t.clusterLevelRaw)),null!=t.key&&(n.uint32(18),n.bytes(t.key)),null!=t.record&&(n.uint32(26),n.bytes(t.record)),null!=t.closerPeers)for(const i of t.closerPeers)n.uint32(66),e.Peer.codec().encode(i,n);if(null!=t.providerPeers)for(const i of t.providerPeers)n.uint32(74),e.Peer.codec().encode(i,n);!1!==r.lengthDelimited&&n.ldelim()}),((t,n)=>{const r={closerPeers:[],providerPeers:[]},i=null==n?t.len:t.pos+n;for(;t.pos<i;){const n=t.uint32();switch(n>>>3){case 1:r.type=e.MessageType.codec().decode(t);break;case 10:r.clusterLevelRaw=t.int32();break;case 2:r.key=t.bytes();break;case 3:r.record=t.bytes();break;case 8:r.closerPeers.push(e.Peer.codec().decode(t,t.uint32()));break;case 9:r.providerPeers.push(e.Peer.codec().decode(t,t.uint32()));break;default:t.skipType(7&n)}}return r}))),s),e.encode=t=>fs(t,e.codec()),e.decode=t=>ds(t,e.codec())}(kce||(kce={}));const Pce=kce.MessageType,Dce=kce.ConnectionType,Oce=Object.keys(Pce);class Nce{constructor(e,t,n){if((0,Yo.Z)(this,"type",void 0),(0,Yo.Z)(this,"key",void 0),(0,Yo.Z)(this,"clusterLevelRaw",void 0),(0,Yo.Z)(this,"closerPeers",void 0),(0,Yo.Z)(this,"providerPeers",void 0),(0,Yo.Z)(this,"record",void 0),!(t instanceof Uint8Array))throw new Error("Key must be a Uint8Array");this.type=e,this.key=t,this.clusterLevelRaw=n,this.closerPeers=[],this.providerPeers=[],this.record=void 0}get clusterLevel(){const e=this.clusterLevelRaw-1;return e<0?0:e}set clusterLevel(e){this.clusterLevelRaw=e}serialize(){return kce.encode({key:this.key,type:this.type,clusterLevelRaw:this.clusterLevelRaw,closerPeers:this.closerPeers.map(Bce),providerPeers:this.providerPeers.map(Bce),record:null==this.record?void 0:this.record.serialize().subarray()})}static deserialize(e){var t,n,r,i;const o=kce.decode(e),s=new Nce(null!==(t=o.type)&&void 0!==t?t:kce.MessageType.PUT_VALUE,null!==(n=o.key)&&void 0!==n?n:Uint8Array.from([]),null!==(r=o.clusterLevelRaw)&&void 0!==r?r:0);return s.closerPeers=o.closerPeers.map(Lce),s.providerPeers=o.providerPeers.map(Lce),null!=(null===(i=o.record)||void 0===i?void 0:i.length)&&(s.record=xce.deserialize(o.record)),s}}function Bce(e){var t;return{id:e.id.toBytes(),addrs:(null!==(t=e.multiaddrs)&&void 0!==t?t:[]).map((e=>e.bytes)),connection:Dce.CONNECTED}}function Lce(e){var t;if(null==e.id)throw new Error("Invalid peer in message");return{id:_ce(e.id),multiaddrs:(null!==(t=e.addrs)&&void 0!==t?t:[]).map((e=>(0,og.HM)(e))),protocols:[]}}function Mce(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={...e,name:"SEND_QUERY",type:0,messageName:e.type,messageType:Oce.indexOf(e.type.toString())};return null===(t=n.onProgress)||void 0===t||t.call(n,new ese("kad-dht:query:send-query",{detail:r})),r}function Uce(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={...e,name:"PEER_RESPONSE",type:1,messageName:e.messageType,closer:null!=e.closer?e.closer:[],providers:null!=e.providers?e.providers:[]};return null===(t=n.onProgress)||void 0===t||t.call(n,new ese("kad-dht:query:peer-response",{detail:r})),r}function Fce(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={...e,name:"FINAL_PEER",type:2};return null===(t=n.onProgress)||void 0===t||t.call(n,new ese("kad-dht:query:final-peer",{detail:r})),r}function Kce(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={...e,name:"QUERY_ERROR",type:3};return null===(t=n.onProgress)||void 0===t||t.call(n,new ese("kad-dht:query:query-error",{detail:r})),r}function jce(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={...e,name:"PROVIDER",type:4};return null===(t=n.onProgress)||void 0===t||t.call(n,new ese("kad-dht:query:provider",{detail:r})),r}function Zce(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={...e,name:"VALUE",type:5};return null===(t=n.onProgress)||void 0===t||t.call(n,new ese("kad-dht:query:value",{detail:r})),r}function zce(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={...e,name:"DIAL_PEER",type:7};return null===(t=n.onProgress)||void 0===t||t.call(n,new ese("kad-dht:query:dial-peer",{detail:r})),r}const Vce={pk:function(e,t){return 0}};async function Hce(e,t){const n=t.key,r=(0,Su.B)(n).split("/");if(r.length<3)return;const i=e[r[1].toString()];if(null==i){const e='No validator available for key type "'.concat(r[1],'"');throw new qoe(e,"ERR_INVALID_RECORD_KEY_TYPE")}await i(n,t.value)}const qce={pk:async(e,t)=>{if(!(e instanceof Uint8Array))throw new qoe('"key" must be a Uint8Array',"ERR_INVALID_RECORD_KEY_NOT_BUFFER");if(e.byteLength<5)throw new qoe("invalid public key record","ERR_INVALID_RECORD_KEY_TOO_SHORT");if("/pk/"!==(0,Su.B)(e.subarray(0,4)))throw new qoe("key was not prefixed with /pk/","ERR_INVALID_RECORD_KEY_BAD_PREFIX");const n=e.slice(4),r=await $ae.digest(t);if(!(0,Ms.f)(n,r.bytes))throw new qoe("public key does not match passed in key","ERR_INVALID_RECORD_HASH_MISMATCH")}};let Gce;const Wce="/",Qce=(new TextEncoder).encode(Wce),Yce=Qce[0];Gce=Symbol.toStringTag;class Jce{constructor(e,t){if((0,Yo.Z)(this,"_buf",void 0),"string"===typeof e)this._buf=(0,mu.m)(e);else{if(!(e instanceof Uint8Array))throw new Error("Invalid key, should be String of Uint8Array");this._buf=e}if(null==t&&(t=!0),t&&this.clean(),0===this._buf.byteLength||this._buf[0]!==Yce)throw new Error("Invalid key")}toString(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"utf8";return(0,Su.B)(this._buf,e)}uint8Array(){return this._buf}get[Gce](){return"Key(".concat(this.toString(),")")}static withNamespaces(e){return new Jce(e.join(Wce))}static random(){return new Jce(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:21;return crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+((t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?"-":"_")),"")}().replace(/-/g,""))}static asKey(e){return e instanceof Uint8Array||"string"===typeof e?new Jce(e):"function"===typeof e.uint8Array?new Jce(e.uint8Array()):null}clean(){if(null!=this._buf&&0!==this._buf.byteLength||(this._buf=Qce),this._buf[0]!==Yce){const e=new Uint8Array(this._buf.byteLength+1);e.fill(Yce,0,1),e.set(this._buf,1),this._buf=e}for(;this._buf.byteLength>1&&this._buf[this._buf.byteLength-1]===Yce;)this._buf=this._buf.subarray(0,-1)}less(e){const t=this.list(),n=e.list();for(let r=0;r<t.length;r++){if(n.length<r+1)return!1;const e=t[r],i=n[r];if(e<i)return!0;if(e>i)return!1}return t.length<n.length}reverse(){return Jce.withNamespaces(this.list().slice().reverse())}namespaces(){return this.list()}baseNamespace(){const e=this.namespaces();return e[e.length-1]}list(){return this.toString().split(Wce).slice(1)}type(){return function(e){const t=e.split(":");if(t.length<2)return"";return t.slice(0,-1).join(":")}(this.baseNamespace())}name(){return function(e){const t=e.split(":");return t[t.length-1]}(this.baseNamespace())}instance(e){return new Jce(this.toString()+":"+e)}path(){let e=this.parent().toString();return e.endsWith(Wce)||(e+=Wce),e+=this.type(),new Jce(e)}parent(){const e=this.list();return 1===e.length?new Jce(Wce):new Jce(e.slice(0,-1).join(Wce))}child(e){return this.toString()===Wce?e:e.toString()===Wce?this:new Jce(this.toString()+e.toString(),!1)}isAncestorOf(e){return e.toString()!==this.toString()&&e.toString().startsWith(this.toString())}isDecendantOf(e){return e.toString()!==this.toString()&&this.toString().startsWith(e.toString())}isTopLevel(){return 1===this.list().length}concat(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Jce.withNamespaces([...this.namespaces(),...(r=t.map((e=>e.namespaces())),[].concat(...r))]);var r}}const Xce=(0,mu.m)("/pk/");function $ce(e){return{...e,multiaddrs:e.multiaddrs.filter((e=>{const[[t,n]]=e.stringTuples();if(53===t||54===t||55===t)return"localhost"!==n;if(4!==t&&6!==t)return!1;if(null==n)return!1;const r=SS(n);return null==r||!r}))}}function ele(e){return{...e,multiaddrs:e.multiaddrs.filter((e=>{const[[t,n]]=e.stringTuples();if("localhost"===n)return!0;if(4!==t&&6!==t)return!1;if(null==n)return!1;const r=SS(n);return null!=r&&r}))}}async function tle(e){return(await $ae.digest(e)).digest}async function nle(e){return tle(e.toBytes())}function rle(e){return new Jce("".concat("/dht/record","/").concat((0,Su.B)(e,"base32")),!1)}function ile(e,t){const n=new Date;return new xce(e,t,n).serialize()}class ole{constructor(e,t){(0,Yo.Z)(this,"log",void 0),(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"validators",void 0),(0,Yo.Z)(this,"selectors",void 0),(0,Yo.Z)(this,"peerRouting",void 0),(0,Yo.Z)(this,"queryManager",void 0),(0,Yo.Z)(this,"network",void 0);const{validators:n,selectors:r,peerRouting:i,queryManager:o,network:s,lan:a}=t;this.components=e,this.log=xse("libp2p:kad-dht:".concat(a?"lan":"wan",":content-fetching")),this.validators=n,this.selectors=r,this.peerRouting=i,this.queryManager=o,this.network=s}async putLocal(e,t){const n=rle(e);await this.components.datastore.put(n,t)}async getLocal(e){this.log("getLocal %b",e);const t=rle(e);this.log("fetching record for key %k",t);const n=await this.components.datastore.get(t);this.log("found %k in local datastore",t);const r=xce.deserialize(n);return await Hce(this.validators,r),r}sendCorrectionRecord(e,t,n){try{var r=this;let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return async function*(){r.log("sendCorrection for %b",e);const o=ile(e,n);for(const{value:a,from:c}of t){if((0,Ms.f)(a,n)){r.log("record was ok");continue}if(r.components.peerId.equals(c)){try{const t=rle(e);r.log("Storing corrected record for key ".concat(t.toString())),await r.components.datastore.put(t,o.subarray())}catch(s){r.log.error("Failed error correcting self",s)}continue}let t=!1;const l=new Nce(Pce.PUT_VALUE,e,0);l.record=xce.deserialize(o);for await(const e of r.network.sendRequest(c,l,i))"PEER_RESPONSE"===e.name&&null!=e.record&&(0,Ms.f)(e.record.value,xce.deserialize(o).value)&&(t=!0),yield e;t||(yield Kce({from:c,error:new qoe("value not put correctly","ERR_PUT_VALUE_INVALID")},i)),r.log.error("Failed error correcting entry")}}()}catch(i){return Promise.reject(i)}}put(e,t){try{var n=this;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return async function*(){n.log("put key %b value %b",e,t);const i=ile(e,t),o=rle(e);n.log("storing record for key ".concat(o.toString())),await n.components.datastore.put(o,i.subarray()),yield*Yse(n.peerRouting.getClosestPeers(e,{signal:r.signal}),(t=>Qse(t,(t=>async()=>{if("FINAL_PEER"!==t.name)return[t];const o=[],s=new Nce(Pce.PUT_VALUE,e,0);s.record=xce.deserialize(i),n.log("send put to %p",t.peer.id);for await(const e of n.network.sendRequest(t.peer.id,s,r))o.push(e),"PEER_RESPONSE"===e.name&&(null!=e.record&&(0,Ms.f)(e.record.value,xce.deserialize(i).value)||o.push(Kce({from:t.peer.id,error:new qoe("value not put correctly","ERR_PUT_VALUE_INVALID")},r)));return o}))),(e=>qA(e,{ordered:!1,concurrency:jse})),(async function*(e){for await(const t of e)yield*t}))}()}catch(r){return Promise.reject(r)}}get(e){try{var t=this;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return async function*(){t.log("get %b",e);const r=[];for await(const c of t.getMany(e,n))"VALUE"===c.name&&r.push(c),yield c;if(0===r.length)return;const i=r.map((e=>e.value));let o=0;try{o=function(e,t,n){if(0===n.length)throw new qoe("No records given","ERR_NO_RECORDS_RECEIVED");const r=(0,Su.B)(t).split("/");if(r.length<3)throw new qoe("Record key does not have a selector function","ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY");const i=e[r[1].toString()];if(null==i){const e='No selector function configured for key type "'.concat(r[1],'"');throw new qoe(e,"ERR_UNRECOGNIZED_KEY_PREFIX")}return 1===n.length?0:i(t,n)}(t.selectors,e,i)}catch(a){if("ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY"!==a.code)throw a}const s=i[o];if(t.log("GetValue %b %b",e,s),null==s)throw new qoe("best value was not found","ERR_NOT_FOUND");yield*t.sendCorrectionRecord(e,r,s,n),yield r[o]}()}catch(n){return Promise.reject(n)}}getMany(e){try{var t=this;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return async function*(){t.log("getMany values for %b",e);try{const r=await t.getLocal(e);yield Zce({value:r.value,from:t.components.peerId},n)}catch(i){t.log("error getting local value for %b",e,i)}const r=t;yield*t.queryManager.run(e,(function(t){try{let{peer:i,signal:o}=t;return async function*(){for await(const t of r.peerRouting.getValueOrPeers(i,e,{signal:o}))yield t,"PEER_RESPONSE"===t.name&&null!=t.record&&(yield Zce({from:i,value:t.record.value},n))}()}catch(i){return Promise.reject(i)}}),n)}()}catch(n){return Promise.reject(n)}}}class sle{constructor(e,t){(0,Yo.Z)(this,"log",void 0),(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"network",void 0),(0,Yo.Z)(this,"peerRouting",void 0),(0,Yo.Z)(this,"queryManager",void 0),(0,Yo.Z)(this,"routingTable",void 0),(0,Yo.Z)(this,"providers",void 0);const{network:n,peerRouting:r,queryManager:i,routingTable:o,providers:s,lan:a}=t;this.components=e,this.log=xse("libp2p:kad-dht:".concat(a?"lan":"wan",":content-routing")),this.network=n,this.peerRouting=r,this.queryManager=i,this.routingTable=o,this.providers=s}provide(e,t){try{var n=this;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return async function*(){n.log("provide %s",e),await n.providers.addProvider(e,n.components.peerId);const i=new Nce(Pce.ADD_PROVIDER,e.multihash.bytes,0);i.providerPeers=[{id:n.components.peerId,multiaddrs:t,protocols:[]}];let o=0;yield*Yse(n.peerRouting.getClosestPeers(e.multihash.bytes,r),(t=>Qse(t,(t=>(t=>async()=>{if("FINAL_PEER"!==t.name)return[t];const s=[];n.log("putProvider %s to %p",e,t.peer.id);try{n.log("sending provider record for %s to %p",e,t.peer.id);for await(const a of n.network.sendMessage(t.peer.id,i,r))"PEER_RESPONSE"===a.name&&(n.log("sent provider record for %s to %p",e,t.peer.id),o++),s.push(a)}catch(a){n.log.error("error sending provide record to peer %p",t.peer.id,a),s.push(Kce({from:t.peer.id,error:a},r))}return s})(t)))),(e=>qA(e,{ordered:!1,concurrency:jse})),(async function*(e){for await(const t of e)yield*t})),n.log("sent provider records to %d peers",o)}()}catch(r){return Promise.reject(r)}}async*findProviders(e,t){const n=this.routingTable.kBucketSize,r=e.multihash.bytes,i=this;this.log("findProviders %c",e);const o=await this.providers.getProviders(e);if(o.length>0){const e=[];for(const t of o.slice(0,n))try{const n=await this.components.peerStore.get(t);e.push({id:t,multiaddrs:n.addresses.map((e=>{let{multiaddr:t}=e;return t})),protocols:n.protocols})}catch(c){if("ERR_NOT_FOUND"!==c.code)throw c;this.log("no peer store entry for %p",t)}yield Uce({from:this.components.peerId,messageType:Pce.GET_PROVIDERS,providers:e},t),yield jce({from:this.components.peerId,providers:e},t)}if(o.length>=n)return;const s=function(e){try{let{peer:n,signal:o}=e;return async function*(){const e=new Nce(Pce.GET_PROVIDERS,r,0);yield*i.network.sendRequest(n,e,{...t,signal:o})}()}catch(n){return Promise.reject(n)}},a=new Set(o.map((e=>e.toString())));for await(const l of this.queryManager.run(r,s,t))if(yield l,"PEER_RESPONSE"===l.name){this.log("Found %d provider entries for %c and %d closer peers",l.providers.length,e,l.closer.length);const r=[];for(const e of l.providers)a.has(e.id.toString())||(a.add(e.id.toString()),r.push(e));if(r.length>0&&(yield jce({from:l.from,providers:r},t)),a.size===n)return}}}const ale=function(e){if(null!=e[Symbol.asyncIterator])return(async()=>{for await(const t of e)return t})();for(const t of e)return t};function cle(e){return null!=e[Symbol.asyncIterator]}const lle=e=>{const t=Bs.P$(e),n=(0,Us.E)(t);return Bs.cv(e,n),lle.bytes=t,n};function ule(e,t){var n,r;const i=null!==(r=(t=null!==(n=t)&&void 0!==n?n:{}).lengthEncoder)&&void 0!==r?r:lle;function*o(e){const t=i(e.byteLength);t instanceof Uint8Array?yield t:yield*t,e instanceof Uint8Array?yield e:yield*e}return cle(e)?async function*(){for await(const t of e)yield*o(t)}():function*(){for(const t of e)yield*o(t)}()}lle.bytes=0,ule.single=(e,t)=>{var n,r;const i=null!==(r=(t=null!==(n=t)&&void 0!==n?n:{}).lengthEncoder)&&void 0!==r?r:lle;return new Zs(i(e.byteLength),e)};var hle;!function(e){e[e.LENGTH=0]="LENGTH",e[e.DATA=1]="DATA"}(hle||(hle={}));const dle=e=>{const t=Bs.Jx(e);return dle.bytes=Bs.P$(t),t};function fle(e,t){var n,r,i;const o=new Zs;let s=hle.LENGTH,a=-1;const c=null!==(n=null===t||void 0===t?void 0:t.lengthDecoder)&&void 0!==n?n:dle,l=null!==(r=null===t||void 0===t?void 0:t.maxLengthLength)&&void 0!==r?r:8,u=null!==(i=null===t||void 0===t?void 0:t.maxDataLength)&&void 0!==i?i:4194304;function*h(){for(;o.byteLength>0;){if(s===hle.LENGTH)try{if(a=c(o),a<0)throw Xo()(new Error("invalid message length"),"ERR_INVALID_MSG_LENGTH");if(a>u)throw Xo()(new Error("message length too long"),"ERR_MSG_DATA_TOO_LONG");const e=c.bytes;o.consume(e),null!=(null===t||void 0===t?void 0:t.onLength)&&t.onLength(a),s=hle.DATA}catch(e){if(e instanceof RangeError){if(o.byteLength>l)throw Xo()(new Error("message length length too long"),"ERR_MSG_LENGTH_TOO_LONG");break}throw e}if(s===hle.DATA){if(o.byteLength<a)break;const e=o.sublist(0,a);o.consume(a),null!=(null===t||void 0===t?void 0:t.onData)&&t.onData(e),yield e,s=hle.LENGTH}}}return cle(e)?async function*(){for await(const t of e)o.append(t),yield*h();if(o.byteLength>0)throw Xo()(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}():function*(){for(const t of e)o.append(t),yield*h();if(o.byteLength>0)throw Xo()(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}()}dle.bytes=0,fle.fromReader=(e,t)=>{let n=1;return fle(async function*(){for(;;)try{const{done:t,value:r}=await e.next(n);if(!0===t)return;null!=r&&(yield r)}catch(t){if("ERR_UNDER_READ"===t.code)return{done:!0,value:null};throw t}finally{n=1}}(),{...null!==t&&void 0!==t?t:{},onLength:e=>{n=e}})};class ple extends Xoe{constructor(e,t){super(),(0,Yo.Z)(this,"log",void 0),(0,Yo.Z)(this,"protocol",void 0),(0,Yo.Z)(this,"running",void 0),(0,Yo.Z)(this,"components",void 0);const{protocol:n,lan:r}=t;this.components=e,this.log=xse("libp2p:kad-dht:".concat(r?"lan":"wan",":network")),this.running=!1,this.protocol=n}async start(){this.running||(this.running=!0)}async stop(){this.running=!1}isStarted(){return this.running}sendRequest(e,t){try{var n=this;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return async function*(){if(!n.running)return;n.log("sending %s to %p",t.type,e),yield zce({peer:e},r),yield Mce({to:e,type:t.type},r);try{const i=await n.components.connectionManager.openConnection(e,r),o=await i.newStream(n.protocol,r),s=await n._writeReadMessage(o,t.serialize(),r);yield Uce({from:e,messageType:s.type,closer:s.closerPeers,providers:s.providerPeers,record:s.record},r)}catch(i){yield Kce({from:e,error:i},r)}finally{0}}()}catch(r){return Promise.reject(r)}}sendMessage(e,t){try{var n=this;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return async function*(){if(!n.running)return;n.log("sending %s to %p",t.type,e),yield zce({peer:e},r),yield Mce({to:e,type:t.type},r);try{const i=await n.components.connectionManager.openConnection(e,r),o=await i.newStream(n.protocol,r);await n._writeMessage(o,t.serialize(),r),yield Uce({from:e,messageType:t.type},r)}catch(i){yield Kce({from:e,error:i},r)}finally{0}}()}catch(r){return Promise.reject(r)}}async _writeMessage(e,t,n){null!=n.signal&&(e=OF(e,n.signal)),await Yse([t],(e=>ule(e)),e,Pse)}async _writeReadMessage(e,t,n){null!=n.signal&&(e=OF(e,n.signal));const r=await Yse([t],(e=>ule(e)),e,(e=>fle(e)),(async e=>{const t=await ale(e);if(null!=t)return t;throw new qoe("No message received","ERR_NO_MESSAGE_RECEIVED")})),i=Nce.deserialize(r);return i.closerPeers.forEach((e=>{this.dispatchEvent(new ese("peer",{detail:e}))})),i.providerPeers.forEach((e=>{this.dispatchEvent(new ese("peer",{detail:e}))})),i}}const gle={get(){const e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:globalThis).crypto;if(null==e||null==e.subtle)throw Object.assign(new Error("Missing Web Crypto API. The most likely cause of this error is that this page is being accessed from an insecure context (i.e. not HTTPS). For more information and possible resolutions see https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api"),{code:"ERR_MISSING_WEB_CRYPTO"});return e}};const yle=32,mle=64,vle=32;function ble(e,t){const n=new Uint8Array(mle);for(let r=0;r<vle;r++)n[r]=e[r],n[vle+r]=t[r];return n}const wle={alg:"A128GCM",ext:!0,k:"scm9jmO_4BJAgdwWGVulLg",key_ops:["encrypt","decrypt"],kty:"oct"};function Ele(e){var t,n,r,i,o,s;const a=null!==(t=null===e||void 0===e?void 0:e.algorithm)&&void 0!==t?t:"AES-GCM";let c=null!==(n=null===e||void 0===e?void 0:e.keyLength)&&void 0!==n?n:16;const l=null!==(r=null===e||void 0===e?void 0:e.nonceLength)&&void 0!==r?r:12,u=null!==(i=null===e||void 0===e?void 0:e.digest)&&void 0!==i?i:"SHA-256",h=null!==(o=null===e||void 0===e?void 0:e.saltLength)&&void 0!==o?o:16,d=null!==(s=null===e||void 0===e?void 0:e.iterations)&&void 0!==s?s:32767,f=gle.get();c*=8;return{encrypt:async function(e,t){const n=f.getRandomValues(new Uint8Array(h)),r=f.getRandomValues(new Uint8Array(l)),i={name:a,iv:r};let o;if("string"===typeof t&&(t=(0,mu.m)(t)),0===t.length){o=await f.subtle.importKey("jwk",wle,{name:"AES-GCM"},!0,["encrypt"]);try{const e={name:"PBKDF2",salt:n,iterations:d,hash:{name:u}},r=await f.subtle.importKey("raw",t,{name:"PBKDF2"},!1,["deriveKey"]);o=await f.subtle.deriveKey(e,r,{name:a,length:c},!0,["encrypt"])}catch{o=await f.subtle.importKey("jwk",wle,{name:"AES-GCM"},!0,["encrypt"])}}else{const e={name:"PBKDF2",salt:n,iterations:d,hash:{name:u}},r=await f.subtle.importKey("raw",t,{name:"PBKDF2"},!1,["deriveKey"]);o=await f.subtle.deriveKey(e,r,{name:a,length:c},!0,["encrypt"])}const s=await f.subtle.encrypt(i,o,e);return(0,Ls.z)([n,i.iv,new Uint8Array(s)])},decrypt:async function(e,t){const n=e.subarray(0,h),r=e.subarray(h,h+l),i=e.subarray(h+l),o={name:a,iv:r};let s;if("string"===typeof t&&(t=(0,mu.m)(t)),0===t.length)try{const e={name:"PBKDF2",salt:n,iterations:d,hash:{name:u}},r=await f.subtle.importKey("raw",t,{name:"PBKDF2"},!1,["deriveKey"]);s=await f.subtle.deriveKey(e,r,{name:a,length:c},!0,["decrypt"])}catch{s=await f.subtle.importKey("jwk",wle,{name:"AES-GCM"},!0,["decrypt"])}else{const e={name:"PBKDF2",salt:n,iterations:d,hash:{name:u}},r=await f.subtle.importKey("raw",t,{name:"PBKDF2"},!1,["deriveKey"]);s=await f.subtle.deriveKey(e,r,{name:a,length:c},!0,["decrypt"])}const p=await f.subtle.decrypt(o,s,i);return new Uint8Array(p)}}}async function Ale(e,t){const n=Ele(),r=await n.encrypt(e,t);return Cse.encode(r)}var Sle,_le,Ile,Cle;!function(e){e.RSA="RSA",e.Ed25519="Ed25519",e.Secp256k1="Secp256k1"}(Sle||(Sle={})),function(e){e[e.RSA=0]="RSA",e[e.Ed25519=1]="Ed25519",e[e.Secp256k1=2]="Secp256k1"}(_le||(_le={})),function(e){e.codec=()=>bs(_le)}(Sle||(Sle={})),function(e){let t;e.codec=()=>(null==t&&(t=ws((function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!1!==n.lengthDelimited&&t.fork(),null!=e.Type&&(t.uint32(8),Sle.codec().encode(e.Type,t)),null!=e.Data&&(t.uint32(18),t.bytes(e.Data)),!1!==n.lengthDelimited&&t.ldelim()}),((e,t)=>{const n={},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:n.Type=Sle.codec().decode(e);break;case 2:n.Data=e.bytes();break;default:e.skipType(7&t)}}return n}))),t),e.encode=t=>fs(t,e.codec()),e.decode=t=>ds(t,e.codec())}(Ile||(Ile={})),function(e){let t;e.codec=()=>(null==t&&(t=ws((function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!1!==n.lengthDelimited&&t.fork(),null!=e.Type&&(t.uint32(8),Sle.codec().encode(e.Type,t)),null!=e.Data&&(t.uint32(18),t.bytes(e.Data)),!1!==n.lengthDelimited&&t.ldelim()}),((e,t)=>{const n={},r=null==t?e.len:e.pos+t;for(;e.pos<r;){const t=e.uint32();switch(t>>>3){case 1:n.Type=Sle.codec().decode(e);break;case 2:n.Data=e.bytes();break;default:e.skipType(7&t)}}return n}))),t),e.encode=t=>fs(t,e.codec()),e.decode=t=>ds(t,e.codec())}(Cle||(Cle={}));class Tle{constructor(e){(0,Yo.Z)(this,"_key",void 0),this._key=Ole(e,yle)}async verify(e,t){return async function(e,t,n){return Gl.verify(t,n,e)}(this._key,t,e)}marshal(){return this._key}get bytes(){return Ile.encode({Type:Sle.Ed25519,Data:this.marshal()}).subarray()}equals(e){return(0,Ms.f)(this.bytes,e.bytes)}async hash(){const{bytes:e}=await $ae.digest(this.bytes);return e}}class kle{constructor(e,t){(0,Yo.Z)(this,"_key",void 0),(0,Yo.Z)(this,"_publicKey",void 0),this._key=Ole(e,mle),this._publicKey=Ole(t,yle)}async sign(e){return async function(e,t){const n=e.subarray(0,vle);return Gl.sign(t,n)}(this._key,e)}get public(){return new Tle(this._publicKey)}marshal(){return this._key}get bytes(){return Cle.encode({Type:Sle.Ed25519,Data:this.marshal()}).subarray()}equals(e){return(0,Ms.f)(this.bytes,e.bytes)}async hash(){const{bytes:e}=await $ae.digest(this.bytes);return e}async id(){const e=Qae.digest(this.public.bytes);return _se.encode(e.bytes).substring(1)}async export(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"libp2p-key";if("libp2p-key"===t)return Ale(this.bytes,e);throw new qoe("export format '".concat(t,"' is not supported"),"ERR_INVALID_EXPORT_FORMAT")}}function Rle(e){if(e.length>mle){const t=(e=Ole(e,mle+yle)).subarray(0,mle),n=e.subarray(mle,e.length);return new kle(t,n)}const t=(e=Ole(e,mle)).subarray(0,mle),n=e.subarray(yle);return new kle(t,n)}function xle(e){return e=Ole(e,yle),new Tle(e)}async function Ple(){const{privateKey:e,publicKey:t}=await async function(){const e=Gl.utils.randomPrivateKey(),t=Gl.getPublicKey(e);return{privateKey:ble(e,t),publicKey:t}}();return new kle(e,t)}async function Dle(e){const{privateKey:t,publicKey:n}=await async function(e){if(e.length!==vle)throw new TypeError('"seed" must be 32 bytes in length.');if(!(e instanceof Uint8Array))throw new TypeError('"seed" must be a node.js Buffer, or Uint8Array.');const t=e,n=Gl.getPublicKey(t);return{privateKey:ble(t,n),publicKey:n}}(e);return new kle(t,n)}function Ole(e,t){var n;if((e=Uint8Array.from(null!==(n=e)&&void 0!==n?n:[])).length!==t)throw new qoe("Key must be a Uint8Array of length ".concat(t,", got ").concat(e.length),"ERR_INVALID_KEY_TYPE");return e}function Nle(e,t){let n=Uint8Array.from(e.abs().toByteArray());if(n=0===n[0]?n.subarray(1):n,null!=t){if(n.length>t)throw new Error("byte array longer than desired length");n=(0,Ls.z)([new Uint8Array(t-n.length),n])}return(0,Su.B)(n,"base64url")}function Ble(e){const t=Lle(e);return new(yu().jsbn.BigInteger)((0,Su.B)(t,"base16"),16)}function Lle(e,t){let n=(0,mu.m)(e,"base64urlpad");if(null!=t){if(n.length>t)throw new Error("byte array longer than desired length");n=(0,Ls.z)([new Uint8Array(t-n.length),n])}return n}const Mle={"P-256":256,"P-384":384,"P-521":521};Object.keys(Mle).join(" / ");function Ule(e){if(isNaN(e)||e<=0)throw new qoe("random bytes length must be a Number bigger than 0","ERR_INVALID_LENGTH");return Ic(e)}function Fle(e,t){return t.map((t=>Ble(e[t])))}async function Kle(e){const t=[await gle.get().subtle.importKey("jwk",e,{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!0,["sign"]),await Zle(e)],n=await jle({privateKey:t[0],publicKey:t[1]});return{privateKey:n[0],publicKey:n[1]}}async function jle(e){if(null==e.privateKey||null==e.publicKey)throw new qoe("Private and public key are required","ERR_INVALID_PARAMETERS");return Promise.all([gle.get().subtle.exportKey("jwk",e.privateKey),gle.get().subtle.exportKey("jwk",e.publicKey)])}async function Zle(e){return gle.get().subtle.importKey("jwk",{kty:e.kty,n:e.n,e:e.e},{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!0,["verify"])}function zle(e,t,n,r){const i=t?function(e){return yu().pki.setRsaPublicKey(...Fle(e,["n","e"]))}(e):function(e){return yu().pki.setRsaPrivateKey(...Fle(e,["n","e","d","p","q","dp","dq","qi"]))}(e),o=r((0,Su.B)(Uint8Array.from(n),"ascii"),i);return(0,mu.m)(o,"ascii")}function Vle(e){if("RSA"!==e.kty)throw new qoe("invalid key type","ERR_INVALID_KEY_TYPE");if(null==e.n)throw new qoe("invalid key modulus","ERR_INVALID_KEY_MODULUS");return 8*(0,mu.m)(e.n,"base64url").length}const Hle=8192;class qle{constructor(e){(0,Yo.Z)(this,"_key",void 0),this._key=e}async verify(e,t){return async function(e,t,n){const r=await gle.get().subtle.importKey("jwk",e,{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!1,["verify"]);return gle.get().subtle.verify({name:"RSASSA-PKCS1-v1_5"},r,t,n)}(this._key,t,e)}marshal(){return function(e){if(null==e.n||null==e.e)throw new qoe("JWK was missing components","ERR_INVALID_PARAMETERS");const t=yu().pki.publicKeyToAsn1({n:Ble(e.n),e:Ble(e.e)});return(0,mu.m)(yu().asn1.toDer(t).getBytes(),"ascii")}(this._key)}get bytes(){return Ile.encode({Type:Sle.RSA,Data:this.marshal()}).subarray()}encrypt(e){return zle(this._key,!0,e,((e,t)=>t.encrypt(e)))}equals(e){return(0,Ms.f)(this.bytes,e.bytes)}async hash(){const{bytes:e}=await $ae.digest(this.bytes);return e}}class Gle{constructor(e,t){(0,Yo.Z)(this,"_key",void 0),(0,Yo.Z)(this,"_publicKey",void 0),this._key=e,this._publicKey=t}genSecret(){return Ule(16)}async sign(e){return async function(e,t){const n=await gle.get().subtle.importKey("jwk",e,{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!1,["sign"]),r=await gle.get().subtle.sign({name:"RSASSA-PKCS1-v1_5"},n,Uint8Array.from(t));return new Uint8Array(r,0,r.byteLength)}(this._key,e)}get public(){if(null==this._publicKey)throw new qoe("public key not provided","ERR_PUBKEY_NOT_PROVIDED");return new qle(this._publicKey)}decrypt(e){return zle(this._key,!1,e,((e,t)=>t.decrypt(e)))}marshal(){return function(e){if(null==e.n||null==e.e||null==e.d||null==e.p||null==e.q||null==e.dp||null==e.dq||null==e.qi)throw new qoe("JWK was missing components","ERR_INVALID_PARAMETERS");const t=yu().pki.privateKeyToAsn1({n:Ble(e.n),e:Ble(e.e),d:Ble(e.d),p:Ble(e.p),q:Ble(e.q),dP:Ble(e.dp),dQ:Ble(e.dq),qInv:Ble(e.qi)});return(0,mu.m)(yu().asn1.toDer(t).getBytes(),"ascii")}(this._key)}get bytes(){return Cle.encode({Type:Sle.RSA,Data:this.marshal()}).subarray()}equals(e){return(0,Ms.f)(this.bytes,e.bytes)}async hash(){const{bytes:e}=await $ae.digest(this.bytes);return e}async id(){const e=await this.public.hash();return(0,Su.B)(e,"base58btc")}async export(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"pkcs-8";if("pkcs-8"===t){const t=new(yu().util.ByteBuffer)(this.marshal()),n=yu().asn1.fromDer(t),r=yu().pki.privateKeyFromAsn1(n),i={algorithm:"aes256",count:1e4,saltSize:16,prfAlgorithm:"sha512"};return yu().pki.encryptRsaPrivateKey(r,e,i)}if("libp2p-key"===t)return Ale(this.bytes,e);throw new qoe("export format '".concat(t,"' is not supported"),"ERR_INVALID_EXPORT_FORMAT")}}async function Wle(e){const t=function(e){const t=yu().asn1.fromDer((0,Su.B)(e,"ascii")),n=yu().pki.privateKeyFromAsn1(t);return{kty:"RSA",n:Nle(n.n),e:Nle(n.e),d:Nle(n.d),p:Nle(n.p),q:Nle(n.q),dp:Nle(n.dP),dq:Nle(n.dQ),qi:Nle(n.qInv),alg:"RS256"}}(e);if(Vle(t)>Hle)throw new qoe("key size is too large","ERR_KEY_SIZE_TOO_LARGE");const n=await Kle(t);return new Gle(n.privateKey,n.publicKey)}function Qle(e){const t=function(e){const t=yu().asn1.fromDer((0,Su.B)(e,"ascii")),n=yu().pki.publicKeyFromAsn1(t);return{kty:"RSA",n:Nle(n.n),e:Nle(n.e)}}(e);if(Vle(t)>Hle)throw new qoe("key size is too large","ERR_KEY_SIZE_TOO_LARGE");return new qle(t)}async function Yle(e){if(Vle(e)>Hle)throw new qoe("key size is too large","ERR_KEY_SIZE_TOO_LARGE");const t=await Kle(e);return new Gle(t.privateKey,t.publicKey)}async function Jle(e){if(e>Hle)throw new qoe("key size is too large","ERR_KEY_SIZE_TOO_LARGE");const t=await async function(e){const t=await gle.get().subtle.generateKey({name:"RSASSA-PKCS1-v1_5",modulusLength:e,publicExponent:new Uint8Array([1,0,1]),hash:{name:"SHA-256"}},!0,["sign","verify"]),n=await jle(t);return{privateKey:n[0],publicKey:n[1]}}(e);return new Gle(t.privateKey,t.publicKey)}function Xle(e){try{Ah.ProjectivePoint.fromHex(e)}catch(t){throw new qoe(String(t),"ERR_INVALID_PUBLIC_KEY")}}class $le{constructor(e){(0,Yo.Z)(this,"_key",void 0),Xle(e),this._key=e}async verify(e,t){return async function(e,t,n){try{const{digest:r}=await $ae.digest(n);return Ah.verify(t,r,e)}catch(r){throw new qoe(String(r),"ERR_INVALID_INPUT")}}(this._key,t,e)}marshal(){return e=this._key,Ah.ProjectivePoint.fromHex(e).toRawBytes(!0);var e}get bytes(){return Ile.encode({Type:Sle.Secp256k1,Data:this.marshal()}).subarray()}equals(e){return(0,Ms.f)(this.bytes,e.bytes)}async hash(){const{bytes:e}=await $ae.digest(this.bytes);return e}}class eue{constructor(e,t){(0,Yo.Z)(this,"_key",void 0),(0,Yo.Z)(this,"_publicKey",void 0),this._key=e,this._publicKey=null!==t&&void 0!==t?t:function(e){try{return Ah.getPublicKey(e,!0)}catch(t){throw new qoe(String(t),"ERR_INVALID_PRIVATE_KEY")}}(e),function(e){try{Ah.getPublicKey(e,!0)}catch(t){throw new qoe(String(t),"ERR_INVALID_PRIVATE_KEY")}}(this._key),Xle(this._publicKey)}async sign(e){return async function(e,t){const{digest:n}=await $ae.digest(t);try{return Ah.sign(n,e).toDERRawBytes()}catch(r){throw new qoe(String(r),"ERR_INVALID_INPUT")}}(this._key,e)}get public(){return new $le(this._publicKey)}marshal(){return this._key}get bytes(){return Cle.encode({Type:Sle.Secp256k1,Data:this.marshal()}).subarray()}equals(e){return(0,Ms.f)(this.bytes,e.bytes)}async hash(){const{bytes:e}=await $ae.digest(this.bytes);return e}async id(){const e=await this.public.hash();return(0,Su.B)(e,"base58btc")}async export(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"libp2p-key";if("libp2p-key"===t)return Ale(this.bytes,e);throw new qoe("export format '".concat(t,"' is not supported"),"ERR_INVALID_EXPORT_FORMAT")}}function tue(e){return new eue(e)}function nue(e){return new $le(e)}async function rue(){const e=Ah.utils.randomPrivateKey();return new eue(e)}const iue={rsa:Hr,ed25519:Vr,secp256k1:qr};function oue(e){const t=Object.keys(iue).join(" / ");return new qoe("invalid or unsupported key type ".concat(e,". Must be ").concat(t),"ERR_UNSUPPORTED_KEY_TYPE")}function sue(e){if("rsa"===(e=e.toLowerCase())||"ed25519"===e||"secp256k1"===e)return iue[e];throw oue(e)}function aue(e,t){var n;return sue(t=(null!==(n=t)&&void 0!==n?n:"rsa").toLowerCase()),e.bytes}function cue(e,t){if(null!=globalThis.Buffer)return globalThis.Buffer.compare(e,t);for(let n=0;n<e.byteLength;n++){if(e[n]<t[n])return-1;if(e[n]>t[n])return 1}return e.byteLength>t.byteLength?1:e.byteLength<t.byteLength?-1:0}var lue=n(81472);function uue(e,t){if(e.length!==t.length)throw new Error("Inputs should have the same length");const n=(0,Us.E)(e.length);for(let r=0;r<e.length;r++)n[r]=e[r]^t[r];return(0,lue.P)(n)}class hue{constructor(e,t){(0,Yo.Z)(this,"originDhtKey",void 0),(0,Yo.Z)(this,"capacity",void 0),(0,Yo.Z)(this,"peerDistances",void 0),this.originDhtKey=e,this.capacity=t,this.peerDistances=[]}get length(){return this.peerDistances.length}get peers(){return this.peerDistances.map((e=>e.peerId))}async add(e){if(null!=this.peerDistances.find((t=>t.peerId.equals(e))))return;const t=await nle(e),n={peerId:e,distance:uue(this.originDhtKey,t)};this.peerDistances.push(n),this.peerDistances.sort(((e,t)=>cue(e.distance,t.distance))),this.peerDistances=this.peerDistances.slice(0,this.capacity)}async anyCloser(e){if(0===e.length)return!1;if(0===this.length)return!0;const t=await Promise.all(e.map(nle)),n=this.peerDistances[this.peerDistances.length-1].distance;for(const r of t){if(cue(uue(this.originDhtKey,r),n)<0)return!0}return!1}}class due{constructor(e,t){(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"log",void 0),(0,Yo.Z)(this,"routingTable",void 0),(0,Yo.Z)(this,"network",void 0),(0,Yo.Z)(this,"validators",void 0),(0,Yo.Z)(this,"queryManager",void 0);const{routingTable:n,network:r,validators:i,queryManager:o,lan:s}=t;this.components=e,this.routingTable=n,this.network=r,this.validators=i,this.queryManager=o,this.log=xse("libp2p:kad-dht:".concat(s?"lan":"wan",":peer-routing"))}async findPeerLocal(e){let t;const n=await this.routingTable.find(e);if(null!=n){this.log("findPeerLocal found %p in routing table",e);try{t=await this.components.peerStore.get(n)}catch(r){if("ERR_NOT_FOUND"!==r.code)throw r}}if(null==t)try{t=await this.components.peerStore.get(e)}catch(r){if("ERR_NOT_FOUND"!==r.code)throw r}if(null!=t)return this.log("findPeerLocal found %p in peer store",e),{id:t.id,multiaddrs:t.addresses.map((e=>e.multiaddr)),protocols:[]}}_getValueSingle(e,t){try{var n=this;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return async function*(){const i=new Nce(Pce.GET_VALUE,t,0);yield*n.network.sendRequest(e,i,r)}()}catch(r){return Promise.reject(r)}}getPublicKeyFromNode(e){try{var t=this;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return async function*(){const r=function(e){return(0,Ls.z)([Xce,e.toBytes()])}(e);for await(const i of t._getValueSingle(e,r,n))if(yield i,"PEER_RESPONSE"===i.name&&null!=i.record){const t=await Ice(aue({bytes:i.record.value}));if(!t.equals(e))throw new qoe("public key does not match id","ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID");if(null==t.publicKey)throw new qoe("public key missing","ERR_PUBLIC_KEY_MISSING");yield Zce({from:e,value:t.publicKey},n)}throw new qoe("Node not responding with its public key: ".concat(e.toString()),"ERR_INVALID_RECORD")}()}catch(n){return Promise.reject(n)}}findPeer(e){try{var t=this;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return async function*(){t.log("findPeer %p",e);const r=await t.findPeerLocal(e);if(null!=r)return t.log("found local"),void(yield Fce({from:t.components.peerId,peer:r},n));const i=t,o=function(t){try{let{peer:r,signal:o}=t;return async function*(){const t=new Nce(Pce.FIND_NODE,e.toBytes(),0);for await(const s of i.network.sendRequest(r,t,{...n,signal:o}))if(yield s,"PEER_RESPONSE"===s.name){const t=s.closer.find((t=>t.id.equals(e)));null!=t&&(yield Fce({from:s.from,peer:t},n))}}()}catch(r){return Promise.reject(r)}};let s=!1;for await(const a of t.queryManager.run(e.toBytes(),o,n))"FINAL_PEER"===a.name&&(s=!0),yield a;s||(yield Kce({from:t.components.peerId,error:new qoe("Not found","ERR_NOT_FOUND")},n))}()}catch(n){return Promise.reject(n)}}getClosestPeers(e){try{var t=this;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return async function*(){t.log("getClosestPeers to %b",e);const r=await tle(e),i=t.routingTable.closestPeers(r),o=t,s=new hue(r,t.routingTable.kBucketSize);await Promise.all(i.map((async e=>{await s.add(e)})));const a=function(t){try{let{peer:r,signal:i}=t;return async function*(){o.log("closerPeersSingle %s from %p",(0,Su.B)(e,"base32"),r);const t=new Nce(Pce.FIND_NODE,e,0);yield*o.network.sendRequest(r,t,{...n,signal:i})}()}catch(r){return Promise.reject(r)}};for await(const l of t.queryManager.run(e,a,n))yield l,"PEER_RESPONSE"===l.name&&await Promise.all(l.closer.map((async e=>{await s.add(e.id)})));t.log("found %d peers close to %b",s.length,e);for(const e of s.peers)try{const r=await t.components.peerStore.get(e);yield Fce({from:t.components.peerId,peer:{id:e,multiaddrs:r.addresses.map((e=>{let{multiaddr:t}=e;return t})),protocols:r.protocols}},n)}catch(c){if("ERR_NOT_FOUND"!==c.code)throw c}}()}catch(n){return Promise.reject(n)}}getValueOrPeers(e,t){try{var n=this;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return async function*(){for await(const o of n._getValueSingle(e,t,r)){if("PEER_RESPONSE"===o.name&&null!=o.record)try{await n._verifyRecordOnline(o.record)}catch(i){const e="invalid record received, discarded";n.log(e),yield Kce({from:o.from,error:new qoe(e,"ERR_INVALID_RECORD")},r);continue}yield o}}()}catch(r){return Promise.reject(r)}}async _verifyRecordOnline(e){if(null==e.timeReceived)throw new qoe("invalid record received","ERR_INVALID_RECORD");await Hce(this.validators,new xce(e.key,e.value,e.timeReceived))}async getCloserPeersOffline(e,t){const n=await tle(e),r=this.routingTable.closestPeers(n),i=[];for(const s of r)if(!s.equals(t))try{const e=await this.components.peerStore.get(s);i.push({id:s,multiaddrs:e.addresses.map((e=>{let{multiaddr:t}=e;return t})),protocols:e.protocols})}catch(o){if("ERR_NOT_FOUND"!==o.code)throw o}return i.length>0?this.log("getCloserPeersOffline found %d peer(s) closer to %b than %p",i.length,e,t):this.log("getCloserPeersOffline could not find peer closer to %b than %p",e,t),i}}var fue=n(34737),pue=n.n(fue);const gue=xse("libp2p:kad-dht:providers");class yue{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"cache",void 0),(0,Yo.Z)(this,"cleanupInterval",void 0),(0,Yo.Z)(this,"provideValidity",void 0),(0,Yo.Z)(this,"syncQueue",void 0),(0,Yo.Z)(this,"started",void 0),(0,Yo.Z)(this,"cleaner",void 0);const{cacheSize:n,cleanupInterval:r,provideValidity:i}=t;this.components=e,this.cleanupInterval=null!==r&&void 0!==r?r:36e5,this.provideValidity=null!==i&&void 0!==i?i:864e5,this.cache=pue()(null!==n&&void 0!==n?n:256),this.syncQueue=new Fm.Z({concurrency:1}),this.started=!1}isStarted(){return this.started}async start(){this.started||(this.started=!0,this.cleaner=setInterval((()=>{this._cleanup().catch((e=>{gue.error(e)}))}),this.cleanupInterval))}async stop(){this.started=!1,null!=this.cleaner&&(clearInterval(this.cleaner),this.cleaner=void 0)}async _cleanup(){await this.syncQueue.add((async()=>{const e=Date.now();let t=0,n=0;const r=new Map,i=this.components.datastore.batch(),o=this.components.datastore.query({prefix:Fse});for await(const c of o)try{const{cid:e,peerId:o}=vue(c.key),a=bue(c.value).getTime(),l=Date.now(),u=l-a,h=u>this.provideValidity;if(gue("comparing: %d - %d = %d > %d %s",l,a,u,this.provideValidity,h?"(expired)":""),h){var s;n++,i.delete(c.key);const t=null!==(s=r.get(e))&&void 0!==s?s:new Set;t.add(o),r.set(e,t)}t++}catch(a){gue.error(a.message)}r.size>0?(gue("deleting %d / %d entries",n,t),await i.commit()):gue("nothing to delete");for(const[c,l]of r){const e=mue(c),t=this.cache.get(e);if(null!=t){for(const e of l)t.delete(e);0===t.size?this.cache.remove(e):this.cache.set(e,t)}}gue("Cleanup successful (%dms)",Date.now()-e)}))}async _getProvidersMap(e){const t=mue(e);let n=this.cache.get(t);return null==n&&(n=await async function(e,t){const n=new Map,r=e.query({prefix:mue(t)});for await(const i of r){const{peerId:e}=vue(i.key);n.set(e,bue(i.value))}return n}(this.components.datastore,e),this.cache.set(t,n)),n}async addProvider(e,t){await this.syncQueue.add((async()=>{gue("%p provides %s",t,e);const n=await this._getProvidersMap(e);gue("loaded %s provs",n.size);const r=new Date;n.set(t.toString(),r);const i=mue(e);this.cache.set(i,n),await async function(e,t,n,r){const i=[mue(t),"/",n.toString()].join(""),o=new Jce(i),s=Bs.cv(r.getTime());await e.put(o,s)}(this.components.datastore,e,t,r)}))}async getProviders(e){return this.syncQueue.add((async()=>{gue("get providers for %s",e);return[...(await this._getProvidersMap(e)).keys()].map((e=>Sce(e)))}),{throwOnTimeout:!0})}}function mue(e){const t="string"===typeof e?e:(0,Su.B)(e.multihash.bytes,"base32");return"".concat(Fse,"/").concat(t)}function vue(e){const t=e.toString().split("/");if(5!==t.length)throw new Error("incorrectly formatted provider entry key in datastore: ".concat(e.toString()));return{cid:t[3],peerId:t[4]}}function bue(e){return new Date(Bs.Jx(e))}function wue(e){const t=new globalThis.AbortController;function n(){t.abort();for(const t of e)null!=(null===t||void 0===t?void 0:t.removeEventListener)&&t.removeEventListener("abort",n)}for(const i of e){if(!0===(null===i||void 0===i?void 0:i.aborted)){n();break}null!=(null===i||void 0===i?void 0:i.addEventListener)&&i.addEventListener("abort",n)}const r=t.signal;return r.clear=function(){for(const t of e)null!=(null===t||void 0===t?void 0:t.removeEventListener)&&t.removeEventListener("abort",n)},r}const Eue=BigInt("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF");async function*Aue(e){const{key:t,startingPeer:n,ourPeerId:r,signal:i,query:o,alpha:s,pathIndex:a,numPaths:c,cleanUp:l,queryFuncTimeout:u,log:h,peersSeen:d}=e,f=new Fm.Z({concurrency:s}),p=await tle(t);!function n(s,l){if(null==s)return;d.add(s);const g=BigInt("0x"+(0,Su.B)(uue(l,p),"base16"));f.add((async()=>{const l=[i];null!=u&&l.push(AbortSignal.timeout(u));const y=wue(l);try{for await(const e of o({key:t,peer:s,signal:y,pathIndex:a,numPaths:c})){if(y.aborted)return;if("PEER_RESPONSE"===e.name)for(const i of e.closer){if(d.has(i.id)){h("already seen %p in query",i.id);continue}if(r.equals(i.id)){h("not querying ourselves");continue}const e=await nle(i.id);BigInt("0x"+(0,Su.B)(uue(e,p),"base16"))>g?h("skipping %p as they are not closer to %b than %p",i.id,t,s):(h("querying closer peer %p",i.id),n(i.id,e))}f.emit("completed",e)}}catch(m){if(!i.aborted)return Kce({from:s,error:m},e)}finally{y.clear()}}),{priority:Eue-g}).catch((e=>{h.error(e)}))}(n,await nle(n)),yield*async function*(e,t,n,r){const i=Bse({objectMode:!0}),o=t=>{r("clean up queue, results %d, queue size %d, pending tasks %d",i.readableLength,e.size,e.pending),e.clear(),i.end(t)},s=e=>{null!=e&&i.push(e)},a=e=>{r("queue error",e),o(e)},c=()=>{r("queue idle"),o()},l=()=>{r("abort queue"),o(new qoe("Query aborted","ERR_QUERY_ABORTED"))},u=()=>{o()};e.on("completed",s),e.on("error",a),e.on("idle",c),t.addEventListener("abort",l),n.addEventListener("cleanup",u);try{yield*i}finally{e.removeListener("completed",s),e.removeListener("error",a),e.removeListener("idle",c),t.removeEventListener("abort",l),n.removeEventListener("cleanup",u)}}(f,i,l,h)}class Sue{constructor(e,t){(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"lan",void 0),(0,Yo.Z)(this,"disjointPaths",void 0),(0,Yo.Z)(this,"alpha",void 0),(0,Yo.Z)(this,"shutDownController",void 0),(0,Yo.Z)(this,"running",void 0),(0,Yo.Z)(this,"queries",void 0),(0,Yo.Z)(this,"metrics",void 0),(0,Yo.Z)(this,"routingTable",void 0),(0,Yo.Z)(this,"initialQuerySelfHasRun",void 0);const{lan:n=!1,disjointPaths:r=Kse,alpha:i=jse}=t;this.components=e,this.disjointPaths=null!==r&&void 0!==r?r:Kse,this.running=!1,this.alpha=null!==i&&void 0!==i?i:jse,this.lan=n,this.queries=0,this.initialQuerySelfHasRun=t.initialQuerySelfHasRun,this.routingTable=t.routingTable,this.shutDownController=new AbortController,tse(1/0,this.shutDownController.signal)}isStarted(){return this.running}async start(){this.running=!0,null!=this.components.metrics&&null==this.metrics&&(this.metrics={runningQueries:this.components.metrics.registerMetric("libp2p_kad_dht_".concat(this.lan?"lan":"wan","_running_queries")),queryTime:this.components.metrics.registerMetric("libp2p_kad_dht_".concat(this.lan?"lan":"wan","_query_time_seconds"))})}async stop(){this.running=!1,this.shutDownController.abort()}run(e,t){try{var n=this;let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return async function*(i){if(!n.running)throw new Error("QueryManager not started");const o=null===(i=n.metrics)||void 0===i?void 0:i.queryTime.timer();if(null==r.signal){const e=AbortSignal.timeout(Gse);tse(1/0,e),r={...r,signal:e}}const s=wue([n.shutDownController.signal,r.signal]);tse(1/0,s);const a=xse("libp2p:kad-dht:".concat(n.lan?"lan":"wan",":query:")+(0,Su.B)(e,"base58btc")),c=Date.now(),l=new Xoe;try{var u;!0!==r.isSelfQuery&&null!=n.initialQuerySelfHasRun&&(a("waiting for initial query-self query before continuing"),await Promise.race([new Promise(((e,t)=>{s.addEventListener("abort",(()=>{t(new Hoe("Query was aborted before self-query ran"))}))})),n.initialQuerySelfHasRun.promise]),n.initialQuerySelfHasRun=void 0),a("query:start"),n.queries++,null===(u=n.metrics)||void 0===u||u.runningQueries.update(n.queries);const i=await tle(e),o=n.routingTable.closestPeers(i),c=o.slice(0,Math.min(n.disjointPaths,o.length));if(0===o.length)return void a.error("Running query with no peers");const h=new Ax,d=c.map(((i,o)=>Aue({key:e,startingPeer:i,ourPeerId:n.components.peerId,signal:s,query:t,pathIndex:o,numPaths:c.length,alpha:n.alpha,cleanUp:l,queryFuncTimeout:r.queryFuncTimeout,log:a,peersSeen:h,onProgress:r.onProgress})));for await(const e of Mse(...d))yield e,"QUERY_ERROR"===e.name&&a("error",e.error)}catch(d){if(n.running||"ERR_QUERY_ABORTED"!==d.code)throw d}finally{var h;s.clear(),n.queries--,null===(h=n.metrics)||void 0===h||h.runningQueries.update(n.queries),null!=o&&o(),l.dispatchEvent(new ese("cleanup")),a("query:done in %dms",Date.now()-c)}}()}catch(r){return Promise.reject(r)}}}const _ue=function(e){if(null!=e[Symbol.asyncIterator])return(async()=>{let t=0;for await(const n of e)t++;return t})();{let t=0;for(const n of e)t++;return t}};const Iue=function(e,t){return null!=e[Symbol.asyncIterator]?async function*(){let n=0;if(!(t<1))for await(const r of e)if(yield r,n++,n===t)return}():function*(){let n=0;if(!(t<1))for(const r of e)if(yield r,n++,n===t)return}()},Cue=e=>{const t=e.on||e.addListener||e.addEventListener,n=e.off||e.removeListener||e.removeEventListener;if(!t||!n)throw new TypeError("Emitter is not compatible");return{addListener:t.bind(e),removeListener:n.bind(e)}};function Tue(e,t,n){"function"===typeof n&&(n={filter:n});const r=function(e,t,n){let r;const i=new Promise(((i,o)=>{var s;if(!((n={rejectionEvents:["error"],multiArgs:!1,resolveImmediately:!1,...n}).count>=0)||n.count!==Number.POSITIVE_INFINITY&&!Number.isInteger(n.count))throw new TypeError("The `count` option should be at least 0 or more");null===(s=n.signal)||void 0===s||s.throwIfAborted();const a=[t].flat(),c=[],{addListener:l,removeListener:u}=Cue(e),h=function(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];const s=n.multiArgs?t:t[0];n.filter&&!n.filter(s)||(c.push(s),n.count===c.length&&(r(),i(c)))},d=e=>{r(),o(e)};r=()=>{for(const e of a)u(e,h);for(const e of n.rejectionEvents)u(e,d)};for(const e of a)l(e,h);for(const e of n.rejectionEvents)l(e,d);n.signal&&n.signal.addEventListener("abort",(()=>{d(n.signal.reason)}),{once:!0}),n.resolveImmediately&&i(c)}));if(i.cancel=r,"number"===typeof n.timeout){const e=hL(i,{milliseconds:n.timeout});return e.cancel=r,e}return i}(e,t,n={...n,count:1,resolveImmediately:!1}),i=r.then((e=>e[0]));return i.cancel=r.cancel,i}class kue{constructor(e,t){var n;(0,Yo.Z)(this,"log",void 0),(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"peerRouting",void 0),(0,Yo.Z)(this,"routingTable",void 0),(0,Yo.Z)(this,"count",void 0),(0,Yo.Z)(this,"interval",void 0),(0,Yo.Z)(this,"initialInterval",void 0),(0,Yo.Z)(this,"queryTimeout",void 0),(0,Yo.Z)(this,"started",void 0),(0,Yo.Z)(this,"timeoutId",void 0),(0,Yo.Z)(this,"controller",void 0),(0,Yo.Z)(this,"initialQuerySelfHasRun",void 0),(0,Yo.Z)(this,"querySelfPromise",void 0);const{peerRouting:r,lan:i,count:o,interval:s,queryTimeout:a,routingTable:c}=t;this.components=e,this.log=xse("libp2p:kad-dht:".concat(i?"lan":"wan",":query-self")),this.started=!1,this.peerRouting=r,this.routingTable=c,this.count=null!==o&&void 0!==o?o:Kse,this.interval=null!==s&&void 0!==s?s:Zse,this.initialInterval=null!==(n=t.initialInterval)&&void 0!==n?n:zse,this.queryTimeout=null!==a&&void 0!==a?a:Vse,this.initialQuerySelfHasRun=t.initialQuerySelfHasRun}isStarted(){return this.started}start(){this.started||(this.started=!0,clearTimeout(this.timeoutId),this.timeoutId=setTimeout((()=>{this.querySelf().catch((e=>{this.log.error("error running self-query",e)}))}),this.initialInterval))}stop(){this.started=!1,null!=this.timeoutId&&clearTimeout(this.timeoutId),null!=this.controller&&this.controller.abort()}async querySelf(){if(this.started){if(null!=this.querySelfPromise)return this.log("joining existing self query"),this.querySelfPromise.promise;if(this.querySelfPromise=Ws(),this.started){this.controller=new AbortController;const t=wue([this.controller.signal,AbortSignal.timeout(this.queryTimeout)]);tse(1/0,t);try{0===this.routingTable.size&&(this.log("routing table was empty, waiting for some peers before running query"),await Tue(this.routingTable,"peer:add",{signal:t})),this.log("run self-query, look for %d peers timing out after %dms",this.count,this.queryTimeout);const e=Date.now(),n=await Yse(this.peerRouting.getClosestPeers(this.components.peerId.toBytes(),{signal:t,isSelfQuery:!0}),(e=>Iue(e,this.count)),(async e=>_ue(e)));this.log("self-query found %d peers in %dms",n,Date.now()-e)}catch(e){this.log.error("self-query error",e)}finally{t.clear(),null!=this.initialQuerySelfHasRun&&(this.initialQuerySelfHasRun.resolve(),this.initialQuerySelfHasRun=void 0)}}this.querySelfPromise.resolve(),this.querySelfPromise=void 0,this.started&&(this.timeoutId=setTimeout((()=>{this.querySelf().catch((e=>{this.log.error("error running self-query",e)}))}),this.interval))}else this.log("skip self-query because we are not started")}}function Rue(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0,r=e.length;n<r;++n)if(e[n]!==t[n])return!1;return!0}function xue(e,t){if(!(t instanceof Uint8Array))throw new TypeError(e+" is not a Uint8Array")}class Pue extends Xoe{constructor(e){var t,n,r,i;super(),(0,Yo.Z)(this,"localNodeId",void 0),(0,Yo.Z)(this,"root",void 0),(0,Yo.Z)(this,"numberOfNodesPerKBucket",void 0),(0,Yo.Z)(this,"numberOfNodesToPing",void 0),(0,Yo.Z)(this,"distance",void 0),(0,Yo.Z)(this,"arbiter",void 0),this.localNodeId=e.localNodeId,this.numberOfNodesPerKBucket=null!==(t=e.numberOfNodesPerKBucket)&&void 0!==t?t:20,this.numberOfNodesToPing=null!==(n=e.numberOfNodesToPing)&&void 0!==n?n:3,this.distance=null!==(r=e.distance)&&void 0!==r?r:Pue.distance,this.arbiter=null!==(i=e.arbiter)&&void 0!==i?i:Pue.arbiter,xue("option.localNodeId as parameter 1",this.localNodeId),this.root={contacts:[],dontSplit:!1,left:null,right:null}}static arbiter(e,t){var n,r;return(null!==(n=e.vectorClock)&&void 0!==n?n:0)>(null!==(r=t.vectorClock)&&void 0!==r?r:0)?e:t}static distance(e,t){let n=0,r=0;const i=Math.min(e.length,t.length),o=Math.max(e.length,t.length);for(;r<i;++r)n=256*n+(e[r]^t[r]);for(;r<o;++r)n=256*n+255;return n}add(e){xue("contact.id",null===e||void 0===e?void 0:e.id);let t=0,n=this.root;for(;null===n.contacts;)n=this._determineNode(n,e.id,t++);const r=this._indexOf(n,e.id);return r>=0?(this._update(n,r,e),this):n.contacts.length<this.numberOfNodesPerKBucket?(n.contacts.push(e),this.safeDispatchEvent("added",{detail:e}),this):n.dontSplit?(this.safeDispatchEvent("ping",{detail:{oldContacts:n.contacts.slice(0,this.numberOfNodesToPing),newContact:e}}),this):(this._split(n,t),this.add(e))}closest(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1/0;if(xue("id",e),!Number.isInteger(t)&&t!==1/0||t<=0)throw new TypeError("n is not positive number");let n=[];for(let r=[this.root],i=0;r.length>0&&n.length<t;){const t=r.pop();if(null!=t)if(null===t.contacts){const n=this._determineNode(t,e,i++);r.push(t.left===n?t.right:t.left),r.push(n)}else n=n.concat(t.contacts)}return n.map((t=>({distance:this.distance(t.id,e),contact:t}))).sort(((e,t)=>e.distance-t.distance)).slice(0,t).map((e=>e.contact))}count(){let e=0;for(const t=[this.root];t.length>0;){const n=t.pop();null!=n&&(null===n.contacts?t.push(n.right,n.left):e+=n.contacts.length)}return e}_determineNode(e,t,n){const r=n>>3,i=n%8;if(t.length<=r&&0!==i)return e.left;return 0!==(t[r]&1<<7-i)?e.right:e.left}get(e){xue("id",e);let t=0,n=this.root;for(;null===n.contacts;)n=this._determineNode(n,e,t++);const r=this._indexOf(n,e);return r>=0?n.contacts[r]:void 0}_indexOf(e,t){for(let n=0;n<e.contacts.length;++n)if(Rue(e.contacts[n].id,t))return n;return-1}remove(e){xue("the id as parameter 1",e);let t=0,n=this.root;for(;null===n.contacts;)n=this._determineNode(n,e,t++);const r=this._indexOf(n,e);if(r>=0){const e=n.contacts.splice(r,1)[0];this.safeDispatchEvent("removed",{detail:e})}return this}_split(e,t){e.left={contacts:[],dontSplit:!1,left:null,right:null},e.right={contacts:[],dontSplit:!1,left:null,right:null};for(const r of e.contacts)this._determineNode(e,r.id,t).contacts.push(r);e.contacts=null;const n=this._determineNode(e,this.localNodeId,t);(e.left===n?e.right:e.left).dontSplit=!0}toArray(){let e=[];for(const t=[this.root];t.length>0;){const n=t.pop();null!=n&&(null===n.contacts?t.push(n.right,n.left):e=e.concat(n.contacts))}return e}*toIterable(){for(const e=[this.root];e.length>0;){const t=e.pop();null!=t&&(null===t.contacts?e.push(t.right,t.left):yield*t.contacts)}}_update(e,t,n){if(!Rue(e.contacts[t].id,n.id))throw new Error("wrong index for _update");const r=e.contacts[t],i=this.arbiter(r,n);i===r&&r!==n||(e.contacts.splice(t,1),e.contacts.push(i),this.safeDispatchEvent("updated",{detail:{incumbent:r,selection:i}}))}}class Due extends Xoe{constructor(e,t){super(),(0,Yo.Z)(this,"kBucketSize",void 0),(0,Yo.Z)(this,"kb",void 0),(0,Yo.Z)(this,"pingQueue",void 0),(0,Yo.Z)(this,"log",void 0),(0,Yo.Z)(this,"components",void 0),(0,Yo.Z)(this,"lan",void 0),(0,Yo.Z)(this,"pingTimeout",void 0),(0,Yo.Z)(this,"pingConcurrency",void 0),(0,Yo.Z)(this,"running",void 0),(0,Yo.Z)(this,"protocol",void 0),(0,Yo.Z)(this,"tagName",void 0),(0,Yo.Z)(this,"tagValue",void 0),(0,Yo.Z)(this,"metrics",void 0);const{kBucketSize:n,pingTimeout:r,lan:i,pingConcurrency:o,protocol:s,tagName:a,tagValue:c}=t;this.components=e,this.log=xse("libp2p:kad-dht:".concat(i?"lan":"wan",":routing-table")),this.kBucketSize=null!==n&&void 0!==n?n:20,this.pingTimeout=null!==r&&void 0!==r?r:1e4,this.pingConcurrency=null!==o&&void 0!==o?o:10,this.lan=i,this.running=!1,this.protocol=s,this.tagName=null!==a&&void 0!==a?a:"kad-close",this.tagValue=null!==c&&void 0!==c?c:50;const l=()=>{var e,t;null===(e=this.metrics)||void 0===e||e.pingQueueSize.update(this.pingQueue.size),null===(t=this.metrics)||void 0===t||t.pingRunning.update(this.pingQueue.pending)};this.pingQueue=new Fm.Z({concurrency:this.pingConcurrency}),this.pingQueue.addListener("add",l),this.pingQueue.addListener("next",l),this._onPing=this._onPing.bind(this)}isStarted(){return this.running}async start(){this.running=!0,null!=this.components.metrics&&(this.metrics={routingTableSize:this.components.metrics.registerMetric("libp2p_kad_dht_".concat(this.lan?"lan":"wan","_routing_table_size")),pingQueueSize:this.components.metrics.registerMetric("libp2p_kad_dht_".concat(this.lan?"lan":"wan","_ping_queue_size")),pingRunning:this.components.metrics.registerMetric("libp2p_kad_dht_".concat(this.lan?"lan":"wan","_ping_running"))});const e=new Pue({localNodeId:await nle(this.components.peerId),numberOfNodesPerKBucket:this.kBucketSize,numberOfNodesToPing:1});this.kb=e,e.addEventListener("ping",this._onPing),this._tagPeers(e)}async stop(){this.running=!1,this.pingQueue.clear(),this.kb=void 0}_tagPeers(e){let t=new Ax;const n=function(e){let t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;return()=>{clearTimeout(t),t=setTimeout((()=>{e()}),n)}}((()=>{const n=new Ax(e.closest(e.localNodeId,20).map((e=>e.peer))),r=n.difference(t),i=t.difference(n);Promise.resolve().then((async()=>{for(const e of r)await this.components.peerStore.merge(e,{tags:{[this.tagName]:{value:this.tagValue}}});for(const e of i)await this.components.peerStore.merge(e,{tags:{[this.tagName]:void 0}})})).catch((e=>{this.log.error("Could not update peer tags",e)})),t=n}));e.addEventListener("added",(e=>{n(),this.safeDispatchEvent("peer:add",{detail:e.detail.peer})})),e.addEventListener("removed",(e=>{n(),this.safeDispatchEvent("peer:remove",{detail:e.detail.peer})}))}_onPing(e){const{oldContacts:t,newContact:n}=e.detail;this.pingQueue.add((async()=>{if(!this.running)return;let e=0;try{await Promise.all(t.map((async t=>{try{const n={signal:AbortSignal.timeout(this.pingTimeout)};this.log("pinging old contact %p",t.peer);const r=await this.components.connectionManager.openConnection(t.peer,n),i=await r.newStream(this.protocol,n);await i.close(),e++}catch(r){this.running&&null!=this.kb&&(this.log.error("could not ping peer %p",t.peer,r),this.log("evicting old contact after ping failed %p",t.peer),this.kb.remove(t.id))}finally{var n;null===(n=this.metrics)||void 0===n||n.routingTableSize.update(this.size)}}))),this.running&&e<t.length&&null!=this.kb&&(this.log("adding new contact %p",n.peer),this.kb.add(n))}catch(r){this.log.error("could not process k-bucket ping event",r)}})).catch((e=>{this.log.error("could not process k-bucket ping event",e)}))}get size(){return null==this.kb?0:this.kb.count()}async find(e){const t=await nle(e),n=this.closestPeer(t);if(null!=n&&e.equals(n))return n}closestPeer(e){const t=this.closestPeers(e,1);if(t.length>0)return t[0]}closestPeers(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.kBucketSize;if(null==this.kb)return[];return this.kb.closest(e,t).map((e=>e.peer))}async add(e){var t;if(null==this.kb)throw new Error("RoutingTable is not started");const n=await nle(e);this.kb.add({id:n,peer:e}),this.log("added %p with kad id %b",e,n),null===(t=this.metrics)||void 0===t||t.routingTableSize.update(this.size)}async remove(e){var t;if(null==this.kb)throw new Error("RoutingTable is not started");const n=await nle(e);this.kb.remove(n),null===(t=this.metrics)||void 0===t||t.routingTableSize.update(this.size)}}const Oue=[77591,22417,43971,28421,740,29829,71467,228973,196661,78537,27689,36431,44415,14362,19456,106025,96308,2882,49509,21149,87173,131409,75844,23676,121838,30291,17492,2953,7564,110620,129477,127283,53113,72417,165166,109690,21200,102125,24049,71504,90342,25307,72039,26812,26715,32264,133800,71161,88956,171987,51779,24425,16671,30251,186294,247761,14202,2121,8465,35024,4876,85917,169730,3638,256836,96184,943,18678,6583,52907,35807,112254,214097,18796,11595,9243,23554,887,268203,382004,24590,111335,11625,16619,29039,102425,69006,97976,92362,32552,63717,41433,128974,137630,59943,10019,13986,35430,33665,108037,43799,43280,38195,29078,58629,18265,14425,46832,235538,40830,77881,110717,58937,3463,325358,51300,47623,117252,19007,10170,20540,91237,294813,4951,79841,56232,36270,128547,69209,66275,100156,32063,73531,34439,80937,28892,44466,88595,216307,32583,49620,16605,82127,45807,21630,78726,20235,40163,111007,96926,5567,72083,21665,58844,39419,179767,48328,42662,51550,5251,37811,49608,81056,50854,55513,20922,18891,197409,164656,32593,71449,220474,58919,85682,67854,13758,35066,3565,61905,214793,119572,141419,21504,10302,27354,67003,46131,32668,15165,64871,34450,17821,2757,11452,34189,5160,12257,85523,560,53385,65887,119549,135620,312353,115979,122356,10867,193231,124537,54783,90675,120791,4715,142253,50943,17271,43358,25331,4917,120566,34580,12878,33786,160528,32523,4869,301307,104817,81491,23276,8832,97911,31265,52065,7998,49622,9715,43998,34091,84587,20664,69041,29419,53205,10838,58288,116145,6185,5154,141795,35924,21307,144738,43730,12085,8279,10002,119,133779,199668,72938,31768,39176,67875,38453,9700,44144,4121,116048,41733,12868,82669,92308,128,34262,11332,7712,90764,36141,13553,71312,77470,117314,96549,49135,23602,54468,28605,6327,62308,17171,67531,21319,14105,894,107722,46157,8503,51069,100472,45138,15246,14577,35609,191464,1757,13364,161349,32067,91705,81144,52339,5408,91066,21983,14157,100545,4372,26630,129112,1423,29676,213626,4397,88436,99190,6877,49958,26122,114348,60661,29818,293118,50042,179738,16400,163423,89627,31040,43973,36638,45952,5153,1894,109322,1898,134021,12402,112077,68309,190269,69866,31938,107383,11522,105232,11248,14868,39852,71707,186525,16530,38162,106212,11700,5130,16608,26998,59586,108399,230033,43683,48135,82179,2073,5015,196684,189293,16378,23452,8301,35640,11632,214551,29240,57644,33137,91949,55157,52384,117313,5090,17717,89668,49363,82238,241035,66216,29066,184088,97206,62820,26595,4241,135635,173672,8202,459,71355,146294,29587,3008,135385,141203,14803,6634,45094,69362,50925,546,51884,62011,83296,234584,44515,56050,89476,87751,19373,12691,149923,19794,13833,35846,87557,58339,2884,19145,25647,12224,11024,77338,64608,122297,53025,7205,36189,36294,170779,21750,7739,173883,75192,35664,224240,113121,30181,26267,27036,117827,92015,106516,55628,203549,67949,60462,60844,35911,20457,1820,920,19773,8738,73173,181993,38521,98254,76257,46008,92796,5384,26868,151566,22124,2411,15919,186872,180021,28099,152961,78811,80237,62352,102653,74259,184890,16792,123702,224945,29940,19512,75283,14059,112691,92811,233329,20411,138569,53341,109802,50600,134528,66747,5529,166531,31578,64732,67189,1596,126357,967,167999,206598,109752,119431,207825,78791,91938,10301,27311,24233,252343,28831,32812,66002,112267,90895,8786,8095,16824,22866,21813,60507,174833,19549,130985,117051,52110,6938,81923,123864,38061,919,18680,53534,46739,112893,161529,85429,26761,11900,81121,91968,15390,217947,56524,1713,6654,37089,85630,138866,61850,16491,75577,16884,98296,73523,6140,44645,6062,36366,29844,57946,37932,42472,5266,20834,19309,33753,127182,134259,35810,41805,45878,312001,14881,47757,49251,120050,44252,3708,25856,107864,120347,1228,36550,41682,34496,47025,8393,173365,246526,12894,161607,35670,90785,126572,2095,124731,157033,58694,554,12786,9642,4817,16136,47864,174698,66992,4639,69284,10625,40710,27763,51738,30404,264105,137904,109882,52487,42824,57514,2740,10479,146799,107390,16586,88038,174951,9410,16185,44158,5568,40658,46108,12763,97385,26175,108859,664,230732,67470,46663,14395,50750,141320,93140,15361,47997,55784,6791,307840,118569,107326,18056,58281,260415,54691,8790,73332,45633,7511,45674,143373,14031,11799,94491,35646,96544,14560,26049,32983,25791,83814,42094,231370,63955,139212,2359,169908,3108,183486,105867,28197,32941,124968,26402,88267,149768,23053,3078,19091,52924,25383,19209,111548,97361,3959,24880,235061,9099,24921,161254,151405,20508,7159,34381,20133,11434,74036,19974,34769,36585,1076,22454,17354,38727,235160,111547,96454,117448,156940,91330,37299,7310,26915,117060,51369,22620,61861,322264,106850,111694,15091,2624,40345,300446,177064,1707,27389,54792,327783,132669,183543,59003,17744,20603,151134,106923,53084,71803,279424,319816,11579,21946,16728,38274,72711,5085,83391,88646,40159,25027,34680,10752,12988,54126,30365,18338,100445,230674,44874,84974,143877,123253,139372,28082,91477,144002,13096,219729,46016,50029,42377,14601,6660,58244,58978,23918,88206,113611,64452,17541,41032,10942,12021,49189,10978,40175,37156,10947,71709,106894,112538,57007,137486,150608,152719,40615,7746,279716,13101,19524,28708,40578,72320,1096,182051,94527,51275,22833,45164,81917,77519,48508,5421,140302,37845,149830,5587,27579,5357,428725,248187,6326,206760,39814,32585,89923,44341,288753,284443,96368,31201,94189,119504,20359,52073,103216,179,27934,32801,96035,34111,34309,101326,18198,20704,210266,37643,27880,141873,106e3,19414,56614,167714,66483,107885,86602,4379,20796,75467,4987,5017,118857,26003,34308,114428,29198,6686,29697,73632,3739,69795,16798,41504,7207,30722,21436,36735,28067,28545,3239,11221,36031,41889,100010,19247,317673,29495,174554,6424,129725,53845,94986,7955,59676,2604,191497,19735,102214,62954,23844,11872,179525,261436,34492,428,78404,142035,16747,17246,27578,37021,33672,57944,26056,135760,2369,61674,122066,31327,19374,157065,40553,130982,69619,71290,38855,72100,92903,95940,51422,165999,65713,57873,50726,7288,20272,2081,42326,22624,81120,57914,79352,19447,1684,72302,11774,302559,161481,96396,13692,414988,3721,79066,56627,46883,21150,11747,12184,5856,113458,176117,84416,52079,27933,3354,59765,141359,2212,216309,2555,23458,196722,142463,45701,44548,28798,19418,215,29916,9396,10574,114226,84475,13520,18694,34056,4524,90302,62930,13539,19407,77209,7728,38088,9535,2263,23875,183945,17750,26274,67172,10585,28042,22199,7478,51331,66030,26774,192929,31434,25850,50197,52926,178158,4679,181256,70184,229600,9959,105594,72158,73974,2726,35085,78087,23284,35568,51713,155676,5401,27254,11966,17569,223253,71993,103357,111477,55722,30504,26034,46774,35392,36285,214814,41143,163465,1051,16094,81044,6636,76489,179102,20712,39178,35683,125177,54219,30617,52994,25324,50123,2543,87529,58995,10688,125199,12388,60158,125481,131646,7642,133350,65874,3438,97277,101450,10075,56344,116821,50778,60547,98016,106135,13859,14255,16300,77373,173521,8285,45932,37426,4054,114295,55947,7703,39114,52,51119,128135,19714,60715,9554,50492,88180,2823,118271,52993,122625,97919,23859,37895,25040,33614,32102,20431,3577,9275,15686,43031,157741,110358,1884,40291,125391,13736,5008,64881,87336,77381,70711,43032,49155,118587,70494,4318,10168,30126,12580,10524,280104,104001,145413,2862,84140,6603,106005,13566,12780,11251,42830,571,179910,82443,13146,469,42714,32591,265217,424024,92553,54721,134100,6007,15242,114681,59030,16718,85465,200214,85982,55174,165013,23493,56964,82529,109150,32706,27568,82442,5350,14976,13165,44890,60021,21343,33978,17264,4655,22328,27819,75730,16567,55483,14510,17926,45827,150609,3704,7385,272531,161543,76904,122163,52405,2039,19165,41623,14423,228354,3369,176360,85491,7122,35789,303724,4465,13628,2233,55311,118771,20713,10006,221519,45115,71021,35650,29775,7337,10864,20665,21142,1746,15080,1624,32449,10905,105743,229797,7701,3940,22997,178467,57208,389057,39683,59403,63344,63125,54847,69691,18336,56448,3362,37202,18282,29648,138224,35867,10495,5911,28814,26653,31514,176702,26550,45621,11734,4525,40543,73944,121080,27858,155561,14887,44670,30742,8796,107455,113472,56369,75581,183777,240095,133699,153299,8768,160464,26058,49078,103971,21875,71486,44888,17156,9678,89541,123019,102337,3972,83930,21245,87852,109660,287918,183019,686,10100,39177,283941,11274,24736,26793,26214,25995,77011,141580,4070,23742,46285,46632,30700,26669,19056,35951,115575,174034,56097,35463,87425,24575,44245,38701,82317,85922,281616,100333,147697,61503,7730,84330,8530,59917,61597,17173,9092,32658,90288,193136,39023,20381,56654,31132,7779,1919,1375,117128,30819,11169,40938,23935,115201,101155,151034,4835,11231,74550,89388,59951,91704,107312,167882,115062,12732,72738,88703,464019,158267,57995,60496,737,14371,123867,4174,243339,159946,7568,16025,134556,110916,38103,191,80226,88794,29688,27230,10454,76308,57647,77409,113483,66864,14745,19808,12023,46583,84805,16015,17102,2231,20611,3547,95740,250131,34559,108894,8498,15853,159169,148920,20942,2813,93160,45188,210613,45531,52587,149062,39782,28194,57849,60965,84954,89766,84453,100927,16501,27658,165311,103841,54192,207341,19558,20084,319622,5672,205467,98462,61849,36279,13609,147177,24726,165015,209489,59591,31157,6551,117580,75060,141146,277310,21072,22023,106474,63041,137443,122965,68371,5383,42146,98961,113467,30863,23794,4843,99630,30392,82679,13699,241612,33601,93146,24319,18643,32155,95669,40440,15333,34089,67799,142144,58245,38633,114531,117400,77861,188726,5507,2568,8853,10987,107222,2663,2421,11530,13345,30075,41785,118661,104786,17459,12490,16281,71936,193555,17431,5944,71758,26485,77317,20803,367167,158,7362,93430,11735,172445,46002,11532,54482,930,62911,2235,23004,179236,4764,101859,208113,22477,55163,95579,14098,67320,162556,90709,156949,3826,57492,4025,34092,87442,104565,6718,186015,28214,14209,10039,107186,233912,58877,81637,55265,39828,6194,145813,50831,105849,4974,88319,122296,10272,197216,95714,51540,72418,23324,91555,8743,140452,250249,51666,34124,7229,38592,129641,78169,174242,22464,149964,51450,14034,10026,95376,26190,120062,14401,8700,265,31386,143573,7203,229889,61567,4227,140981,2466,72052,10787,10062,30958,6099,38471,30103,23202,208101,70847,467,58934,32271,32984,36637,24107,30771,17109,73353,13650,2098,157040,67366,66904,106018,265380,107238,18535,44025,32681,144983,62505,91295,56120,3082,77508,10322,63023,36700,81885,224127,16721,45023,239261,111272,13852,7866,149243,204199,32309,22084,42029,38316,126644,104973,14406,43454,67322,61310,15789,40285,24026,181047,6301,70927,23319,115823,27248,66693,115875,278566,63007,146844,56841,59007,87368,180001,22370,42114,80605,12022,10374,308,25079,14689,12618,63368,7936,264973,212291,136713,95999,105801,18965,32075,48700,52230,35119,96912,32992,8586,16606,101333,101812,14969,39930,759,193090,27387,42914,12937,5058,62646,64528,38624,25743,37502,3716,4435,30352,178687,26461,132611,42002,138442,35833,59582,16345,8048,60319,49349,309,47800,49739,90482,26405,34470,63786,32479,85028,39866,47846,11649,23934,29466,2816,42864,31828,7410,74885,49632,47629,111801,90749,19536,18767,105764,59606,21223,10746,76298,22220,39408,7190,79654,64856,11602,82156,272765,17079,70089,245473,51813,184407,384678,1576,122249,5064,27481,6188,25790,74361,27541,318284,45430,31488,620,93579,45723,192118,22670,51913,4162,70244,35966,26397,16199,50899,209613,121702,287507,2993,36101,132229,67345,33062,76295,118628,78705,52316,34375,107083,107454,44863,127561,33964,3073,154010,190914,55967,39074,6272,31047,5550,41123,26154,98638,47110,19998,148091,50229,31329,59900,195442,19106,61347,73497,70015,682,45850,25776,38022,148951,6288,37411,232526,109277,27286,32342,9262,5220,16651,23175,46740,129438,78614,121925,66914,88710,127952,5563,21500,34521,10739,14863,191006,62956,17359,16749,67027,56284,69134,43301,35039,58883,54466,60823,404451,75743,59856,86979,7923,34273,83785,32142,7693,268986,197428,282681,17049,22346,22990,92245,107180,3357,37104,96724,49153,7683,31197,43267,82231,164276,23696,20848,188364,22309,24821,158707,1018,22514,70922,27792,45589,59709,10765,736,35218,63479,51987,24275,63588,55361,92929,81964,4658,20122,12330,44058,13065,311456,72224,8337,211229,38979,22590,138478,52757,32595,133600,8838,31549,94412,43391,90056,1585,94802,127271,6223,31889,137038,132910,2165,57616,230152,6080,10748,36737,74579,134062,50525,180532,119270,34556,76155,82394,52595,29258,31435,87820,67996,26943,183878,38007,2410,13526,180297,69856,3503,187396,167700,7838,16701,9199,56267,3661,37407,65994,23767,5708,62508,221700,67088,86978,46776,84434,32088,5612,9149,88244,21685,95151,46750,189612,2979,506311,2594,3628,40074,105039,78243,28523,6651,38058,71999,30992,12764,68261,108991,6165,26450,61961,13400,22426,7490,60890,109623,2070,12958,50355,67979,257096,7213,42578,52121,35716,65461,7516,124758,39268,302,64712,14977,1467,219452,2840,34229,11121,21602,19270,63574,8024,1532,17331,79839,78885,52029,180767,57957,6069,91265,61380,55767,8927,32881,287603,22149,35029,68876,6428,199567,46926,13412,104132,21434,366616,45060,110046,81924,128910,45886,52821,130416,29416,77342,21762,67329,121432,79924,11724,38625,81006,102033,28338,13326,3250,82056,82526,38212,21112,12382,111495,3263,7414,86274,93490,40844,30224,45212,24019,48411,71367,24941,76729,57776,3769,38114,202019,197745,31953,237533,33270,201580,255648,100798,44741,32241,98468,106931,10085,15090,170358,33154,66787,18819,69760,25061,234005,82660,6295,131975,16874,9076,4094,25005,17740,40908,19533,220019,44330,99792,50040,19619,13950,55228,24423,31253,95308,103177,184795,28590,82285,5059,3210,75525,49894,70007,56178,10580,36051,139681,21617,98736,3555,106306,164189,37352,63915,47824,24883,145530,61904,28444,11483,19837,145446,30420,112972,85939,11835,191233,2262,20705,58630,1753,148334,1197,144714,6887,11223,107667,60879,77914,4151,57417,81594,96681,169430,1784,20444,95138,254041,27038,596,7117,72808,13759,3353,126776,21074,55322,27081,36942,39547,139830,179275,4453,713,8722,71399,19204,25785,22794,23923,104114,11291,25458,102309,88396,75288,230440,206396,104551,58447,130857,37247,94734,31548,176529,226077,65159,20104,10096,66881,94191,237909,27109,37404,1520,27421,25220,113003,23423,24884,50585,6286,231877,150800,11789,3226,90004,60642,5053,202400,61442,132531,175329,57138,30116,103847,9973,75367,16452,32360,59119,21246,10191,164804,23305,61051,37348,154530,13214,5468,50403,66754,130976,50559,80515,14436,155492,84017,5472,43107,41240,2890,90431,70188,382,76234,48040,50211,281038,237007,32115,142178,1536,22761,96429,1811,31243,1679,49143,55209,17402,235054,61494,7462,77030,34925,87609,78002,9499,9027,73289,201078,101379,63544,27666,5469,10642,30029,49816,132979,95620,58086,351930,116300,2110,2043,30845,6154,11279,16727,4122,2277,27281,4971,3650,39060,61970,65951,39674,75686,38151,11370,130809,177895,32665,63725,122267,7857,39618,118483,44792,157755,178624,136994,24260,41308,22471,12404,21707,12486,30473,52781,50246,20247,39065,909,56825,103158,128603,31542,1089,41935,32744,12428,37963,84420,33134,72921,208449,42622,168151,127335,147107,46699,38216,12591,94342,85814,31423,24944,2605,87542,67473,192551,4496,56321,91819,17630,6300,256183,114569,202090,33209,35289,34897,24967,40520,43470,5344,10199,34810,14283,10381,10017,62923,49924,23233,64539,13051,35686,19698,11570,135555,120868,44924,87065,52318,52335,47586,140906,245885,109834,78668,9065,46990,25258,72022,61243,40838,4545,146387,10537,11557,17470,36930,68104,46711,24264,79401,81043,18225,120488,24746,84338,81652,28266,13776,21878,46973,1047,230465,73357,95777,24973,210160,62210,58404,110633,169651,6937,41870,9909,26822,191062,76553,27519,96256,239070,2478,205678,67955,58532,20601,50120,19148,78501,195724,110740,8249,109665,27446,30568,57631,31425,49752,32820,65504,50079,3663,102256,219898,23849,211315,14645,4359,91767,9528,12449,49366,7941,49763,107848,8930,27086,50686,9744,10447,81935,39513,46514,1670,29229,6172,22312,137280,97759,9806,14445,22976,56458,73391,34983,93760,174219,52573,33149,59747,2429,136277,75123,165263,91040,7446,57632,48633,97140,246081,84766,151684,79918,93268,120346,54059,54875,77858,32996,103590,45276,11968,19600,25849,17159,132907,42828,16817,4913,99462,103303,27395,5737,74184,20749,21160,14377,77062,131403,158735,10999,27799,77785,9320,34366,51593,61070,33746,47048,29268,36675,30262,53297,9832,82e3,20188,122292,39917,7331,18160,68301,185935,134830,15031,4935,10004,165845,185534,46923,30109,44134,122631,18874,22903,112790,26561,18549,348902,82871,140345,255565,135390,63556,103747,145055,179600,145662,296111,61661,211987,23952,52342,126343,48450,32919,44277,82185,9591,62139,205363,376969,394874,108461,18040,120885,14798,39863,16571,16794,58271,81025,55206,14640,118656,6361,44092,85970,6262,153863,108244,180200,72264,79947,38044,10050,5735,61221,80712,5471,115689,11391,11661,184257,20010,60116,30320,19327,134598,45455,27542,18004,125092,452272,1549,91523,46567,180063,156026,2608,11174,58848,37788,65907,80194,30490,5786,40775,119519,106241,11323,156297,8425,61495,2617,29675,2425,59886,112582,49142,59618,4863,50597,86710,50650,168632,27693,85641,83643,18993,25768,84284,28090,93592,36627,312804,43381,9887,9402,100931,97165,3311,173330,66805,28935,4963,184460,3201,78102,19126,21607,37496,24938,22615,16153,32862,134792,153318,61120,6067,2812,12826,12792,23825,37559,64662,202250,102694,155488,85881,149193,46233,65383,15521,106982,11358,176786,25752,39717,34208,24510,32464,77742,39371,72028,138229,60688,71386,102834,132477,2208,11548,63670,271279,28351,30338,38620,32491,99845,143885,152266,13252,2825,178663,108097,1775,78201,14897,113573,163346,62292,171129,22183,96598,38733,64971,166776,117445,9968,146393,44677,74867,20908,97328,12761,25656,26785,9148,112344,26115,99176,110121,22437,49547,6180,79320,5835,31392,43328,33377,75870,119860,69497,80273,7325,155219,43167,111173,28347,20222,3763,71752,55041,47252,14618,28088,15012,97805,194698,54636,2036,41349,6173,96604,61530,51859,43782,13361,24334,22668,24792,7070,23441,16789,3209,36211,208475,26242,32880,122181,182407,21444,31060,88459,29929,77907,12716,10934,97005,20599,31690,8403,58445,30303,22700,10336,86731,103115,337709,72556,46788,112566,47684,67089,53548,36874,56487,41387,125985,26893,40071,106683,73712,18787,40105,72992,67246,137276,50802,36790,70328,138827,22466,39263,183295,29858,50975,9322,57397,10654,24364,30383,55799,41600,23584,127295,296610,129078,143558,244131,86397,36049,1085,80677,3820,108139,5476,34767,24683,7758,13060,7239,131671,250593,59556,103392,29810,4188,252323,39404,116877,7651,43600,40338,13554,157253,39196,25978,144387,61211,234,50104,6129,10449,93777,9240,356378,274148,4439,72970,3724,147770,78680,62570,115877,40027,40547,36817,224392,64609,34795,165027,67440,2477,37206,23431,50754,164797,46018,94995,170982,27051,7957,22767,3674,27900,56419,18930,60701,41302,2692,84749,339721,61996,111094,80221,50129,1045,8153,62945,19202,8250,37208,37418,32560,79477,41106,88569,33963,36693,5892,30570,1581,66471,49647,11922,160717,29442,5643,114865,82962,95982,132098,22633,22838,94726,54556,28566,205039,162340,33216,16849,35847,221339,94851,26533,71469,1805,3804,12935,45483,71020,36310,65381,192960,34240,35165,59773,1248,46954,155332,96864,4246,388800,16129,57133,74592,44807,442014,38203,42574,80818,91592,26377,36424,65760,977,77387,22628,147610,28018,30561,98454,6969,119628,63648,18170,36854,26601,64018,22027,37279,51395,152934,21153,9430,58760,194742,5330,55115,34158,28917,174111,13171,122326,1526,43896,66094,25325,4234,148354,11450,275,18999,112191,44365,22723,68409,8733,57746,96565,75007,14196,108844,29475,88599,177563,100792,106156,86323,93726,14248,135341,194131,40126,47099,14779,8272,39597,95983,171398,65882,28052,10393,47213,40689,22120,72212,106829,34964,109146,753,648,21660,30047,17527,181025,5619,145357,4085,216883,9359,186951,24779,53931,24545,36197,223296,62628,168101,4243,107313,30321,26642,13049,51059,31027,107912,807,73550,26551,84369,122422,165872,49754,74213,234264,33151,52014,33100,87183,22365,52500,40013,23302,5652,72723,21404,26107,48434,587,94049,168493,96418,32871,70860,31709,25128,443,71597,166253,15670,70994,26341,133675,28280,75491,54756,47955,56028,26182,11952,113272,472197,64640,110753,17919,337,50642,22576,142,87371,53391,93210,126694,15285,19642,85667,14148,1506,42092,52962,33243,11970,20734,135843,57044,58880,13002,219134,22876,64754,232519,4257,43120,321573,24799,64526,124728,52579,81472,70831,276848,17403,74359,23021,182101,74597,23744,148267,12055,7976,5349,11772,67540,167347,65318,18720,127832,108238,22828,90233,9987,259080,118185,73209,79270,13775,90100,137742,90799,70569,15699,19961,9087,67475,57872,39731,8810,134897,131868,146849,19898,3334,2281,167061,91073,60356,467742,74712,188,53179,137679,92769,29241,9537,132595,80119,1041,88962,5976,40171,44911,102859,139059,104558,98987,47761,19272,71472,113864,175377,73338,10857,23402,23758,1591,139864,5644,4076,118760,16427,134198,18853,20291,100849,37423,22038,36677,19071,195521,57445,11069,31869,55718,66882,148490,44,41296,75242,49704,166810,9906,20943,122258,49112,105667,15969,10344,6408,187694,21399,72742,58970,14867,14376,81889,41856,23225,15042,56993,16074,131389,74276,72407,53875,383108,53597,37363,68993,44854,122548,430927,198279,38430,80409,12245,2981,628,2818,17760,37437,238229,7968,46892,2200,3730,34190,65983,37959,112291,87850,70827,6522,20750,73913,111621,41652,19587,2780,58668,25916,85259,18200,168962,95781,42445,102050,7776,57662,103313,47742,96358,41964,66174,100396,29069,204735,19679,27978,7479,40264,22534,61183,36081,107436,58223,14680,23002,101311,24716,124108,12908,5646,31750,40380,14215,232799,102772,14122,96775,61398,50917,12096,149880,67833,598749,124194,155871,49216,790,14677,65319,56917,7440,145744,95701,12206,49405,129269,76199,45732,9767,11058,9047,210885,11051,7392,26307,2130,8132,147526,20802,232698,115660,50060,59789,57344,107623,80343,112676,23291,9866,160971,34032,118291,15719,59730,164911,28975,2659,58046,78480,21854,66209,53863,109085,116045,29021,46481,107552,22130,18764,70254,31272,11300,52460,43933,84738,20721,53869,190840,79673,105300,7561,321817,66924,13940,33281,101046,183181,32176,71878,5678,62924,79535,56646,40303,19559,27703,93042,73368,42187,3670,37376,46440,7023,36816,109628,20680,5940,276440,275233,170848,112093,136996,14984,20226,111441,77693,112960,48577,39370,55707,50314,123404,26570,54281,61372,123391,4857,35928,246740,132507,106646,44241,7196,92258,9825,37688,51197,303141,5590,15476,132986,10955,85782,34486,26696,7991,28813,18858,39546,11703,11365,38185,5716,93555,11925,40121,60002,6985,10976,171384,3887,43394,13337,56346,6381,252336,39573,75042,53711,1028,31781,44295,95925,131713,7214,68125,43571,70954,213234,1628,8760,13391,65485,17320,56038,1710,25248,60803,57399,19839,3870,326,281556,50945,72400,21460,316244,75619,56246,98775,481,13513,55765,50427,7388,123519,32929,57908,27124,61316,101097,57467,30228,48792,10788,20402,37318,50526,155730,34456,158065,145305,17832,43733,64052,4506,35072,205355,177028,184004,187081,68616,35938,83703,10367,36892,93186,260137,51934,89970,4985,23445,26755,21558,7948,78741,23376,124405,85594,68596,57536,49351,12619,56593,132668,99924,109728,71844,71935,196018,65464,17617,14987,89701,143773,33997,8687,22701,33258,2914,4436,72108,85610,9671,49067,2327,82988,1361,1672,44033,35777,30269,24057,10605,82236,616,15793,13919,47249,112086,116698,9484,80207,90574,33304,68624,93127,56101,42210,160929,4827,38995,38095,4701,125119,5027,33680,9236,231236,14135,87837,23318,70261,78893,30151,81482,14332,1084,74256,27532,46644,79185,3148,62615,6981,55672,31668,36825,1849,14536,37446,14738,23779,43058,162749,72199,1168,21346,5592,85932,85302,9668,18351,57135,150360,2080,228015,77953,34670,119302,151751,31009,106725,84265,45214,59289,74178,113071,263206,111009,4021,44449,188119,192629,123592,392506,292847,114487,12831,205858,9852,20780,79648,75767,357014,97721,18166,21005,67950,33226,204009,16536,2987,11335,66717,144910,47950,17262,55060,15063,2934,51038,26775,178497,66008,3427,49433,128592,20036,157553,63861,3089,23015,51210,28696,35933,49942,71135,231518,99620,17248,21835,176536,20676,16944,38700,165831,233253,295625,36723,13023,52745,10907,19423,67972,125868,95473,82875,1183,108455,52685,33417,64095,21433,52438,33191,127809,44505,211823,7810,2752,95548,162031,7185,91196,47563,61721,33359,17897,23682,42806,178101,22874,49707,199897,75419,82456,8618,11171,79712,116847,18783,44190,46564,5346,59046,95032,7893,14916,3214,26800,24172,121453,34362,10250,17408,18888,4840,68696,22831,13162,36005,32512,14800,62357,41723,45046,27247,37486,5372,2564,34261,298500,66509,133920,89138,31305,117697,19097,108304,81386,84106,23802,46411,63304,946,51417,41777,41041,19501,115864,60743,294354,37955,94165,18116,1156,17937,20645,57114,90804,58042,48643,92288,9861,2557,88546,61333,101008,12853,5148,87856,4152,144503,73841,18718,9789,147565,10846,42085,12789,30223,8993,56352,67203,2448,28215,6052,23540,126319,75933,36689,80235,23231,23561,21383,38800,77548,102798,21234,31468,158608,46188,63960,191679,8051,67014,11185,170078,42186,28827,34777,41930,212079,12421,34750,24111,110344,73918,45171,70826,141949,40063,23979,24254,37309,26724,27179,24718,83648,54938,14591,17425,29525,102675,48975,48654,12316,8929,60640,41709,50168,63264,89812,50716,48632,38755,138583,160123,55579,71829,24230,233277,46322,39650,166388,34718,24108,98252,7031,106695,62498,18258,35062,217827,78731,34824,33354,19520,60852,2432,60224,8587,2836,62955,702,20227,42285,40560,95592,62486,11094,53035,143291,18842,46177,77994,1770,9657,107422,172915,32655,128716,25886,25164,156740,119928,165875,85817,11007,89110,33956,12652,65156,180266,8494,36889,19958,20955,96,1264,118288,135769,44754,86671,5632,19026,168220,289120,33569,93821,66144,70635,7687,5642,2714,55445,56636,71545,184182,93133,7332,37389,12643,52315,22729,11014,158742,17050,152889,50178,34601,41945,52136,9948,26914,63548,95721,115951,40759,8960,158258,38938,49232,48325,42234,81523,253019,66128,40978,20048,238048,38760,62928,122560,118532,43687,137472,163689,26680,9878,17448,51035,16211,60834,36749,29178,14241,59868,150086,2305,26477,42422,34342,165341,83279,33894,14257,29928,12743,13957,125571,89134,66712,10952,16507,147839,30146,7249,16565,45399,39874,114565,215780,31990,230881,171477,102,196546,44538,10880,84948,281705,86651,10617,31395,2342,453658,43569,60561,132901,21845,17727,58556,258242,22262,58728,4008,77997,11806,37431,30599,81375,109137,185787,114085,217292,97453,169085,30593,60212,11544,102056,65580,2384,91655,4855,95725,7295,157994,16228,20669,53276,141590,105246,17334,25440,76067,17967,39321,38911,11362,28559,63807,21627,26468,85816,40120,1025,15234,58319,69516,66512,124548,75845,78873,22137,46681,51242,85683,32909,76747,35555,43396,101465,1765,73094,1077,2962,39028,66777,57831,42048,15828,13962,36041,63657,52412,5242,58846,2141,5506,219012,134451,3936,182230,17558,17153,152237,22621,49377,170216,35257,68233,65374,6510,11126,212151,7184,2480,22517,3437,33073,30156,16557,3768,55067,86829,91e3,12350,148650,66017,79424,70885,49066,28250,21369,51213,34533,11510,3258,18176,18465,84413,6315,36411,163765,4346,356,107618,598,13727,285026,162695,8749,14583,7132,63521,184253,32378,25991,5604,30961,53675,4874,84693,5086,34811,26978,56564,7904,33519,51221,113942,69253,6664,125563,22055,220680,102008,742,51930,19494,176108,44424,35123,13025,75685,11759,74335,22250,181453,131147,16984,132115,154311,11991,76452,52609,85351,196,30969,9198,74919,2529,56838,71779,29187,116304,3504,62330,41190,86153,28393,254926,104228,105189,13264,84359,3574,12415,8534,57147,10175,188174,59504,60932,66318,16407,107921,17638,99103,49278,28403,39786,145865,8462,3558,43406,142271,29139,21989,36552,93955,72365,7176,13556,106185,37957,321774,17782,129017,51154,27938,24952,1935,39366,2791,33489,41582,56078,24558,9311,5449,218786,27808,190429,68013,36020,86003,29735,3404,87348,119357,115714,2324,86796,81973,40992,43376,93621,28784,16808,36367,2517,2909,191926,24978,55303,53308,205724,60068,3098,21375,64784,23949,26579,63121,12319,80145,39967,97861,6757,70143,67642,37082,34698,69140,122883,46151,62187,80934,429,19437,135071,137885,222647,13331,154065,327,61778,74257,40116,37493,14855,85079,237641,42342,102164,199965,71204,4662,29368,5042,113914,122214,8955,13149,102503,43173,5659,163787,69003,307084,63392,171080,21390,81918,86666,36622,24126,28887,5736,28054,207170,163428,79891,346467,95363,38980,111806,80828,9200,19288,294896,114468,87405,111715,141705,7015,72754,68463,48738,243147,33397,101210,37051,98801,82847,20397,4940,185559,18716,54718,83491,11725,40803,1128,12128,23060,5174,7745,67007,46701,1571,27807,180186,256996,18975,16837,7877,212758,250379,15440,87954,57755,24719,124057,83461,258,50864,8874,29038,71289,31627,15429,9005,4061,113851,107716,82819,13651,79656,117851,17539,111446,12938,39724,190787,4352,15402,21070,62708,8539,23777,73853,13552,38810,86117,16285,56400,1718,75342,142863,29033,378,110113,180321,32586,23606,26393,160984,207987,23783,8406,16904,24596,47274,11693,46539,60524,78595,48423,31718,20170,9009,146268,15183,191060,172765,1349,138436,37365,10970,40509,225817,20021,70394,152138,21541,66559,66544,89352,2725,17258,91345,7313,3815,115868,8660,40362,4071,103524,39388,118275,21950,6549,38226,32754,209574,29201,43495,18028,20296,40597,18370,47520,202450,24134,2219,8195,69545,38041,136934,46374,19041,159811,84865,58620,846,98749,13569,30714,97246,32186,4479,27355,92973,35214,151491,75963,37631,1561,27200,238083,23182,60756,12291,25766,39355,102333,87362,65741,59906,19538,201575,48772,102938,24438,292580,39964,66366,9004,61379,50548,37622,38732,28379,68180,76622,17488,69849,5963,7219,48143,43413,55358,540,58691,29506,19245,52193,48621,5518,13048,118625,44755,191081,42061,89197,2259,60665,66994,71210,51232,3585,142096,55024,7892,8345,58653,463307,65658,64319,137941,136323,53499,12746,43492,6978,95163,29925,60175,5128,7352,41463,184756,121146,20473,18426,4598,5309,54580,14277,121151,10691,56711,43880,63409,76682,11830,172218,264898,32632,66536,81062,31649,25788,92774,60222,11100,63159,9432,224657,25240,53613,152,138620,163829,2397,85345,12501,37507,64932,38575,43522,65789,80198,78796,35226,3851,108891,73311,3060,28391,93671,39663,46142,30982,66041,37281,68157,26553,71872,81142,211527,39747,118119,22695,2859,11066,20232,168911,7933,197005,17066,111071,44434,133994,120798,12766,227798,45756,132852,29917,36076,55352,65281,129800,41958,18944,84678,18580,168093,132621,39997,54092,27740,32354,3770,114118,103242,43918,15899,18574,145944,3190,123469,219903,24169,100571,62403,16776,92779,14535,17168,16475,14304,37231,1712,28218,242754,61688,28980,1318,51359,222657,99200,67989,31772,23932,35351,201251,49041,27306,19128,40135,3986,77333,19649,120683,151927,21081,7076,78375,77501,101599,8011,89585,96715,58179,5378,102138,106793,26051,217276,4197,16297,27014,46721,13322,22806,5278,29629,70632,9647,71519,58818,40603,128530,8903,36770,56900,31483,26935,43845,34265,34920,87658,6114,84767,64250,47318,50720,19264,162514,33357,13117,6705,46696,75032,71054,87004,42035,69138,11903,99854,102328,19611,34525,69312,6431,49842,101600,133178,108751,41829,89939,225664,48916,99556,9195,130387,5960,36857,116724,53518,94002,39077,53996,6945,22261,64291,8314,152785,57588,16522,9091,5048,87671,35441,39509,1945,12423,158923,178413,37549,14095,1475,73188,62878,4819,24012,68534,42606,4010,120809,57497,59564,101758,103718,32701,80116,12345,95834,46918,21468,53213,15665,31200,3867,5140,96013,250744,21016,10069,13968,35449,180829,27683,39704,59956,22893,3115,26293,32785,75934,62445,141162,62720,2018,83638,19949,114012,95006,3330,99829,130935,309272,9565,55874,121727,37017,23586,319858,40970,27602,8625,112329,61060,100088,118525,25922,16232,1907,60671,51583,44553,80993,5262,94679,8676,940,20736,11823,3020,16476,12340,152600,97416,3703,25744,66826,16245,16876,46446,84798,74227,176020,45192,61955,75496,23946,23626,40372,26036,6149,11822,30582,16541,41914,82385,232823,40921,80773,14930,3631,7517,39619,4348,36180,126106,138939,62611,1477,113512,47321,25052,14546,118881,29060,23589,128322,36795,18401,137921,104699,267929,36194,172791,18113,4766,188215,30083,332586,94089,5805,77909,22194,68234,154976,43220,40660,70001,184893,138095,11128,103010,22663,5108,212615,8485,5565,49222,54614,26530,42639,16319,55062,152662,105595,21114,22216,10294,68158,10436,86950,7206,62115,3977,3657,59874,456,118617,18156,106663,112229,80992,17442,8217,55551,5133,34344,251927,51153,39364,201321,7816,66803,23057,156724,145664,14276,95705,979,2796,6875,13429,212525,50602,26276,28284,3424,19465,52397,46963,31420,51399,206476,92317,48851,637,100820,83349,10317,60227,21972,6908,282439,32857,224767,95629,83882,42106,87338,69757,29840,68709,37665,45244,114577,49188,175943,54009,186746,106158,70168,3358,234002,50555,9221,129338,9562,20118,32923,78479,118280,65752,4977,10474,102174,60947,129006,10570,83451,8598,8078,159367,123785,80438,16742,5905,5281,181513,42402,6977,163136,93179,42191,14968,50421,112401,105440,33456,57347,121611,4221,94954,36517,24046,27796,6255,33394,72990,135408,116627,1233,57874,25654,95419,68156,401399,313338,55208,45573,93124,119251,47200,38196,11909,130667,45391,73904,64964,167846,4137,115606,52036,62214,7969,160925,7187,1132,134835,40309,73195,64494,80472,444841,61111,26500,45323,40743,53625,52797,22659,15631,29739,36706,28841,39147,102836,26794,10536,14845,87305,45874,12241,127587,83833,57183,79722,30844,41304,84655,20825,92500,3722,25655,27811,10157,81634,31362,34088,92487,70123,22190,185100,72658,139035,192523,88241,2078,230490,44528,85638,100198,22088,29982,291233,241062,13865,4445,137791,37835,107218,31726,19718,38234,72528,23046,19177,66695,5109,17251,28077,5617,21554,47839,72425,133825,1486,73065,181275,141508,21768,62971,63082,2512,34200,9904,120309,6392,91243,68416,268253,41199,116757,138551,185526,41246,28986,4093,19057,17295,4148,245766,122360,35356,112075,20301,75441,10998,7977,19769,62922,937,63547,100196,26427,157820,20983,236696,22935,8140,90315,156004,47204,140973,7726,45097,52725,22636,23436,257282,105247,522,88389,216031,202204,46812,211666,19693,68828,81691,45925,11256,30292,372,5236,167826,88328,232776,151611,5360,82104,18841,80393,25465,18285,20320,72377,31730,33160,45803,38715,27705,37379,24163,18360,103586,4015,32305,269494,91252,20080,36567,54650,7797,57073,12650,31164,42209,6375,261663,105528,81661,106002,2800,5375,17247,43151,4442,15727,194619,100855,144898,62320,78465,39929,16454,1967,28311,61363,17219,9395,8745,121445,76939,80385,162380,22009,54191,44248,16299,122830,48151,74429,78291,64755,14238,44966,2511,17712,67954,93583,829,105899,49935,84750,11591,33185,85447,42717,27409,208542,28965,62052,52525,5597,25694,65594,16343,63224,276188,12475,9331,127507,38522,57287,24128,133161,79723,105548,133695,48917,27558,43278,46520,13778,141954,110785,83366,17715,46317,105763,66298,147013,41086,94180,16478,220447,44611,730,19722,78975,117889,125643,26254,16574,18480,65006,15806,38549,246418,46052,36056,8440,34984,30170,3163,59800,4458,115442,4283,41970,33507,104078,1653,22,121158,276486,3655,6338,24048,133421,23641,2161,24422,36006,8086,10675,181474,12307,29514,59143,14729,52509,87128,122470,19446,80852,33314,24573,119864,14237,9652,57779,6612,51851,15284,98871,90581,124466,156831,21190,22015,71380,161906,87247,69201,18392,17908,108470,72962,40719,14338,17911,95260,43339,20610,78916,20710,72451,11315,31448,17263,58853,178878,48111,116002,45497,80506,82605,85880,36300,121755,25215,36118,301929,88728,405223,276136,553,34704,212438,49970,78329,922,20711,25036,257130,38295,145369,18128,15385,30829,55656,48345,8012,3561,28004,122041,192900,58338,112508,41085,29976,87040,47117,23905,4336,92061,138880,97407,42083,172121,6256,25192,172671,5,93568,1420,12677,31605,56743,40620,6015,78415,231077,31298,80026,13902,19048,24924,170586,32955,176119,87859,36731,6773,27711,24658,26475,115216,133207,93250,95820,88522,8317,5714,124047,55219,86860,19677,23961,22928,162209,8904,225992,359835,56084,96201,29392,96558,86071,93643,55114,13347,8183,95129,82012,2017,123336,34219,115554,157159,47747,101684,41008,18735,193781,104151,226906,7552,179874,124113,31159,21162,44010,14771,51268,166128,31382,73124,77438,92830,205709,12113,1292,38937,13114,1334,2118,15597,69581,14449,21934,76618,48728,67038,14967,51495,24243,87736,147249,26720,11119,46063,43749,5843,44147,152629,133428,65703,14269,45604,57982,28672,55616,45957,8438,95433,37698,220862,132034,39456,61870,4161,26501,73560,56418,9845,4654,20916,10456,88920,119358,9015,65931,96507,48029,38534,21676,109081,43078,34943,25089,6131,28766,23665,5477,10255,16695,67,45778,42443,42770,29534,23733,100513,62617,42630,48746,14191,43753,50295,26007,8792,57243,43119,54725,164253,58250,112304,131796,25165,4651,3188,24831,47748,3705,19540,13211,102095,5593,18699,23666,32005,117571,33541,60584,74573,86311,99443,25172,27222,168938,7143,11853,53560,18834,19960,86522,28217,53266,117700,72989,34323,18721,66450,34346,74056,47217,202002,46269,9429,68582,75458,37823,82843,96652,32549,145144,27958,19820,158086,31955,201406,135379,31207,192545,12950,51704,9094,248263,76147,64028,110009,79407,89345,99284,223492,47966,26848,15359,201137,2861,110507,71231,72297,31851,118777,71039,151051,240855,16333,50766,14727,7939,4149,80908,418780,88378,59276,1327,7284,38576,79814,65820,42199,84860,49574,62596,12396,70598,40117,8648,7994,16836,7630,14047,359699,106878,525,29037,28064,13380,11675,50669,74216,103539,180314,27449,56299,172344,19274,7301,246099,32043,19422,36506,129317,6806,30140,4614,46639,66926,932,86600,6322,27847,233103,10541,39025,34887,3517,12972,26220,2031,66561,115015,48658,47596,12714,33845,3893,16165,35237,89983,14769,11962,147224,47018,29977,27979,5552,82338,86023,131368,1218,24853,237840,132193,15455,40873,3668,65351,53388,15229,59889,272245,47934,11858,34347,18038,90853,86981,300602,19343,114181,29362,84921,6095,106059,79472,38015,1206,48741,6208,8e4,21916,17423,6002,108083,24479,34931,56661,9511,26995,100694,163853,35997,81254,58321,18919,171890,86877,91341,74503,70477,53412,7027,59281,39892,131302,5864,15947,61301,67466,162369,47956,27874,35624,282324,21270,111847,102548,41482,30955,116737,28264,8592,55458,22301,75090,29821,30697,51709,3041,19208,8038,24634,30467,87509,126428,19389,18814,152686,20701,83474,45832,80891,105808,11378,153223,120770,98186,150633,49838,9141,12755,30962,5260,74490,21256,31678,65062,33326,289838,187831,20595,89768,2805,58535,10844,70085,12090,2451,138068,98544,24461,4511,6754,41684,28203,3383,65355,82833,30161,83924,234361,128424,28921,222594,33975,125491,34069,11508,67464,144226,41850,98703,34371,7901,21254,38398,65651,23549,53883,213340,123269,12028,71764,177701,28758,2623,68395,11549,15232,68603,9660,63116,36079,57093,31198,20475,48467,89984,35619,186847,107469,31389,43631,73867,41949,68841,114250,1605,30564,63403,17588,27680,99533,12641,70325,50428,73426,78379,11855,91651,72081,91720,60198,15743,12065,83398,140046,6761,46598,45900,5068,886,62448,148968,37347,19405,9680,15819,43496,63370,75667,163700,37639,3633,22774,34341,183131,134335,37200,23915,7054,14194,12970,26438,13350,285521,25594,8219,104410,91039,168804,138480,149734,15907,33818,61132,60082,4622,110187,56736,13551,73571,3945,73463,65498,17758,263266,17593,2710,27585,54469,38200,45367,63754,28881,3473,12791,98287,31895,65787,4463,94536,24951,36332,59901,28803,52130,86403,7668,181822,74831,18977,9850,177206,145485,109798,7292,31421,26280,77211,58511,12507,127004,11113,147,8729,56208,43066,79926,129937,31345,83947,39915,46146,98763,42566,1337,13192,18323,105163,80570,117753,16555,72883,11077,159438,40764,70933,83329,26066,12276,72059,21655,173836,126713,69454,153482,91585,70644,102558,110483,6764,127864,190133,3961,101798,20945,71138,82402,90884,69669,44753,923,16939,59700,164258,25969,27082,31399,43846,6306,246093,51342,6153,151581,202801,182731,56475,162188,89426,141356,14355,121815,27536,28023,65257,77523,106668,127314,24947,12790,38796,169698,23555,10725,44573,183083,42088,62716,43265,105958,32050,44067,50118,1668,3874,6243,318411,16599,1691,94999,52378,28671,216728,123258,2059,34969,69225,5913,136280,171443,141515,91662,22175,135282,80020,92270,1663,4808,4482,3495,34691,5226,109830,108512,17342,107488,11606,123190,100247,29666,146527,113014,15794,30894,13224,39585,243192,22351,9903,7836,47699,11078,25468,122291,48821,26780,122679,75521,81450,630,4895,92900,55074,74293,17441,3563,111657,103102,51613,12318,52370,36191,68245,34269,40445,41354,122901,168604,182500,62012,42557,11259,24428,115113,86345,12362,3909,78430,86852,134602,20459,47853,93879,22577,7659,3688,38555,13349,17381,56715,91639,12493,10895,92438,3142,37057,28928,2004,36427,32268,34222,209974,10432,67436,41989,173518,107930,27079,62729,30908,55558,5828,45031,14902,53546,8204,144263,60255,14520,88212,86582,109589,69356,8064,47449,8505,66558,16886,4844,52817,111260,215129,12941,91118,650,20770,6273,73089,40618,62790,2873,35002,14023,97208,19386,102646,36993,143736,135457,35385,113601,17893,32627,84439,100619,56016,6581,57264,172160,45452,111710,203627,70131,24100,322787,1996,35665,70078,22358,90922,83658,4097,63200,58499,14542,99153,52159,6615,12414,63415,31986,16823,1579,65405,137809,8841,16898,48082,259,33014,42375,12260,179850,73667,91389,98882,29532,17311,326251,41092,5928,20742,44964,48019,43505,9317,49265,6643,192712,48424,163487,19861,20113,70848,31928,105333,23685,78563,14638,54755,7158,24142,44018,20774,125255,20331,24280,10163,1285,2336,39851,4299,117269,46714,63816,87779,159624,11731,9971,990,137317,108831,50994,74554,162680,23640,131597,146962,170620,34829,91205,21184,1913,63616,18427,93136,156592,17519,67565,115882,138220,78622,88535,18115,2711,33554,109492,54298,971,24914,25863,36363,45715,27099,194995,14299,178181,111488,72395,322385,157719,130787,11897,81843,83999,11369,49280,118604,40922,61332,110343,53407,75639,40582,300440,54722,25637,13694,48248,48278,194521,56203,52779,48783,72627,10953,376,16733,280238,26351,230789,15132,25168,137270,3588,63704,73376,94031,74284,19443,159557,9697,39901,13351,119050,15406,146455,3460,29556,75195,37673,102524,92329,47289,98413,15311,100684,56345,7116,95480,11590,7200,167,23610,58426,17730,136656,27944,53151,2701,8824,103124,3017,90744,113588,53216,79736,65940,26931,498,29568,80540,143543,21292,1740,59268,16561,180816,42323,50174,40890,52866,10703,57169,4700,17191,4424,93511,49698,166650,26972,48631,165169,82879,69326,202970,4007,2376,231325,139592,22119,62851,37504,68816,58345,67398,186643,43331,277416,53749,15746,23102,17432,4793,151138,48822,54265,48203,198688,14305,54287,2291,18018,113378,123260,7180,97549,87027,120085,2920,76080,8190,102005,5641,64580,14955,59802,54028,58884,19367,81779,412567,85957,97053,103637,78871,29364,27637,141728,4767,30686,112738,130146,42745,12730,105040,14844,232,210944,36581,152317,135543,29744,3129,55647,58149,46319,27265,17499,28005,59948,7170,34138,5702,293047,110892,408,91760,218674,18469,46095,81403,14389,4610,35672,73060,11006,74848,104820,118143,190357,20043,105358,141735,5115,27093,45924,123073,52599,29433,9616,238350,78610,24851,58858,26769,31969,24613,18294,4982,32735,39639,143563,112073,202205,12567,4873,88601,44897,81503,101648,81362,34662,85277,17574,48173,21435,221188,40215,39576,80786,26544,64668,81841,10731,37733,247986,149188,127703,495,18382,54388,72446,43071,30974,198723,89608,41360,190,33045,8386,31658,19992,237838,119015,137622,50890,100913,6460,116233,267230,26621,104129,65114,14190,41542,14888,85962,23342,23041,26453,43725,71809,45186,4770,46452,53894,56616,221286,18973,9038,109299,55365,19366,26863,18808,60909,69353,41738,83463,12100,68561,72860,3980,13796,49340,12332,31311,27418,4255,53430,18976,45523,510,14224,30477,26581,4530,3651,101663,139840,22709,150861,31996,63923,120623,262522,3076,10528,2929,14672,130238,18087,9816,121894,100308,25085,55111,14565,18952,53293,2042,369988,23674,61789,133529,28783,108293,35477,47119,36448,71049,40015,33055,78598,198442,1833,159937,40654,77444,189245,113153,8621,18599,38553,35223,166072,2375,11659,21786,89523,6032,12116,63046,159398,18454,3678,32521,47626,11411,103527,38896,42946,15696,26370,10185,8413,37080,165583,4331,63555,14907,72220,50056,6623,62236,36565,49783,10049,17503,100581,55951,146244,24724,9626,17969,25524,109300,173965,99994,101056,46459,43647,53737,277968,8347,123521,74858,33829,44762,77574,877,81377,222525,123532,30602,43881,53145,2973,16284,81940,61281,127044,63620,9875,14756,114829,19032,9202,52759,119141,23928,120551,19607,3599,33401,76821,73233,117430,39968,36539,7071,5446,121735,194059,15206,45283,6706,15603,65615,1207,165723,92275,34773,104447,8396,32353,205240,164323,13600,60555,79205,25532,22907,33410,57480,107111,69630,32137,47832,70913,33161,20321,2371,117348,10714,86246,1625,11763,17900,268,78457,99175,97940,101092,86660,32221,14041,128504,125080,53744,124263,31017,13897,403,31859,21964,5633,111630,5547,77329,17961,18241,84995,25984,12983,67491,62168,47262,5241,297,51191,7351,8967,147212,82060,16821,782,11033,82431,62957,5026,43459,77963,203477,53528,6247,191852,87774,74164,215654,13467,1522,219964,28589,244104,16242,117821,67725,72570,156792,17186,15979,26990,44128,193014,35276,57125,16212,166451,68017,6905,77608,16364,53777,75921,76426,37975,26203,269296,64099,84122,12077,38533,830,4407,20139,963,43028,38902,42911,37503,83343,85045,16979,1165,60835,137387,58380,86990,110066,134540,56331,193845,81238,17922,163093,38744,110641,12502,56404,34862,26865,125964,12965,111648,25547,7771,27196,136980,9555,29551,107158,57885,18831,37705,35505,101742,13970,102109,62548,124657,23328,11124,89592,146376,248050,6241,22033,18337,80685,29898,11908,216623,67721,106162,146610,21377,15085,91552,42041,62560,122532,125336,102365,121537,142559,29693,223919,11515,110495,18776,22494,5895,185059,103592,229351,51220,100102,37027,257855,29359,54123,36066,106493,12244,79258,32002,432,56205,94836,90182,6726,14762,29391,48938,26864,38083,60364,3310,60192,14766,205567,57504,110760,22649,24666,46333,21517,3430,13135,28873,27052,158809,11597,20529,6695,23138,22960,37137,45574,6545,305877,43423,26153,24769,59844,14501,10430,134352,56169,13213,103432,49523,35181,13435,12408,129475,64620,230854,77390,51990,15653,83248,33466,44571,117828,51481,2187,10559,68019,18021,54895,48247,18354,33737,4554,108595,37288,39767,116707,9175,3726,108877,21616,83684,49862,1938,8543,276466,20134,108498,48770,102254,31914,131520,185291,100559,51890,209,19526,76471,50544,71814,99351,8172,198526,28816,20419,9109,98389,136777,76479,75596,30635,165417,48216,120220,25955,211071,39314,24308,32164,2559,146280,43403,9233,17947,90585,1786,86920,125662,2457,64741,32152,32918,122882,78538,44001,31723,56426,23375,103172,88177,145697,52506,49319,68016,31664,41488,18486,110400,7030,28241,986,109199,19900,42147,56864,65287,49183,7858,24e3,30453,840,16673,25907,68916,89927,6309,158335,36407,199737,130464,13137,59603,201778,195292,21015,42466,179062,172561,89492,11075,180407,31868,72493,20998,60217,9865,19530,39274,130266,54539,21623,12535,13505,40641,73375,4087,85633,2153,3117,70680,55788,92096,47509,98493,37490,271936,151475,3032,16171,96642,34106,78425,125761,19591,3366,19316,54508,24183,50786,194248,91528,33253,34622,108355,41741,705,3814,3883,108929,13203,67831,10142,59754,68208,29128,84820,56880,38794,24972,48571,40821,40476,18137,164254,24064,236309,79181,11282,395,39169,2013,51587,28551,9645,701,109513,115899,113566,12762,62045,58322,103726,41343,40866,244102,143816,2490,70346,40973,52618,15412,30720,104315,38917,42027,93676,17513,107418,20706,123890,13399,97727,24044,87962,65606,44250,98044,65276,74790,101473,19350,91570,1326,87790,172042,7577,100813,86896,85891,41512,108130,27794,14875,71431,12835,156250,58135,3759,22476,42176,115873,34686,56523,73643,108505,51491,20838,12721,32863,45700,29496,13700,34294,55360,29206,155942,123812,7706,163234,203,132720,49358,144431,8130,175788,35818,3270,76832,25710,54095,97274,28779,94621,74396,19092,128242,58067,20885,14670,93255,15107,63291,23654,126900,129421,59294,262659,9798,3251,67344,28600,44629,50672,29072,26999,31526,23183,49175,165843,175455,17282,175411,32022,45989,30298,90690,78118,83156,23749,35636,31317,7069,80381,94561,133756,14960,97404,6138,41065,78041,32843,16601,34123,9559,146529,123377,96395,54441,42012,84257,123541,10745,22139,106459,11720,150883,172651,154996,110538,4728,53447,25704,2009,71152,119354,21166,66604,1429,216162,8637,122250,63520,27180,29172,36124,276428,107787,77184,4680,14952,104903,24418,14793,51561,52931,8371,26342,48526,7118,92066,67280,40653,8847,34597,105438,14198,50163,61188,146286,50315,41205,170829,161496,585,197359,95056,1687,365794,91349,48507,5804,49263,5146,104902,96365,117343,132222,46084,96919,16875,8073,262381,79982,52663,13928,16056,153908,15145,109256,132308,18763,24904,167644,13618,40750,18686,147124,114709,150038,52849,2938,12568,48617,8778,5459,44202,44591,74914,17183,248689,13878,7822,80060,23116,194037,18487,2067,7798,43077,33678,244028,31320,74273,2794,19466,8218,36280,183997,48124,19416,29656,19280,98734,7715,18311,30701,133602,150307,126956,7378,2933,79903,13178,12593,86571,26604,92446,13574,44205,65699,427599,21118,8245,14407,27877,47936,33542,7916,26460,117762,21596,37818,2249,127359,209394,60044,47677,308089,36791,154971,31417,6998,150042,174360,12255,43009,29335,48739,3912,101398,53340,2580,146939,151295,45360,125275,15273,45383,27456,48761,23314,8750,60801,85823,104759,27894,123685,66968,39480,26917,55290,83305,2696,98390,57569,145853,340733,4919,20024,52268,30884,7413,203685,70989,112855,4129,50536,349518,68205,332641,159581,135361,236026,37563,176404,64899,6578,122033,63871,1850,85234,82089,66124,74145,121098,107351,12687,36881,117334,13136,14698,85933,93866,18047,32620,310,15094,46e3,88451,23632,36645,27940,87618,80520,58892,20976,27702,140090,96075,67841,103292,238964,87778,107338,17019,83427,67522,7302,8261,47570,116787,8730,80484,61772,174422,56005,131193,52875,14588,28471,59817,9586,15720,158155,51307,109734,15196,11025,59331,3884,52626,102602,84797,25158,27314,4437,20488,76214,189248,35023,114952,157376,2827,62439,102878,129749,36405,10329,109339,108633,36662,1254,13267,5470,87105,58004,15397,10434,159667,21864,52022,179464,3013,32147,31496,116832,18494,105502,129227,107267,50033,13481,9954,24267,22141,16257,116154,36185,950,115685,11305,176708,2048,178671,112573,287867,162328,497663,95170,50979,193861,50987,30368,136257,31830,46549,15119,169876,23788,17462,249887,57377,1949,35448,14791,43769,210091,3783,34612,282103,88380,245190,5457,20491,98908,11402,86899,117916,16028,162584,60644,320177,156096,31065,55876,22e3,77655,9992,23397,13757,317623,63978,215255,2443,17648,93231,27388,104529,93807,55505,140477,12046,112040,70887,40152,94365,112353,25063,114679,266061,71248,119555,15589,2244,617,14129,211431,70110,100652,7777,4383,85911,89221,21010,120615,58357,86405,37554,41647,18,15143,69662,60491,14714,186134,148344,42347,5410,168175,44535,42449,343894,129417,99682,20659,27272,140483,63455,222159,17536,13722,42637,62324,11976,114691,148109,2283,32057,182393,4295,147364,33705,2075,44303,30274,28331,63740,69740,29148,10346,44862,33716,73937,153333,12930,38784,247159,2515,41053,20256,83368,256189,54639,115240,5096,24661,175419,153552,26516,141,138176,63885,34115,47222,55709,2765,28479,38875,236608,12229,22921,77291,54426,45388,2860,57787,114579,295139,105782,17826,71066,19119,54364,69385,16568,12323,28057,33346,34919,124763,155533,101386,31644,8627,49001,303600,29868,63213,9103,77280,71333,9696,138789,37059,24823,5057,21352,32368,114208,56803,19424,10445,58514,8661,209508,26187,171838,10460,63454,14016,122504,41328,21329,46618,32493,38225,7855,31763,7945,29876,8734,6438,24205,97490,139977,130740,47323,33195,85390,57194,13813,60600,21313,96251,7699,27584,170521,139271,1363,4402,336738,129223,84983,69150,13147,3590,163929,207225,155260,55916,20288,4503,8398,98490,11773,27512,37113,84976,86558,28365,11756,116005,182148,13733,115313,47644,67208,85069,9347,14995,226141,14704,101835,41159,35314,13113,63526,214039,29978,50446,83339,17440,129441,72522,118641,97816,24907,73844,15717,118884,167255,96509,162793,30847,36849,51297,78974,77793,10427,1873,2972,9999,35074,28190,64297,146836,46298,60038,163007,108919,61219,2403,75022,127339,4233,110389,69022,9833,128097,88016,79390,222936,22570,94657,28462,56956,38803,81536,30474,152794,19566,16481,147408,74574,81895,20731,1918,1366,76367,187321,54494,24366,21690,61696,33283,107477,77499,31112,414383,74362,18463,218441,120929,59848,258629,201924,69269,454,19989,13054,59894,3623,58908,20681,35723,78523,102680,38988,184112,108087,50944,132704,52966,21699,18860,96349,201411,82697,85395,95658,5093,6427,177894,44191,32755,26961,155739,6249,31310,81030,26574,84311,120155,86730,113535,7424,48888,13516,45747,98098,20077,183995,81945,43210,26704,40420,75831,45648,11180,6855,57927,65528,124096,34851,2598,156633,107572,127352,38169,123845,60142,62722,105584,232364,23211,68120,1601,22169,89299,747,258039,80572,7258,152249,11862,101204,8834,121434,33761,19175,133142,46343,40178,48723,3589,41977,30210,38868,62257,10087,82658,87827,90646,16415,47552,351723,28298,72225,91146,272760,1701,11295,1652,109651,300747,51863,198800,29446,11794,32345,37538,22356,33102,37590,113544,37970,11478,179743,25454,103417,59905,221970,105196,145604,7817,164809,102360,16974,75840,255333,56902,6659,1954,645,59400,67769,7689,18675,5215,13793,20536,27852,3387,29523,259718,16860,94625,43143,29245,15848,233581,22685,63631,78557,22836,133302,84513,1348,51826,47129,98836,58284,1830,1749,94642,10933,6145,12506,10975,13879,103781,144434,10268,28409,32346,52968,121567,107374,77268,23686,35097,10501,155275,15303,47136,21102,168741,55332,90385,15996,84817,681,137803,25054,142275,6163,38175,8056,124296,240642,65621,4934,178205,16101,62803,60964,18230,100622,76465,44689,14545,9543,47514,16852,93380,28048,12047,107106,37575,101485,77047,57326,34819,96137,76916,6469,46264,115983,75768,87668,69942,13027,165,8373,114231,26434,52844,42799,182044,23580,146254,38081,43236,33883,146220,382894,14606,46035,36481,166621,35417,95382,2957,59384,60428,36358,66343,75378,22267,22950,83528,17577,56474,25285,4619,179691,75355,95836,53295,34588,171410,4487,14679,84208,44015,18562,109133,54101,11531,86052,174479,303157,28095,9953,35642,14564,39802,16145,77606,117406,53038,121117,53624,22062,1212,7632,127157,237292,189087,10478,127345,102515,181997,86752,87623,10966,121602,68783,68681,83042,114380,138349,191305,67176,50085,39016,1427,42384,1412,67118,122616,72389,25260,2237,13576,137346,19938,20304,2191,68759,5373,61364,238507,75814,23931,69565,38993,131741,38364,12528,87762,5679,129853,5310,186831,32653,90338,260176,389531,108118,26843,43985,50175,30563,25106,56965,18130,140428,4542,165503,117991,24219,229605,1819,129663,1240,3797,76093,18398,71339,51919,93043,27175,47060,216257,6483,35051,1217,16512,80798,129064,13225,69339,8548,237079,72298,2575,34280,51379,117910,55671,53345,247552,29486,39328,140821,34681,57045,60177,5004,90269,78522,2479,322607,48474,61296,13057,31558,4678,59271,6699,27044,31988,35944,12503,83480,4389,136508,3781,114121,70279,4488,155829,42214,2898,68191,75695,305850,45041,74344,106509,30087,17429,93292,12477,290,23080,114802,35714,18751,26554,105424,17775,2144,2412,100610,65192,113975,52975,180272,135050,129815,76238,106483,21440,63186,4260,46189,9711,28249,4169,23429,23390,8324,141585,63809,67668,38457,38063,39226,59972,1189,203916,62368,14403,16949,61767,85801,1739,40147,35049,76757,33124,62102,15780,103593,103009,53484,22952,67973,114645,6566,5245,50462,7601,8288,3513,194571,80276,1908,54592,5124,58571,2513,6800,273997,193904,1119,17991,117245,2508,129156,82366,26278,71465,63341,56943,39662,106116,94966,156875,9736,2204,122308,94418,27134,1280,24539,49022,45314,3764,50904,46424,30699,28087,293839,9400,33646,40165,822,147499,50263,116179,29085,11863,31314,5578,17797,5104,12454,1604,15342,219206,10232,67800,94261,25872,13565,90339,78971,75377,26649,41184,47695,11514,35369,20767,14227,41953,309396,148270,147938,33074,14453,27499,109019,39018,25738,240196,158931,52820,8612,95853,21524,137010,84901,70869,70021,116794,48404,38771,6732,1070,70990,187297,49140,5238,576,3564,253975,16027,16483,2811,37775,19034,25259,4053,2e3,70083,95774,19713,33431,92703,91314,42381,288770,48194,95985,3991,77418,13406,241328,245086,56533,35275,62725,9246,51924,70181,95331,16163,31410,79016,39312,120878,119371,275987,80124,27712,9186,220,23598,146167,85209,68238,282190,57048,31273,30555,80913,17594,75779,59160,135002,101219,189377,29225,96735,60126,62522,104e3,27620,86814,17240,147533,11001,5425,43682,410,49460,87270,69480,46315,59448,1816,76201,9431,11788,87960,29063,65539,47347,11678,33846,7008,196704,9895,6753,8633,120892,59970,572824,115934,6646,202559,892,48351,37611,251282,57823,67263,57750,26527,34485,90747,7685,88370,6144,64182,1709,41969,21458,62327,181657,49247,225330,122600,114574,107124,85361,111833,63243,71420,15655,191178,72430,18063,51425,54002,12364,53225,86557,18193,97580,41232,138398,67821,128724,8944,233212,101353,52099,42127,14006,120107,32789,32132,3498,18123,33758,56058,5779,128760,59888,98869,18445,84702,51911,13234,218379,20093,39031,8074,70195,20708,23462,24355,131384,60189,26390,10403,41060,7140,10781,49410,42261,87202,82566,41663,43105,60276,2768,5733,74176,28329,2297,145430,131632,83615,122915,105441,655,224102,5284,136426,67763,16294,188511,32538,61049,27893,3394,13951,159099,28542,17930,145360,9492,190122,32285,78855,26440,13570,58648,73908,4239,124561,2444,74172,53131,11468,10794,73566,11623,35343,64710,30481,4163,10328,38309,29901,10538,154377,76132,92405,24839,11679,3465,13449,11637,7824,2337,57754,1260,14458,41118,19878,38661,13416,159180,37074,163164,54137,28627,52134,184900,8520,40385,29546,30502,22386,66527,107458,6850,24022,47983,30603,35083,8934,304066,39500,9,28261,33026,77251,9374,44833,116312,34990,29236,63563,125639,135405,165398,159055,55690,88141,69643,236964,31983,25572,20436,36746,60896,31850,16179,11828,5888,3043,66368,9750,31167,7915,53111,36430,1333,64344,93659,20061,60596,180191,51630,6792,30244,43509,101058,22409,420,44210,109783,43223,27030,72477,72831,32679,29235,7675,47556,12258,39907,149412,84926,118247,24692,71717,105038,86009,45941,41189,89453,29856,52543,30627,226798,67303,59230,67415,34408,1367,99685,16867,128419,52147,4111,125381,117881,16173,44093,102224,31575,23234,24870,83790,127407,239098,3200,994,1255,100903,242275,117266,55116,38205,16140,29662,11307,40414,208793,123355,56470,4862,75600,30119,58218,70828,24075,26974,7802,192353,4851,5475,78720,66596,3409,28573,64396,30381,30690,59859,88256,5406,99945,103064,34463,37727,24238,86643,60088,4057,23741,5967,162904,38240,28356,93858,25510,122879,6897,3278,7057,11971,4400,35461,211413,21395,59615,39471,87233,55795,128426,3051,22470,41950,14705,3974,180108,80476,78442,204996,91987,15634,67610,139015,142373,35611,51134,10387,4353,153456,57749,181039,14183,68447,151532,21107,36452,20551,3186,46247,46383,129666,88736,140662,146243,2066,8360,7978,64818,106963,17896,47801,10723,114821,223295,74192,3293,3393,16987,74064,11277,91622,4270,29828,27951,387869,103235,1374,61988,120083,477,145892,128378,11779,211263,61354,18221,17869,46530,83061,108538,157981,90608,67199,95080,49064,195814,12302,66307,10348,231346,160732,112859,63633,146558,21271,31037,198802,47622,12862,95710,3910,77850,73961,85585,34752,61e3,4082,24595,103679,71107,8208,79568,150019,16615,24961,139857,32664,197366,4559,54735,32696,4126,162019,75698,13916,70108,159638,19834,9349,24675,175560,49643,18206,52459,27992,10809,88865,401975,133172,29e3,34558,30915,3658,25834,42430,36562,125265,18182,10155,40149,97082,208980,19575,60853,90529,66545,9600,789,46420,2317,88593,55595,98980,115302,5742,169155,1073,177901,3472,11189,63711,78643,65472,50459,127979,93,42202,67053,21720,157650,11145,141378,42033,22824,85705,79114,35584,15974,1510,54172,28562,12451,104226,19190,97151,73024,20948,5151,81741,21499,29006,84183,198074,54003,45120,170125,26240,35177,28389,64863,79974,60778,176915,232183,45342,2038,80253,41564,40703,32689,5430,100689,5366,23007,134279,14266,26712,73993,24934,64242,52113,102887,61801,46415,201049,54251,62133,122757,164883,30815,139966,2319,30842,766,13362,10287,134518,86111,81665,82440,28333,43019,18963,8804,161944,23439,102144,101145,80029,39052,248708,30350,117340,11878,128467,974,138625,63961,5237,74778,61834,67040,43814,13690,65947,33809,232476,115258,181745,28824,94013,9510,10246,93722,81976,7217,114383,3493,16014,69045,72692,12145,80981,9507,6692,1620,60820,330444,35474,33962,4797,7053,295463,46445,27026,12491,77988,49524,35675,90947,29114,166705,101385,133782,32704,6186,84595,176031,185623,45966,151302,63069,1699,107491,947,15458,74452,196212,6046,10498,12163,10239,35191,243951,9277,9090,29539,54460,22820,26514,112549,60372,51753,48756,21812,70861,260326,41,44222,10441,16961,48148,138771,216194,5914,52153,53400,212036,56519,26245,10117,45888,15294,138019,90913,26368,43842,42111,23348,6082,194845,161089,156206,51546,11647,30759,302912,262094,8635,78876,26535,35283,54183,31183,85484,147873,12989,5197,6356,72894,65347,20150,27370,73787,1493,45918,12366,190217,20724,13858,10981,67449,81213,7553,14115,72242,271517,11842,48310,88743,143726,22177,3290,243231,58452,62937,12592,1654,40066,33477,13751,9921,128442,15868,7106,75236,83773,10775,36938,10482,170465,17368,17469,161508,32752,98340,800,19824,264456,3901,87319,2867,26782,9630,113102,185815,24197,44584,86366,40224,3636,140916,31731,267731,9567,53678,72984,29389,27963,17106,50282,284911,60170,8322,12608,23374,89652,5268,39044,229766,8869,151350,31436,177342,12269,183212,120418,116270,2843,78888,69192,7865,184099,1086,129897,18383,70508,20242,18508,229924,124569,35749,50589,55626,9884,83115,40971,30671,18135,14452,38861,17844,201826,5549,26413,17189,13561,38539,10679,143331,3314,36785,171194,49685,187713,67506,4618,104039,17060,195080,50648,33159,19238,67559,134840,28599,157523,17130,38064,117398,94355,31918,13575,34538,40326,13997,3494,348283,62481,26862,3603,104426,244363,153709,112487,304612,199674,41239,35545,54869,293005,28223,26277,26899,4533,18518,15492,38587,80488,70485,160395,263,60162,11382,222152,4696,250751,51921,182609,10707,48463,46243,1227,49111,111564,46502,33342,56846,68541,63559,858,139927,16654,229375,76759,26478,33205,95828,23399,92945,2637,35630,28470,143992,50214,14174,21456,166191,65665,1711,21594,78019,97599,111701,36,147151,110246,189022,43021,30397,40757,131935,42065,73335,48039,26596,28984,15102,2361,7421,202167,69744,43766,52826,3642,83304,33873,75140,63169,192389,36551,92748,13039,123959,233220,21738,84447,77230,20228,187852,19095,25799,92136,108774,29237,53947,2299,118106,2687,8830,42331,202924,33667,2023,73763,30704,19363,19779,16737,35629,48081,24068,101013,162338,291912,13749,24745,328289,167679,70086,48299,23306,16732,17801,43322,54589,3586,63653,43624,53474,925,109177,251316,43805,13082,19511,86565,142182,92461,17117,101033,103319,64589,4022,4351,235897,5352,82705,107142,46391,156084,5860,61365,10558,13045,7717,18357,33922,12590,33065,6928,46993,783,46937,67846,8952,26295,6107,119656,18799,17458,50747,4229,179559,112727,118080,20683,41464,125468,51560,49749,44231,7359,35339,62988,136487,67015,5208,29150,24956,105186,48858,6143,18097,6972,16404,73489,58742,97196,36357,164616,5834,32267,13746,147733,15113,132091,34127,106298,39729,106426,22294,9780,15602,36213,71502,42808,66802,599,60755,5851,39120,67363,108623,126368,72770,91263,32486,30596,151717,7951,52002,43103,11768,68942,40901,39344,24037,127500,116890,48403,16926,86750,17745,48648,159545,34460,58419,5634,114317,67865,31462,23352,24010,98185,125708,69686,68337,13610,26271,70691,2980,4768,27225,102402,75453,28106,8104,6931,1176,6274,6475,112635,22498,6176,238686,26832,28893,90319,14441,15682,15087,39517,45270,109134,104440,45965,47645,81772,7876,52683,87720,12898,4505,185665,2769,113401,15664,57592,105229,137381,97059,119268,6876,43309,33886,128363,35476,144249,67013,143587,83367,25703,91436,59347,53236,2289,16519,19844,46309,58558,99834,23313,218816,231303,36388,51333,183535,109792,139277,54306,90139,18235,8275,32710,37677,82464,86025,92204,88842,117723,37570,128723,234242,76350,73795,34896,148247,58424,11105,11744,45746,63372,17118,49772,199520,81902,38004,22911,33752,3125,1995,53792,4689,26909,108150,146062,69674,41811,161444,84855,8999,28561,16731,93937,3189,21967,24890,22943,1356,145300,51569,28802,517,118679,31703,40607,48098,108854,25003,10233,73969,177495,5248,24516,215347,146192,48712,60626,69188,40735,5866,586,101541,6509,47590,52129,5969,222045,110933,25733,24223,65339,62812,2414,155418,35819,16022,78423,43138,20995,128255,240673,46745,236093,72176,57085,97841,61248,107,36068,193177,105427,55726,215229,20446,47228,100420,87091,14429,121708,23605,21157,187721,21880,2997,203976,99166,95068,25877,7724,98925,83401,4829,13182,18229,13718,239662,38653,116505,153497,30589,89029,38962,181302,43853,78872,180301,4786,248240,7401,106136,112590,77745,19731,60880,77789,125748,135487,5975,48627,34084,12419,215770,47557,254582,10364,106495,21856,67539,88981,38805,21428,48732,42316,12149,16078,52808,25327,51322,33850,51147,12253,122354,46077,56483,254553,115417,81834,150991,94662,86668,7381,12841,100650,18218,15741,22372,68294,50705,15535,84660,61887,22553,72299,31361,24824,17743,46820,64288,31582,77006,111674,116384,30760,80920,86149,77192,51979,79691,60342,122805,103800,240873,160744,233114,78962,54920,8608,3484,316104,72548,24337,5088,230040,21926,10172,36838,26,86221,83458,102176,12062,17571,41929,41170,28428,68239,41750,103930,2634,18313,53019,34825,97837,63115,24606,73157,152474,14715,91439,37033,109806,140259,30668,174760,380,135597,95673,136073,65073,134249,13829,17279,122305,4420,46444,10237,64848,203623,70728,10349,182885,65075,24519,25783,40318,34139,22222,63394,55266,102764,41422,20126,65100,90408,53640,35128,48932,11192,38935,96839,34782,39492,19396,41332,6250,5511,19492,51304,25936,104466,54099,73771,86115,5080,7669,30891,111700,13931,25276,72289,135447,14820,258641,25265,31005,281179,75286,393,95359,14623,13584,6680,101227,80173,44933,76666,54542,13244,39348,458,25379,109451,134348,81143,6959,65554,12027,51311,8716,57589,140731,28467,23316,17272,30458,25980,55229,77197,83798,28302,114784,7428,34548,26241,14712,39336,103304,18928,54080,12870,334,87722,15208,16895,142098,114262,39820,83913,57817,28682,7721,14900,108672,11250,62246,42849,415188,1724,26555,24549,25505,26443,107450,145899,61035,43528,6901,60726,65906,267741,21338,147590,42079,18924,73017,135236,15393,5206,4026,84185,1531,5988,113890,82647,303391,7386,69844,71611,189865,76523,31877,13315,19314,198575,32821,1928,67641,25913,104475,103489,3297,70391,18406,15446,113347,19295,93790,27856,1792,167471,116449,8541,4408,41757,63233,25765,86680,64501,27034,24816,34975,6079,4486,49693,36229,16917,21581,62426,27862,11612,54284,35702,194034,355,24277,48262,87411,70504,310164,118018,12516,47559,43502,57433,107139,9290,66533,80863,14634,34312,91725,28606,21342,67241,72355,43244,375789,37402,174015,105070,8342,44167,67494,1890,16365,11723,271002,1865,47918,8350,45564,27742,25110,125803,8553,49504,81925,62211,4534,15491,19011,80373,206920,667,102405,128623,245524,5553,113309,192739,65766,19567,22832,261958,29679,21293,71134,20962,105123,24721,860,21752,33448,18372,157167,94822,35770,173224,232737,75729,28937,46828,28062,25453,5207,140366,36665,30652,6169,67920,150458,92040,23186,184604,92330,20891,176492,49427,27828,38305,42495,143982,49560,25503,90043,29747,65328,47830,12932,11068,77721,9003,25213,94205,140426,46090,89945,138173,192691,33329,112232,129905,35709,27514,1841,19957,31411,127476,53572,17497,173549,55063,175135,19841,69314,5192,237921,117660,150697,4060,273045,50414,98940,65348,153665,164423,58804,156695,48994,213928,86036,28608,8355,39574,34540,16927,135680,18374,151587,10830,53805,16878,16623,4282,48030,8537,14986,46102,13062,72897,72,33050,108227,39451,45935,651,113320,40535,95176,57450,48843,5003,19019,10407,211163,3848,1068,4988,32091,30095,41692,15099,43602,107434,50744,7627,171349,16313,150832,352665,207750,33937,38256,51091,156e3,87889,90663,84175,24908,114900,50365,31494,83829,5398,169342,47521,54818,18935,8356,43094,41212,174536,10082,92550,6678,60614,23355,69721,14796,34149,128830,58187,3179,208,40325,28399,225029,401412,51150,31580,207268,6657,10993,69818,64282,289845,23308,12961,38447,6681,52944,31855,2572,47646,120728,179148,37240,45196,218274,4816,3695,21961,50084,35209,18073,51452,27004,6100,33941,1377,84831,171214,85,141510,9078,99227,32610,6417,11718,49868,65579,87902,73018,49062,46280,61742,21512,40862,107733,15941,29168,157765,144919,14487,5767,158014,140070,7241,573,71584,16921,223566,40331,179473,35081,47926,140885,41508,52104,59180,42310,32811,29048,123517,102413,80208,10104,14746,12649,153641,126022,37965,113017,4171,83,142592,2809,6362,50416,71323,116894,260776,16204,1524,5760,30351,12658,20703,54403,36083,45408,74772,4946,14485,50759,111222,10890,2195,167147,92962,130534,16283,177256,35016,15472,210156,151187,73922,117691,43250,52051,37392,24811,24358,30830,5775,818,21969,1476,127322,151783,58392,31021,106913,65215,89407,90802,28531,11690,20234,95249,44602,37256,18707,11928,5161,4410,26571,51903,49768,22008,25252,65780,209499,68769,203726,13249,137363,48845,86823,6658,5674,31881,1083,1823,108676,34518,166752,13791,14287,91576,91429,8665,11529,26401,16191,91972,30964,5254,28486,54697,79613,66520,18447,22870,45203,194466,22822,51703,12278,76716,44595,73455,33546,12235,144843,36154,51247,11116,33040,3180,225753,60864,1972,28469,12891,28879,10338,144157,56294,353058,38302,41447,87532,110616,27065,168438,6557,1213,50804,144643,24817,2390,136531,38174,247513,16190,4059,122791,131994,137430,39506,57650,16305,5188,54309,106128,20628,88071,67394,395446,250285,66176,91254,1399,114196,43915,60230,44853,27206,106353,43013,18733,345105,226453,51202,16607,57106,117175,35492,10476,89598,127439,15187,39624,13688,61570,10615,31111,59370,6238,175252,32143,224492,41388,95408,34384,148238,78307,38959,9340,160091,61443,15737,11216,41244,170,38299,102443,113097,26382,14027,33707,3957,76300,66160,19431,18900,6952,1717,108656,82206,188021,257335,27295,43999,41210,31777,46956,57457,12657,11489,15697,48060,204748,53583,82422,284790,30503,137341,8120,19615,220311,15991,10217,63424,9808,67431,70976,98221,4491,15177,28535,144789,751,13230,2394,1504,33977,132104,30316,22230,931,97193,185240,24826,22687,174322,15307,22988,1390,188745,180325,29580,59068,74903,18994,29195,79,15436,7622,38462,11566,138710,44828,45774,37768,99236,68137,84083,19282,22698,17134,74807,126662,173497,46248,16938,119735,3212,28292,213652,49013,9975,32180,45660,86250,4801,68788,95490,77482,113751,11994,44624,94452,46839,128497,100316,5798,58588,73184,202987,65417,37790,88524,1606,43156,97964,105717,34947,11203,100060,37742,130074,93653,107799,94311,196106,41347,8035,10780,16390,27883,118236,167395,1979,25006,19375,31628,18916,144723,78502,114047,103107,86492,107686,5844,20934,206963,23556,22591,16562,146333,20167,10471,117434,33085,2863,9740,36669,41849,37271,22790,18209,28979,8231,12952,54408,21731,25130,45208,55748,138120,75826,414,29593,9925,292865,25999,683,123149,7036,92159,86055,61827,103680,23176,54918,58466,57578,13305,5709,86479,16697,31064,17660,200919,10770,49793,33423,32370,52047,16488,62555,6459,8426,83493,7763,59725,82812,18628,67760,79405,68557,9612,7673,28102,56517,69620,171797,32458,29541,15870,81109,32080,207644,71495,21202,11039,91036,61230,2810,130800,32260,4613,60590,37112,75214,33979,126402,155062,30642,63875,12810,194463,82799,47664,16725,36685,43367,61099,449,172150,102867,21691,301838,36745,7130,18671,57316,34852,38034,54182,35578,65900,99486,19771,3456,2658,16914,99866,28390,28109,8262,21147,34353,20006,4228,137085,1675,203023,283196,198286,214375,163329,290603,152574,40471,83506,30068,14730,23177,131539,34759,27668,32178,71896,104799,116305,85430,119262,42860,25160,8911,23428,49437,105322,6519,16203,6349,74711,1230,38045,8540,75165,44736,25909,51026,317034,4984,32281,91312,27060,44431,17817,45363,155937,239085,35697,59784,91993,29531,126740,213757,76560,167776,285273,24262,8237,65030,41160,74437,48804,118916,13159,37842,1031,75349,1478,11655,108777,23435,277425,101734,67469,70231,124711,43532,28514,65526,54956,1e3,21882,17728,25302,40952,52214,149632,1999,2111,3259,63362,89961,220561,39777,26335,9063,10572,12416,34551,34623,38604,24723,5947,15588,69927,66252,119177,69173,46629,28714,70715,212408,20521,406913,74380,11716,50659,50862,37009,88460,130101,7210,53853,538,65120,151950,55806,163748,52837,13153,21100,16674,64536,6091,138201,44837,58547,3723,163,2177,32288,85454,34033,8497,14282,25742,10535,10741,79559,117493,243787,49337,100718,79495,40139,42956,7551,55433,15421,31509,23034,45081,547,61176,53434,328001,8470,36263,30145,4519,74173,53935,11845,73774,60211,78025,3,4102,73782,109293,315332,48412,26683,13714,6865,20128,18490,104141,325,39470,171970,115860,15707,7268,73301,74336,31370,2368,111827,107757,136231,142844,97138,96638,84053,38691,23801,1588,10573,122098,77039,240,186135,146101,11996,18143,112963,46171,155836,348769,47795,121213,116266,132515,3344,144804,31286,99187,255838,129694,35894,48779,55235,148582,71967,65282,15174,13920,47080,6147,108242,157593,125025,7136,1286,28957,127956,28402,98813,20805,7532,109417,40610,5041,32958,15142,18408,108596,33543,50517,27748,80114,233434,91447,487,37094,100048,30541,43477,10639,89862,155868,37667,8726,60684,237903,73408,99589,12190,38739,97348,3914,13594,2680,149016,13907,30171,28343,23530,115225,61104,35821,147679,14337,4297,244282,24085,326976,56428,7851,21303,131620,71446,83253,68692,111870,5224,15813,38197,49026,45057,13660,3306,76345,40671,27905,91072,996,68527,62085,91351,122634,55109,168209,2024,27560,112707,17352,8306,167115,169921,166958,5031,46020,11844,67284,19130,76185,6920,32849,5450,14610,22451,21002,17392,31872,66682,84796,13709,40210,59898,12029,8719,53564,21462,91884,21647,88379,194428,12754,37797,132826,160016,22567,54383,53186,77611,31107,8339,4694,19185,90355,23597,17222,140675,28442,23668,55977,9128,61555,28774,155229,17658,9390,24379,69357,15752,127381,239631,62460,93181,55913,45133,140155,18676,25249,33164,29581,82837,67223,22362,29975,7317,52813,1943,29613,20012,207130,49617,49651,5636,15334,36313,29226,28084,95247,72072,19e3,224932,15811,114,32127,38097,37508,88507,37225,27359,91626,12193,69279,20608,11055,88156,92808,2152,57259,55275,72789,24475,104414,1708,9882,3818,48661,66897,1631,34806,227930,85815,87753,18321,250664,72733,25107,206797,50891,8082,196411,92596,96764,152823,65514,22819,387277,62176,51225,40329,15563,189,3659,73670,64357,51793,275136,33482,86653,74615,67058,11318,125720,15388,22388,8267,1730,102663,170910,40784,7144,85373,13040,7088,94309,583,44224,140424,77439,18496,164026,36578,4722,9151,5824,63365,26510,35199,40500,79277,32495,44614,35233,9566,203293,152144,7097,2330,183480,98629,13423,330887,44130,68600,30939,97829,31012,345465,56747,94879,4939,160027,149761,99423,46099,32251,15332,8761,96094,128555,5763,235318,222223,55729,30241,55420,201746,3987,81382,8259,49325,23287,7719,24633,251100,92311,18591,110533,64759,170260,393860,7175,21144,132887,3593,75346,101277,91109,16387,259187,11627,57459,173829,44694,55780,49797,89192,120443,62622,3904,14814,23887,1027,112258,64955,99800,11132,66353,36202,48624,18158,88481,96882,43059,11040,2455,7077,21651,181159,99126,100434,61388,68186,19161,110468,120052,8819,55324,41494,7014,37689,3618,87729,92615,207943,9823,128657,12587,15857,6379,67628,51216,71775,157617,63244,1503,3864,218754,110864,5769,21492,7243,1192,87921,85529,31512,18537,42698,35350,73510,84474,34301,8991,21013,35034,566,38832,19838,35586,37216,39413,55006,12178,59742,856,84563,6900,25632,17437,49786,30723,13847,70845,4044,7843,23944,235976,55530,48942,6518,20939,73769,192653,52936,95207,23895,132542,142982,22632,87452,48042,54018,178468,10728,26230,23559,363,81269,142012,5718,346258,31456,84333,246476,51018,66692,101804,120570,39962,30373,70593,2864,60541,19425,54209,104092,7201,31545,48018,25865,15442,46257,40443,8328,6451,111782,47527,97754,33046,470,245116,31095,39,91934,87208,73470,36708,36521,12801,70624,36272,8892,79768,12427,55454,103756,5908,52390,62962,22720,141138,94634,41689,128402,126390,6628,106394,35527,134394,82727,254651,194502,148064,89549,3202,28359,957,21954,27906,49840,142747,8307,24206,48978,1186,71728,133038,71474,91306,6333,110959,74600,70387,18983,62609,56057,22970,1147,135850,1321,28834,3578,59715,102227,32827,81415,99952,55636,257598,390,22702,35701,85872,402916,39216,189795,14929,19467,10112,144422,61514,5279,63421,134686,41436,8424,51925,10598,132295,124416,4604,194739,210929,57866,31829,51626,50007,9976,91878,61906,56168,81906,60918,61859,40017,23059,16887,40927,62064,12785,32893,32913,21782,93965,20169,44387,79084,38463,11457,93950,27127,157050,2697,337088,5116,54128,48255,33279,8821,27352,25515,124022,65710,28906,38557,33390,1722,104435,72215,38551,12094,30978,25113,6671,37355,175109,42862,98024,65406,221276,59624,118012,64637,78760,86697,21426,1639,40350,12584,67193,84144,31396,7863,143011,69629,63112,9454,28666,65798,46372,134721,6314,51402,30837,151922,2847,38676,38008,92823,136245,17540,5504,109295,205242,37606,5211,214892,1586,20670,208711,137743,19328,40652,16995,20023,14657,154919,34422,12996,13918,38221,47690,16398,2959,37680,89122,6721,198469,91876,172043,83898,101992,26084,94570,3635,76958,22853,76497,38266,176590,168403,44464,142840,79180,184594,1984,41806,83147,11985,6546,366068,59732,24533,271505,8736,39084,222992,93429,28962,58985,86665,8432,30028,14548,32439,54424,165029,55175,27458,69046,121277,46168,33732,20661,24581,135574,123110,37556,79260,72611,16957,12939,46162,58238,44907,72936,253758,41324,32518,96480,11949,124438,65280,43256,34107,53533,43531,37037,28366,45970,32741,173438,6121,194202,62969,26355,30314,58370,28455,1848,50519,82830,90393,21761,295490,10936,256940,133568,44050,20269,4089,27457,21610,219460,36743,14821,101388,52005,13124,30979,140816,167362,26054,18458,60789,34917,40447,26606,33422,9066,3452,83614,5761,20263,137238,25038,91310,101,52322,74548,42572,38084,214054,186568,31802,17665,30620,141936,37730,14420,4265,187218,49640,188208,51441,55388,96452,66659,40869,42039,60967,221027,19234,178581,29105,96050,9165,196118,157335,3738,40354,117436,2965,34136,59659,15570,50843,230035,31444,71260,43886,18316,5387,38500,168508,17406,32174,8828,103373,143806,90367,3560,18719,122310,16508,26719,2541,105429,6645,37998,73190,10591,235916,49737,87112,233941,53188,32193,79154,4544,52905,126477,7580,63501,57314,3216,31337,6541,103083,60846,49,9756,15481,1355,43840,14319,13743,27486,10222,73114,230718,418644,16706,6674,279748,23058,45273,295831,86306,2743,5535,88773,21829,35253,120938,31153,3169,16839,42847,8751,80974,33942,36867,35514,16485,26474,77775,56877,5391,48346,3882,108713,31403,27804,55248,26235,43821,136104,40118,175507,28034,203908,18732,1788,34030,106427,36958,54359,7251,44936,15356,69139,455,157915,22173,140291,50348,43275,82066,49621,54952,15216,36226,96695,66855,6936,1987,8227,196087,4631,68827,99004,47541,110265,17953,147605,110242,58520,31312,38724,329975,642,3155,34497,75937,6207,73843,6120,17249,51429,117746,3218,910,68961,319671,14938,29555,34700,1649,66673,72268,9655,76800,153087,6941,210168,27130,35398,1780,73242,3135,56689,19556,165307,8765,35967,121458,13333,70453,17350,117253,22265,13340,44265,39869,441,3742,135025,23581,33309,16543,17731,13291,157637,283005,21408,101360,63887,52312,83873,5338,233779,23759,186949,34531,177320,38069,156465,91004,19353,59852,68160,14891,1338,1072,29823,1950,28901,81407,313445,73038,84807,162348,240257,37162,138934,16111,58013,41253,102951,16457,96056,19541,56402,67217,41638,94381,89674,29481,37456,80815,151579,13937,13683,132537,19699,134545,67020,29816,222341,141235,427578,48868,129557,233342,23077,87871,16213,18728,16184,9469,37913,19680,2798,171356,178328,13216,50049,72690,71904,124644,55455,7504,29052,41036,266546,19899,30391,188755,8659,59469,16,104298,112943,53865,76203,138226,68857,139953,14125,107625,119795,173133,4398,50273,48808,54390,16466,122086,31835,67035,50971,48859,7508,46427,66477,73021,84615,39985,83076,46779,201569,53336,36443,60865,168164,143810,51393,25548,169307,32896,24485,38424,21837,29087,275813,51674,6714,64883,46169,187369,55186,76192,12852,12018,62134,31067,118303,16542,12125,10579,4928,26291,43854,7091,10946,253716,109062,39283,17261,113012,258512,47764,125126,32646,55892,80279,201623,149872,3192,385,1208,48750,5376,58738,22335,5427,82416,47811,32435,143086,38930,94128,59975,156037,37977,38224,62485,7698,50405,71027,16462,21559,136153,34131,107506,162069,63703,3101,215029,40407,4178,3774,9187,80019,17880,97926,67579,2600,18405,8351,47924,86638,70820,92206,86453,29610,42241,119200,3198,15466,67813,57863,35454,4779,99518,4649,104641,144269,33730,38073,65864,6838,109456,193298,154007,5623,45741,30846,182578,25573,157224,1543,58575,138703,146140,44971,49356,18275,59064,20300,13122,11848,24453,11973,9797,86843,2919,25530,49210,1130,161220,76788,75373,85604,34926,36014,17777,17255,51533,11676,92226,51845,119859,21525,5936,18507,28050,1140,31418,14857,34207,47859,10750,36382,32079,106909,59426,87757,38393,110042,15965,97104,33757,35344,97993,53979,33651,45407,41884,82515,173089,7177,58371,35365,47543,51927,35587,10670,23544,29306,84233,39976,76076,62097,9007,8668,28119,78281,120790,19835,143020,54968,18670,64959,20649,34469,42570,33001,136570,87796,120044,1106,58700,63951,127623,12805,83057,40212,31773,49850,7361,54336,347524,101314,23751,19569,48791,29174,49369,20467,7465,75842,38281,623,112457,60210,28849,51003,94720,6426,90047,85560,43761,3579,85105,34607,90410,118528,7224,42907,111163,18168,6960,161135,191298,5247,100584,127552,171568,20121,91173,12636,54615,20199,63730,98105,2396,40387,14438,125012,4765,33235,12865,45299,37728,82098,77872,114037,59253,19675,24838,398016,102561,11446,17069,57508,178277,65836,99941,26114,2585,271882,136866,50126,11027,155648,118367,14585,8910,123015,335383,40434,41016,53021,14439,87098,176860,201543,121888,2358,9286,5739,22666,54270,37884,169381,33984,93859,16124,89364,72207,51639,76366,99029,65812,2198,12147,174891,194289,6986,30252,88822,21284,11445,288337,160821,33034,100869,43852,25761,52882,1144,103809,1924,84458,86079,43411,13542,139276,18141,34978,41298,7276,26481,173800,33210,17951,142652,33616,33677,2210,19941,98568,2486,192414,80136,12058,235883,50963,249638,29572,27221,47034,6124,72107,63346,97620,158513,299699,40388,23235,37176,224244,198386,121323,67992,23827,63170,17838,106622,158590,26807,5345,23489,91891,55474,74834,37981,13058,5977,72552,34706,26828,145172,19904,21367,34043,960,77092,91381,4733,47446,7680,41697,5170,16960,14741,46101,13656,473,51842,37433,11103,11551,121951,13191,97536,165932,50397,51628,129028,9069,44885,6590,59195,47045,32940,225472,90345,21833,13303,29407,96615,141951,5198,6028,18395,7181,3861,14966,156358,167182,36529,55253,25942,173153,30959,27261,50691,150176,162201,38467,48462,80602,42163,118482,168,108756,26011,17166,54149,456538,22512,91374,13816,90358,131615,18132,226707,1824,28139,26860,42253,93877,77351,65575,8980,80574,22020,27948,40422,91324,76376,13528,39281,91685,82215,122541,144066,1983,193851,17283,26320,2739,194978,4790,26845,42627,61300,65815,174612,55133,4200,191130,79771,158321,52280,166796,221620,62461,11278,4067,88152,83409,31717,121367,13522,47325,37945,10406,174348,249321,154101,64912,29938,51775,17220,15776,166138,78890,84425,54121,42861,16368,24572,291647,10197,32073,22651,11677,97509,26952,35787,18424,41910,71614,94977,72318,41594,70024,275419,37702,60199,7335,39107,61315,18271,18394,33768,87884,104277,123724,7277,56288,71981,189803,49320,3352,6798,14240,8954,69220,94433,57372,28620,68863,193727,85575,42309,41667,67689,42081,22543,44824,12719,28540,114236,101553,27638,27296,4300,5353,4663,19379,94098,3758,95888,95144,80344,87320,28447,259518,12718,71391,152731,37063,24132,31911,104896,15672,103782,1521,4945,72541,23717,122632,15619,87175,206120,29428,189780,61416,28350,44457,972,1175,47233,198738,95789,41907,21953,97034,59341,22864,53713,16873,32971,20693,20954,31336,21477,16169,38370,16412,9019,3841,24599,21938,17085,6484,81198,76413,5849,72514,12320,65247,276175,37234,59796,52642,16312,57349,198507,94148,46134,18958,125552,1747,18725,151873,14901,5490,68287,29470,3689,64794,40814,26018,25692,54450,2703,88278,124886,173087,174e3,24159,179477,24276,46004,201876,209202,445,52876,31948,30206,157610,39180,18439,44124,50469,5774,96278,222758,200216,50290,45486,20435,46986,46276,140133,142326,15569,13363,47522,92583,2182,7135,16853,22998,30272,4952,63263,35623,39096,53789,44864,20053,110392,124213,4630,16087,28221,127787,25839,77481,44693,13464,113146,6983,27069,55717,50102,4760,7107,26186,66507,59145,36032,104182,71328,29425,64317,50781,47465,94298,69706,74899,22754,120756,25108,93077,56834,73286,39928,16218,41699,176763,7555,70819,50083,26895,23315,26014,16773,123079,41712,5719,31516,90427,158540,85051,183128,40864,27505,55392,9058,45224,96857,30901,136622,96557,56304,120061,11501,151448,5773,89743,7769,86069,2935,18471,41628,10114,33660,110170,49479,26745,92846,33221,26731,18795,87076,8550,2100,29972,120289,3077,72490,33784,2630,208722,50861,63483,79029,6419,39467,14302,45286,64207,9686,67513,44170,1050,77246,59266,17055,53801,7150,11111,42432,4278,94579,362117,36175,42902,41933,39002,98489,22913,74161,84773,57036,17556,162288,74485,178760,93867,73635,128860,50362,261,67455,80001,46080,35662,4368,25247,19230,74393,22588,1822,27682,235324,13798,85998,13194,235067,23514,71669,147632,23191,134748,214683,105101,1518,25489,247114,7380,54842,26922,3971,26361,20844,68642,170517,77339,123255,8963,77818,150998,48466,36806,2732,23261,11741,236162,18243,126216,28690,50546,16385,92760,197383,246558,201295,88255,67588,71687,176076,172653,169058,33906,63747,24835,157621,43338,30050,46152,132741,2770,51371,94835,6614,15112,11749,56936,1250,19027,399017,58036,100215,23388,55815,308768,124152,94803,9521,64186,8971,28,30427,62163,7616,103838,35079,29203,131235,7743,17389,10882,37420,61460,228512,85363,41581,131077,62822,119647,10130,54445,26925,19968,29016,24446,74028,24176,61448,67185,9254,8563,119129,9771,99184,37716,39514,10532,221512,258753,218630,55980,23394,32141,61924,66749,32411,3741,36475,26678,77010,44946,91203,128749,116953,20476,49625,53116,13735,102335,29376,51946,83407,67892,59212,34685,21083,1546,112982,32972,74397,1078,190545,16082,86140,58591,89611,101531,10061,105104,76319,20035,17551,52611,169061,190842,100780,23907,90413,115619,9675,34710,193435,49443,129734,11183,258877,16318,136182,126808,44635,27304,192375,2599,125648,47051,12091,23814,721,58800,40137,66726,97930,60877,74487,7942,54326,9841,41428,13762,8211,85383,6950,99177,79806,201786,296464,124087,13144,29741,41721,47634,55088,254286,106408,17041,99064,12942,64086,45233,14005,2612,55827,255,7984,13980,38574,12776,46654,73499,249951,2101,26676,25996,132326,116415,119062,50449,31033,23038,11589,179252,20007,14860,129270,21143,17796,144715,60106,70758,69842,34674,282133,44014,16774,57268,38528,24053,46373,201667,28327,471023,51889,102667,21193,114909,84132,69317,96723,67969,16134,68145,15058,28765,32035,2524,101089,98664,25045,76571,14957,86040,118506,262428,154764,81573,39681,283900,73287,127825,544,80448,52347,38512,175971,15180,45467,33086,46552,48894,81107,43213,36672,54025,76703,8053,7608,13299,56619,20752,238099,54164,105133,1444,32942,953,37564,8e3,66316,119463,106817,404,13667,149108,128597,31267,10269,49836,106150,1484,52330,76965,160486,171648,38456,31263,22424,37738,66245,67467,143369,60471,75610,20895,115528,86070,60854,40796,49347,18989,15030,11371,37578,15779,79867,10187,86462,46402,155626,93200,40229,7090,57547,108053,99598,11088,47505,41218,206017,2173,20988,30219,22919,80563,57566,42369,93141,41675,2407,182519,120495,27154,16702,29456,14349,7958,16688,117177,140375,42467,261919,74916,153569,10836,34742,49526,7621,105997,12212,2270,392377,7755,17959,25086,232152,138791,33847,13860,35316,5811,1344,71259,50452,207539,92635,50359,5821,33674,30255,2086,2587,96264,17543,42,6029,9580,43007,139248,82831,12917,29607,25786,51467,42137,85161,100698,31561,88989,121990,278500,3602,109344,37982,15279,116442,28936,30880,87894,58079,128661,126731,67392,28051,146885,4861,16216,97344,42827,147561,153948,22684,21335,47685,1853,43349,15185,59642,10229,25520,187921,108972,5579,98037,24945,6697,19193,63734,137934,75056,89740,19767,224268,56138,63643,151661,39313,70618,84031,89723,84074,13703,85626,35460,8867,64845,3439,57906,99776,63968,49270,81130,34356,16210,23547,36446,34090,140028,72439,2221,22163,57058,363492,113754,18913,95451,48663,54464,54037,176097,68425,3023,34906,29482,117389,341780,80431,58330,16753,92616,60907,94846,147486,4498,48646,7773,46801,7778,18946,464978,47558,33223,177444,7328,15626,63337,94700,11743,9351,255024,39098,16447,42647,96230,39769,58840,10068,63439,35800,65843,58823,413844,9156,51258,7434,61791,85018,6872,3692,28096,7121,33024,6009,75532,31997,192535,9661,3304,9547,14753,31987,25314,55689,15896,20430,39472,31340,99744,25398,115569,54883,28719,205423,23071,57855,64638,149867,25671,82403,37616,20668,39989,77996,74948,140555,175248,64810,36515,46595,4958,248773,24045,28728,136673,168704,20804,114833,100325,27135,21205,96151,153134,45992,7093,13992,76047,1980,19432,145001,75159,87462,17710,1013,45556,34297,144882,20648,26061,11319,129567,108555,18872,464580,33386,22717,65948,167189,5603,135042,79542,8801,202632,18114,91882,5973,5239,67315,4431,60916,47819,71693,32597,32606,18183,45072,80329,76385,24749,51305,40314,156514,14693,130345,13168,66214,18029,12858,34801,27628,14544,10823,40522,40185,33739,148694,23548,9923,61012,28859,17933,19442,34364,99849,164107,141167,30629,21054,6744,36491,8096,42474,41706,155060,30650,10600,163442,1143,96655,61390,52359,7559,51568,64256,203854,4467,22453,14504,436398,7878,6980,8293,63610,293747,16167,35763,19627,147603,15419,18032,110744,51346,33681,54571,40472,48615,39073,21604,13754,173027,92560,11083,47299,63062,11813,52007,29883,9734,139722,15953,1550,20651,13616,49306,16113,90089,92326,7584,30712,72424,164858,6831,152871,55746,197721,34167,196442,6022,112107,55215,7538,123381,4920,43539,77165,8939,50392,34192,20225,79762,22505,58667,40770,29788,97180,82835,4568,8579,13273,363569,35898,49983,436,36598,3237,131691,62418,35591,8101,4073,379438,65218,76072,33887,2968,27573,212619,288680,68278,72851,150504,217896,6913,121339,22017,35340,51072,43616,75043,31437,10833,81487,4364,22968,41454,106687,85446,19863,109625,149241,524,141850,214404,54376,657,237023,9401,108137,53800,32474,49712,53334,126876,27337,45552,177696,8269,15036,12097,42240,2328,125374,119295,99715,2500,19624,39441,27220,102691,60957,94543,39101,18566,67362,13975,78230,25017,34017,239007,90027,39351,41681,35354,43822,1043,916,58587,141983,94818,38799,75459,41114,67432,16195,36606,59568,22272,126769,31424,68659,12287,134302,257977,5756,207285,95637,47248,117689,19583,77451,22373,12200,54993,117118,34244,29386,34562,53819,71267,64172,77665,49368,7716,59301,25749,45426,194789,17297,2650,1766,32501,45198,20403,20984,6600,14171,94604,19037,5402,29896,9938,59935,109708,88081,145182,44844,39167,352626,164173,35374,45982,6122,154,73419,220487,53834,53601,17992,8609,229321,5610,68098,66815,71012,95069,140968,27396,8957,134489,24656,86659,56598,134852,17316,123838,255436,6613,41610,138033,81452,32023,32396,123687,63398,8693,29712,30407,19296,121188,3551,36099,20032,111948,56624,16547,27453,35916,15378,52039,56849,13489,22214,73177,53097,277349,2157,14029,187886,10260,141743,246460,91880,50869,3788,49486,133566,54950,33120,129337,53768,18333,9525,26902,312251,10297,9020,70759,16647,112432,59260,84609,9818,82766,73569,468,46001,75780,55028,52106,11498,43645,108069,17150,17753,